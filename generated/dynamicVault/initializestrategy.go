// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dynamic_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize a strategy and add strategy to vault.strategies index
type InitializeStrategyInstruction struct {
	Bumps        *StrategyBumps
	StrategyType *StrategyType

	// [0] = [WRITE] vault
	// ··········· Vault account
	//
	// [1] = [] strategy_program
	//
	// [2] = [WRITE] strategy
	// ··········· Strategy account
	//
	// [3] = [WRITE] reserve
	//
	// [4] = [WRITE] collateral_vault
	// ··········· Collateral vault account
	//
	// [5] = [] collateral_mint
	// ··········· Collateral mint account
	//
	// [6] = [WRITE, SIGNER] admin
	// ··········· Admin account
	//
	// [7] = [] system_program
	// ··········· System program account
	//
	// [8] = [] rent
	// ··········· Rent account
	//
	// [9] = [] token_program
	// ··········· Token program account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeStrategyInstructionBuilder creates a new `InitializeStrategyInstruction` instruction builder.
func NewInitializeStrategyInstructionBuilder() *InitializeStrategyInstruction {
	nd := &InitializeStrategyInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetBumps sets the "bumps" parameter.
func (inst *InitializeStrategyInstruction) SetBumps(bumps StrategyBumps) *InitializeStrategyInstruction {
	inst.Bumps = &bumps
	return inst
}

// SetStrategyType sets the "strategy_type" parameter.
func (inst *InitializeStrategyInstruction) SetStrategyType(strategy_type StrategyType) *InitializeStrategyInstruction {
	inst.StrategyType = &strategy_type
	return inst
}

// SetVaultAccount sets the "vault" account.
// Vault account
func (inst *InitializeStrategyInstruction) SetVaultAccount(vault ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
// Vault account
func (inst *InitializeStrategyInstruction) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStrategyProgramAccount sets the "strategy_program" account.
func (inst *InitializeStrategyInstruction) SetStrategyProgramAccount(strategyProgram ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(strategyProgram)
	return inst
}

// GetStrategyProgramAccount gets the "strategy_program" account.
func (inst *InitializeStrategyInstruction) GetStrategyProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStrategyAccount sets the "strategy" account.
// Strategy account
func (inst *InitializeStrategyInstruction) SetStrategyAccount(strategy ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(strategy).WRITE()
	return inst
}

// GetStrategyAccount gets the "strategy" account.
// Strategy account
func (inst *InitializeStrategyInstruction) GetStrategyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetReserveAccount sets the "reserve" account.
func (inst *InitializeStrategyInstruction) SetReserveAccount(reserve ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(reserve).WRITE()
	return inst
}

// GetReserveAccount gets the "reserve" account.
func (inst *InitializeStrategyInstruction) GetReserveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCollateralVaultAccount sets the "collateral_vault" account.
// Collateral vault account
func (inst *InitializeStrategyInstruction) SetCollateralVaultAccount(collateralVault ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(collateralVault).WRITE()
	return inst
}

// GetCollateralVaultAccount gets the "collateral_vault" account.
// Collateral vault account
func (inst *InitializeStrategyInstruction) GetCollateralVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCollateralMintAccount sets the "collateral_mint" account.
// Collateral mint account
func (inst *InitializeStrategyInstruction) SetCollateralMintAccount(collateralMint ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(collateralMint)
	return inst
}

// GetCollateralMintAccount gets the "collateral_mint" account.
// Collateral mint account
func (inst *InitializeStrategyInstruction) GetCollateralMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAdminAccount sets the "admin" account.
// Admin account
func (inst *InitializeStrategyInstruction) SetAdminAccount(admin ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
// Admin account
func (inst *InitializeStrategyInstruction) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "system_program" account.
// System program account
func (inst *InitializeStrategyInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// System program account
func (inst *InitializeStrategyInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
// Rent account
func (inst *InitializeStrategyInstruction) SetRentAccount(rent ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// Rent account
func (inst *InitializeStrategyInstruction) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "token_program" account.
// Token program account
func (inst *InitializeStrategyInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeStrategyInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// Token program account
func (inst *InitializeStrategyInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst InitializeStrategyInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeStrategy,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeStrategyInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeStrategyInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bumps == nil {
			return errors.New("Bumps parameter is not set")
		}
		if inst.StrategyType == nil {
			return errors.New("StrategyType parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.StrategyProgram is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Strategy is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Reserve is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CollateralVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CollateralMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeStrategyInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeStrategy")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Bumps", *inst.Bumps))
						paramsBranch.Child(ag_format.Param(" StrategyType", *inst.StrategyType))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("strategy_program", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        strategy", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         reserve", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("collateral_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" collateral_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           admin", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("  system_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            rent", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   token_program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj InitializeStrategyInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bumps` param:
	err = encoder.Encode(obj.Bumps)
	if err != nil {
		return err
	}
	// Serialize `StrategyType` param:
	err = encoder.Encode(obj.StrategyType)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeStrategyInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bumps`:
	err = decoder.Decode(&obj.Bumps)
	if err != nil {
		return err
	}
	// Deserialize `StrategyType`:
	err = decoder.Decode(&obj.StrategyType)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeStrategyInstruction declares a new InitializeStrategy instruction with the provided parameters and accounts.
func NewInitializeStrategyInstruction(
	// Parameters:
	bumps StrategyBumps,
	strategy_type StrategyType,
	// Accounts:
	vault ag_solanago.PublicKey,
	strategyProgram ag_solanago.PublicKey,
	strategy ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	collateralVault ag_solanago.PublicKey,
	collateralMint ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *InitializeStrategyInstruction {
	return NewInitializeStrategyInstructionBuilder().
		SetBumps(bumps).
		SetStrategyType(strategy_type).
		SetVaultAccount(vault).
		SetStrategyProgramAccount(strategyProgram).
		SetStrategyAccount(strategy).
		SetReserveAccount(reserve).
		SetCollateralVaultAccount(collateralVault).
		SetCollateralMintAccount(collateralMint).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetTokenProgramAccount(tokenProgram)
}
