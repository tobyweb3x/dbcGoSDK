// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dynamic_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// remove a strategy by advance payment
type RemoveStrategy2Instruction struct {
	MaxAdminPayAmount *uint64

	// [0] = [WRITE] vault
	// ··········· Vault account
	//
	// [1] = [WRITE] strategy
	// ··········· Strategy account
	//
	// [2] = [] strategy_program
	//
	// [3] = [WRITE] collateral_vault
	// ··········· Collateral vault account
	//
	// [4] = [WRITE] reserve
	//
	// [5] = [WRITE] token_vault
	// ··········· token_vault
	//
	// [6] = [WRITE] token_admin_advance_payment
	// ··········· token_advance_payemnt
	// ··········· the owner of token_advance_payment must be admin
	//
	// [7] = [WRITE] token_vault_advance_payment
	// ··········· token_vault_advance_payment
	// ··········· the account must be different from token_vault
	// ··········· the owner of token_advance_payment must be vault
	//
	// [8] = [WRITE] fee_vault
	// ··········· fee_vault
	//
	// [9] = [WRITE] lp_mint
	// ··········· lp_mint
	//
	// [10] = [] token_program
	// ··········· token_program
	//
	// [11] = [SIGNER] admin
	// ··········· admin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRemoveStrategy2InstructionBuilder creates a new `RemoveStrategy2Instruction` instruction builder.
func NewRemoveStrategy2InstructionBuilder() *RemoveStrategy2Instruction {
	nd := &RemoveStrategy2Instruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetMaxAdminPayAmount sets the "max_admin_pay_amount" parameter.
func (inst *RemoveStrategy2Instruction) SetMaxAdminPayAmount(max_admin_pay_amount uint64) *RemoveStrategy2Instruction {
	inst.MaxAdminPayAmount = &max_admin_pay_amount
	return inst
}

// SetVaultAccount sets the "vault" account.
// Vault account
func (inst *RemoveStrategy2Instruction) SetVaultAccount(vault ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault).WRITE()
	return inst
}

// GetVaultAccount gets the "vault" account.
// Vault account
func (inst *RemoveStrategy2Instruction) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetStrategyAccount sets the "strategy" account.
// Strategy account
func (inst *RemoveStrategy2Instruction) SetStrategyAccount(strategy ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(strategy).WRITE()
	return inst
}

// GetStrategyAccount gets the "strategy" account.
// Strategy account
func (inst *RemoveStrategy2Instruction) GetStrategyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStrategyProgramAccount sets the "strategy_program" account.
func (inst *RemoveStrategy2Instruction) SetStrategyProgramAccount(strategyProgram ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(strategyProgram)
	return inst
}

// GetStrategyProgramAccount gets the "strategy_program" account.
func (inst *RemoveStrategy2Instruction) GetStrategyProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCollateralVaultAccount sets the "collateral_vault" account.
// Collateral vault account
func (inst *RemoveStrategy2Instruction) SetCollateralVaultAccount(collateralVault ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(collateralVault).WRITE()
	return inst
}

// GetCollateralVaultAccount gets the "collateral_vault" account.
// Collateral vault account
func (inst *RemoveStrategy2Instruction) GetCollateralVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetReserveAccount sets the "reserve" account.
func (inst *RemoveStrategy2Instruction) SetReserveAccount(reserve ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(reserve).WRITE()
	return inst
}

// GetReserveAccount gets the "reserve" account.
func (inst *RemoveStrategy2Instruction) GetReserveAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenVaultAccount sets the "token_vault" account.
// token_vault
func (inst *RemoveStrategy2Instruction) SetTokenVaultAccount(tokenVault ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenVault).WRITE()
	return inst
}

// GetTokenVaultAccount gets the "token_vault" account.
// token_vault
func (inst *RemoveStrategy2Instruction) GetTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAdminAdvancePaymentAccount sets the "token_admin_advance_payment" account.
// token_advance_payemnt
// the owner of token_advance_payment must be admin
func (inst *RemoveStrategy2Instruction) SetTokenAdminAdvancePaymentAccount(tokenAdminAdvancePayment ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenAdminAdvancePayment).WRITE()
	return inst
}

// GetTokenAdminAdvancePaymentAccount gets the "token_admin_advance_payment" account.
// token_advance_payemnt
// the owner of token_advance_payment must be admin
func (inst *RemoveStrategy2Instruction) GetTokenAdminAdvancePaymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenVaultAdvancePaymentAccount sets the "token_vault_advance_payment" account.
// token_vault_advance_payment
// the account must be different from token_vault
// the owner of token_advance_payment must be vault
func (inst *RemoveStrategy2Instruction) SetTokenVaultAdvancePaymentAccount(tokenVaultAdvancePayment ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenVaultAdvancePayment).WRITE()
	return inst
}

// GetTokenVaultAdvancePaymentAccount gets the "token_vault_advance_payment" account.
// token_vault_advance_payment
// the account must be different from token_vault
// the owner of token_advance_payment must be vault
func (inst *RemoveStrategy2Instruction) GetTokenVaultAdvancePaymentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetFeeVaultAccount sets the "fee_vault" account.
// fee_vault
func (inst *RemoveStrategy2Instruction) SetFeeVaultAccount(feeVault ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(feeVault).WRITE()
	return inst
}

// GetFeeVaultAccount gets the "fee_vault" account.
// fee_vault
func (inst *RemoveStrategy2Instruction) GetFeeVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetLpMintAccount sets the "lp_mint" account.
// lp_mint
func (inst *RemoveStrategy2Instruction) SetLpMintAccount(lpMint ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(lpMint).WRITE()
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
// lp_mint
func (inst *RemoveStrategy2Instruction) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "token_program" account.
// token_program
func (inst *RemoveStrategy2Instruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token_program
func (inst *RemoveStrategy2Instruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAdminAccount sets the "admin" account.
// admin
func (inst *RemoveStrategy2Instruction) SetAdminAccount(admin ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
// admin
func (inst *RemoveStrategy2Instruction) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst RemoveStrategy2Instruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RemoveStrategy2,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RemoveStrategy2Instruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RemoveStrategy2Instruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MaxAdminPayAmount == nil {
			return errors.New("MaxAdminPayAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Strategy is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StrategyProgram is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CollateralVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Reserve is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenAdminAdvancePayment is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenVaultAdvancePayment is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.FeeVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Admin is not set")
		}
	}
	return nil
}

func (inst *RemoveStrategy2Instruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RemoveStrategy2")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   MaxAdminPayAmount", *inst.MaxAdminPayAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   strategy", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           strategy_program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           collateral_vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                    reserve", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                token_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("token_admin_advance_payment", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("token_vault_advance_payment", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                  fee_vault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                    lp_mint", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("              token_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                      admin", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj RemoveStrategy2Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxAdminPayAmount` param:
	err = encoder.Encode(obj.MaxAdminPayAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *RemoveStrategy2Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxAdminPayAmount`:
	err = decoder.Decode(&obj.MaxAdminPayAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewRemoveStrategy2Instruction declares a new RemoveStrategy2 instruction with the provided parameters and accounts.
func NewRemoveStrategy2Instruction(
	// Parameters:
	max_admin_pay_amount uint64,
	// Accounts:
	vault ag_solanago.PublicKey,
	strategy ag_solanago.PublicKey,
	strategyProgram ag_solanago.PublicKey,
	collateralVault ag_solanago.PublicKey,
	reserve ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	tokenAdminAdvancePayment ag_solanago.PublicKey,
	tokenVaultAdvancePayment ag_solanago.PublicKey,
	feeVault ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	admin ag_solanago.PublicKey) *RemoveStrategy2Instruction {
	return NewRemoveStrategy2InstructionBuilder().
		SetMaxAdminPayAmount(max_admin_pay_amount).
		SetVaultAccount(vault).
		SetStrategyAccount(strategy).
		SetStrategyProgramAccount(strategyProgram).
		SetCollateralVaultAccount(collateralVault).
		SetReserveAccount(reserve).
		SetTokenVaultAccount(tokenVault).
		SetTokenAdminAdvancePaymentAccount(tokenAdminAdvancePayment).
		SetTokenVaultAdvancePaymentAccount(tokenVaultAdvancePayment).
		SetFeeVaultAccount(feeVault).
		SetLpMintAccount(lpMint).
		SetTokenProgramAccount(tokenProgram).
		SetAdminAccount(admin)
}
