// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dynamic_vault

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// collect token, that someone send wrongly
// also help in case Mango reimbursement
type CollectDustInstruction struct {

	// [0] = [] vault
	// ··········· vault
	//
	// [1] = [WRITE] token_vault
	// ··········· Token vault, must be different from vault.token_vault
	//
	// [2] = [WRITE] token_admin
	// ··········· token admin, enforce owner is admin to avoid mistake
	//
	// [3] = [SIGNER] admin
	// ··········· admin
	//
	// [4] = [] token_program
	// ··········· token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectDustInstructionBuilder creates a new `CollectDustInstruction` instruction builder.
func NewCollectDustInstructionBuilder() *CollectDustInstruction {
	nd := &CollectDustInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetVaultAccount sets the "vault" account.
// vault
func (inst *CollectDustInstruction) SetVaultAccount(vault ag_solanago.PublicKey) *CollectDustInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(vault)
	return inst
}

// GetVaultAccount gets the "vault" account.
// vault
func (inst *CollectDustInstruction) GetVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTokenVaultAccount sets the "token_vault" account.
// Token vault, must be different from vault.token_vault
func (inst *CollectDustInstruction) SetTokenVaultAccount(tokenVault ag_solanago.PublicKey) *CollectDustInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(tokenVault).WRITE()
	return inst
}

// GetTokenVaultAccount gets the "token_vault" account.
// Token vault, must be different from vault.token_vault
func (inst *CollectDustInstruction) GetTokenVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAdminAccount sets the "token_admin" account.
// token admin, enforce owner is admin to avoid mistake
func (inst *CollectDustInstruction) SetTokenAdminAccount(tokenAdmin ag_solanago.PublicKey) *CollectDustInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAdmin).WRITE()
	return inst
}

// GetTokenAdminAccount gets the "token_admin" account.
// token admin, enforce owner is admin to avoid mistake
func (inst *CollectDustInstruction) GetTokenAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAdminAccount sets the "admin" account.
// admin
func (inst *CollectDustInstruction) SetAdminAccount(admin ag_solanago.PublicKey) *CollectDustInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(admin).SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
// admin
func (inst *CollectDustInstruction) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenProgramAccount sets the "token_program" account.
// token_program
func (inst *CollectDustInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectDustInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token_program
func (inst *CollectDustInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CollectDustInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectDust,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectDustInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectDustInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Vault is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TokenVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAdmin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *CollectDustInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectDust")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        vault", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  token_vault", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  token_admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        admin", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("token_program", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CollectDustInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CollectDustInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCollectDustInstruction declares a new CollectDust instruction with the provided parameters and accounts.
func NewCollectDustInstruction(
	// Accounts:
	vault ag_solanago.PublicKey,
	tokenVault ag_solanago.PublicKey,
	tokenAdmin ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *CollectDustInstruction {
	return NewCollectDustInstructionBuilder().
		SetVaultAccount(vault).
		SetTokenVaultAccount(tokenVault).
		SetTokenAdminAccount(tokenAdmin).
		SetAdminAccount(admin).
		SetTokenProgramAccount(tokenProgram)
}
