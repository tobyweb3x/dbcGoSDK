// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv1

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type TokenMultiplier struct {
	// Multiplier for token A of the pool.
	TokenAMultiplier uint64

	// Multiplier for token B of the pool.
	TokenBMultiplier uint64

	// Record the highest token decimal in the pool. For example, Token A is 6 decimal, token B is 9 decimal. This will save value of 9.
	PrecisionFactor uint8
}

func (obj TokenMultiplier) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAMultiplier` param:
	err = encoder.Encode(obj.TokenAMultiplier)
	if err != nil {
		return err
	}
	// Serialize `TokenBMultiplier` param:
	err = encoder.Encode(obj.TokenBMultiplier)
	if err != nil {
		return err
	}
	// Serialize `PrecisionFactor` param:
	err = encoder.Encode(obj.PrecisionFactor)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TokenMultiplier) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAMultiplier`:
	err = decoder.Decode(&obj.TokenAMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMultiplier`:
	err = decoder.Decode(&obj.TokenBMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `PrecisionFactor`:
	err = decoder.Decode(&obj.PrecisionFactor)
	if err != nil {
		return err
	}
	return nil
}

type PoolFees struct {
	// Trade fees are extra token amounts that are held inside the token
	// accounts during a trade, making the value of liquidity tokens rise.
	// Trade fee numerator
	TradeFeeNumerator uint64

	// Trade fee denominator
	TradeFeeDenominator uint64

	// Protocol trading fees are extra token amounts that are held inside the token
	// accounts during a trade, with the equivalent in pool tokens minted to
	// the protocol of the program.
	// Protocol trade fee numerator
	ProtocolTradeFeeNumerator uint64

	// Protocol trade fee denominator
	ProtocolTradeFeeDenominator uint64
}

func (obj PoolFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeDenominator` param:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeDenominator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

type Depeg struct {
	// The virtual price of staking / interest bearing token
	BaseVirtualPrice uint64

	// The last time base_virtual_price is updated
	BaseCacheUpdated uint64

	// Type of the depeg pool
	DepegType DepegType
}

func (obj Depeg) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseVirtualPrice` param:
	err = encoder.Encode(obj.BaseVirtualPrice)
	if err != nil {
		return err
	}
	// Serialize `BaseCacheUpdated` param:
	err = encoder.Encode(obj.BaseCacheUpdated)
	if err != nil {
		return err
	}
	// Serialize `DepegType` param:
	err = encoder.Encode(obj.DepegType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Depeg) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseVirtualPrice`:
	err = decoder.Decode(&obj.BaseVirtualPrice)
	if err != nil {
		return err
	}
	// Deserialize `BaseCacheUpdated`:
	err = decoder.Decode(&obj.BaseCacheUpdated)
	if err != nil {
		return err
	}
	// Deserialize `DepegType`:
	err = decoder.Decode(&obj.DepegType)
	if err != nil {
		return err
	}
	return nil
}

type ConfigParameters struct {
	TradeFeeNumerator         uint64
	ProtocolTradeFeeNumerator uint64
	ActivationDuration        uint64
	VaultConfigKey            ag_solanago.PublicKey
	PoolCreatorAuthority      ag_solanago.PublicKey
	ActivationType            uint8
	Index                     uint64
	PartnerFeeNumerator       uint64
}

func (obj ConfigParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ActivationDuration` param:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `PartnerFeeNumerator` param:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ConfigParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	return nil
}

type CustomizableParams struct {
	// Trading fee.
	TradeFeeNumerator uint32

	// The pool start trading.
	ActivationPoint *uint64 `bin:"optional"`

	// Whether the pool support alpha vault
	HasAlphaVault bool

	// Activation type
	ActivationType uint8

	// Padding
	Padding [90]uint8
}

func (obj CustomizableParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param (optional):
	{
		if obj.ActivationPoint == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `HasAlphaVault` param:
	err = encoder.Encode(obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CustomizableParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ActivationPoint)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `HasAlphaVault`:
	err = decoder.Decode(&obj.HasAlphaVault)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type Padding struct {
	// Padding 0
	Padding0 [6]uint8

	// Padding 1
	Padding1 [21]uint64

	// Padding 2
	Padding2 [21]uint64
}

func (obj Padding) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Padding0` param:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Padding) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	return nil
}

type PartnerInfo struct {
	FeeNumerator     uint64
	PartnerAuthority ag_solanago.PublicKey
	PendingFeeA      uint64
	PendingFeeB      uint64
}

func (obj PartnerInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FeeNumerator` param:
	err = encoder.Encode(obj.FeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `PartnerAuthority` param:
	err = encoder.Encode(obj.PartnerAuthority)
	if err != nil {
		return err
	}
	// Serialize `PendingFeeA` param:
	err = encoder.Encode(obj.PendingFeeA)
	if err != nil {
		return err
	}
	// Serialize `PendingFeeB` param:
	err = encoder.Encode(obj.PendingFeeB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PartnerInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FeeNumerator`:
	err = decoder.Decode(&obj.FeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `PartnerAuthority`:
	err = decoder.Decode(&obj.PartnerAuthority)
	if err != nil {
		return err
	}
	// Deserialize `PendingFeeA`:
	err = decoder.Decode(&obj.PendingFeeA)
	if err != nil {
		return err
	}
	// Deserialize `PendingFeeB`:
	err = decoder.Decode(&obj.PendingFeeB)
	if err != nil {
		return err
	}
	return nil
}

type Bootstrapping struct {
	// Activation point, can be slot or timestamp
	ActivationPoint uint64

	// Whitelisted vault to be able to buy pool before activation_point
	WhitelistedVault ag_solanago.PublicKey

	// Need to store pool creator in lauch pool, so they can modify liquidity before activation_point
	PoolCreator ag_solanago.PublicKey

	// Activation type, 0 means by slot, 1 means by timestamp
	ActivationType uint8
}

func (obj Bootstrapping) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `WhitelistedVault` param:
	err = encoder.Encode(obj.WhitelistedVault)
	if err != nil {
		return err
	}
	// Serialize `PoolCreator` param:
	err = encoder.Encode(obj.PoolCreator)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Bootstrapping) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `WhitelistedVault`:
	err = decoder.Decode(&obj.WhitelistedVault)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreator`:
	err = decoder.Decode(&obj.PoolCreator)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	return nil
}

type ActivationType ag_binary.BorshEnum

const (
	ActivationTypeSlot ActivationType = iota
	ActivationTypeTimestamp
)

func (value ActivationType) String() string {
	switch value {
	case ActivationTypeSlot:
		return "Slot"
	case ActivationTypeTimestamp:
		return "Timestamp"
	default:
		return ""
	}
}

type RoundDirection ag_binary.BorshEnum

const (
	RoundDirectionFloor RoundDirection = iota
	RoundDirectionCeiling
)

func (value RoundDirection) String() string {
	switch value {
	case RoundDirectionFloor:
		return "Floor"
	case RoundDirectionCeiling:
		return "Ceiling"
	default:
		return ""
	}
}

type TradeDirection ag_binary.BorshEnum

const (
	TradeDirectionAtoB TradeDirection = iota
	TradeDirectionBtoA
)

func (value TradeDirection) String() string {
	switch value {
	case TradeDirectionAtoB:
		return "AtoB"
	case TradeDirectionBtoA:
		return "BtoA"
	default:
		return ""
	}
}

type NewCurveType struct {
	Value newCurveType
}

func (obj NewCurveType) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := newCurveTypeContainer{}
	switch realvalue := obj.Value.(type) {
	case NewCurveTypeConstantProductTuple:
		tmp.Enum = 0
		tmp.ConstantProduct = realvalue
	case NewCurveTypeStableTuple:
		tmp.Enum = 1
		tmp.Stable = realvalue
	case NewCurveTypeNewCurveTuple:
		tmp.Enum = 2
		tmp.NewCurve = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *NewCurveType) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(newCurveTypeContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.ConstantProduct
	case 1:
		obj.Value = tmp.Stable
	case 2:
		obj.Value = tmp.NewCurve
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type newCurveType interface {
	isNewCurveType()
}

type newCurveTypeContainer struct {
	Enum            ag_binary.BorshEnum `borsh_enum:"true"`
	ConstantProduct NewCurveTypeConstantProductTuple
	Stable          NewCurveTypeStableTuple
	NewCurve        NewCurveTypeNewCurveTuple
}

type NewCurveTypeConstantProductTuple uint8

func (obj NewCurveTypeConstantProductTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *NewCurveTypeConstantProductTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ NewCurveTypeConstantProductTuple) isNewCurveType() {}

type NewCurveTypeStableTuple struct {
	Amp                     uint64
	TokenMultiplier         TokenMultiplier
	Depeg                   Depeg
	LastAmpUpdatedTimestamp uint64
}

func (obj NewCurveTypeStableTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amp` param:
	err = encoder.Encode(obj.Amp)
	if err != nil {
		return err
	}
	// Serialize `TokenMultiplier` param:
	err = encoder.Encode(obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Serialize `Depeg` param:
	err = encoder.Encode(obj.Depeg)
	if err != nil {
		return err
	}
	// Serialize `LastAmpUpdatedTimestamp` param:
	err = encoder.Encode(obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NewCurveTypeStableTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amp`:
	err = decoder.Decode(&obj.Amp)
	if err != nil {
		return err
	}
	// Deserialize `TokenMultiplier`:
	err = decoder.Decode(&obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `Depeg`:
	err = decoder.Decode(&obj.Depeg)
	if err != nil {
		return err
	}
	// Deserialize `LastAmpUpdatedTimestamp`:
	err = decoder.Decode(&obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ NewCurveTypeStableTuple) isNewCurveType() {}

type NewCurveTypeNewCurveTuple struct {
	FieldOne uint64
	FieldTwo uint64
}

func (obj NewCurveTypeNewCurveTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FieldOne` param:
	err = encoder.Encode(obj.FieldOne)
	if err != nil {
		return err
	}
	// Serialize `FieldTwo` param:
	err = encoder.Encode(obj.FieldTwo)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NewCurveTypeNewCurveTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FieldOne`:
	err = decoder.Decode(&obj.FieldOne)
	if err != nil {
		return err
	}
	// Deserialize `FieldTwo`:
	err = decoder.Decode(&obj.FieldTwo)
	if err != nil {
		return err
	}
	return nil
}

func (_ NewCurveTypeNewCurveTuple) isNewCurveType() {}

type CurveType struct {
	Value curveType
}

func (obj CurveType) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	tmp := curveTypeContainer{}
	switch realvalue := obj.Value.(type) {
	case CurveTypeConstantProductTuple:
		tmp.Enum = 0
		tmp.ConstantProduct = realvalue
	case CurveTypeStableTuple:
		tmp.Enum = 1
		tmp.Stable = realvalue
	}
	return encoder.Encode(tmp)
}

func (obj *CurveType) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	tmp := new(curveTypeContainer)
	err = decoder.Decode(tmp)
	if err != nil {
		return err
	}
	switch tmp.Enum {
	case 0:
		obj.Value = tmp.ConstantProduct
	case 1:
		obj.Value = tmp.Stable
	default:
		return fmt.Errorf("unknown enum index: %v", tmp.Enum)
	}
	return nil
}

type curveType interface {
	isCurveType()
}

type curveTypeContainer struct {
	Enum            ag_binary.BorshEnum `borsh_enum:"true"`
	ConstantProduct CurveTypeConstantProductTuple
	Stable          CurveTypeStableTuple
}

type CurveTypeConstantProductTuple uint8

func (obj CurveTypeConstantProductTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *CurveTypeConstantProductTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ CurveTypeConstantProductTuple) isCurveType() {}

type CurveTypeStableTuple struct {
	Amp                     uint64
	TokenMultiplier         TokenMultiplier
	Depeg                   Depeg
	LastAmpUpdatedTimestamp uint64
}

func (obj CurveTypeStableTuple) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amp` param:
	err = encoder.Encode(obj.Amp)
	if err != nil {
		return err
	}
	// Serialize `TokenMultiplier` param:
	err = encoder.Encode(obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Serialize `Depeg` param:
	err = encoder.Encode(obj.Depeg)
	if err != nil {
		return err
	}
	// Serialize `LastAmpUpdatedTimestamp` param:
	err = encoder.Encode(obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CurveTypeStableTuple) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amp`:
	err = decoder.Decode(&obj.Amp)
	if err != nil {
		return err
	}
	// Deserialize `TokenMultiplier`:
	err = decoder.Decode(&obj.TokenMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `Depeg`:
	err = decoder.Decode(&obj.Depeg)
	if err != nil {
		return err
	}
	// Deserialize `LastAmpUpdatedTimestamp`:
	err = decoder.Decode(&obj.LastAmpUpdatedTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (_ CurveTypeStableTuple) isCurveType() {}

type DepegType ag_binary.BorshEnum

const (
	DepegTypeNone DepegType = iota
	DepegTypeMarinade
	DepegTypeLido
	DepegTypeSplStake
)

func (value DepegType) String() string {
	switch value {
	case DepegTypeNone:
		return "None"
	case DepegTypeMarinade:
		return "Marinade"
	case DepegTypeLido:
		return "Lido"
	case DepegTypeSplStake:
		return "SplStake"
	default:
		return ""
	}
}

type Rounding ag_binary.BorshEnum

const (
	RoundingUp Rounding = iota
	RoundingDown
)

func (value Rounding) String() string {
	switch value {
	case RoundingUp:
		return "Up"
	case RoundingDown:
		return "Down"
	default:
		return ""
	}
}

type PoolType ag_binary.BorshEnum

const (
	PoolTypePermissioned PoolType = iota
	PoolTypePermissionless
)

func (value PoolType) String() string {
	switch value {
	case PoolTypePermissioned:
		return "Permissioned"
	case PoolTypePermissionless:
		return "Permissionless"
	default:
		return ""
	}
}

type Config struct {
	PoolFees           PoolFees
	ActivationDuration uint64
	VaultConfigKey     ag_solanago.PublicKey

	// Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config.
	PoolCreatorAuthority ag_solanago.PublicKey

	// Activation type
	ActivationType      uint8
	PartnerFeeNumerator uint64
	Padding             [219]uint8
}

func (obj Config) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `ActivationDuration` param:
	err = encoder.Encode(obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `PartnerFeeNumerator` param:
	err = encoder.Encode(obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `ActivationDuration`:
	err = decoder.Decode(&obj.ActivationDuration)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `PartnerFeeNumerator`:
	err = decoder.Decode(&obj.PartnerFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type LockEscrow struct {
	// Pool address
	Pool ag_solanago.PublicKey

	// Owner address
	Owner ag_solanago.PublicKey

	// Vault address, store the lock user lock
	EscrowVault ag_solanago.PublicKey

	// bump, used to sign
	Bump uint8

	// Total locked amount
	TotalLockedAmount uint64

	// Lp per token, virtual price of lp token
	LpPerToken ag_binary.Uint128

	// Unclaimed fee pending
	UnclaimedFeePending uint64

	// Total a fee claimed so far
	AFee uint64

	// Total b fee claimed so far
	BFee uint64
}

func (obj LockEscrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `EscrowVault` param:
	err = encoder.Encode(obj.EscrowVault)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `TotalLockedAmount` param:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Serialize `LpPerToken` param:
	err = encoder.Encode(obj.LpPerToken)
	if err != nil {
		return err
	}
	// Serialize `UnclaimedFeePending` param:
	err = encoder.Encode(obj.UnclaimedFeePending)
	if err != nil {
		return err
	}
	// Serialize `AFee` param:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return err
	}
	// Serialize `BFee` param:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockEscrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `EscrowVault`:
	err = decoder.Decode(&obj.EscrowVault)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return err
	}
	// Deserialize `LpPerToken`:
	err = decoder.Decode(&obj.LpPerToken)
	if err != nil {
		return err
	}
	// Deserialize `UnclaimedFeePending`:
	err = decoder.Decode(&obj.UnclaimedFeePending)
	if err != nil {
		return err
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return err
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

type Pool struct {
	// LP token mint of the pool
	LpMint ag_solanago.PublicKey

	// Token A mint of the pool. Eg: USDT
	TokenAMint ag_solanago.PublicKey

	// Token B mint of the pool. Eg: USDC
	TokenBMint ag_solanago.PublicKey

	// Vault account for token A. Token A of the pool will be deposit / withdraw from this vault account.
	AVault ag_solanago.PublicKey

	// Vault account for token B. Token B of the pool will be deposit / withdraw from this vault account.
	BVault ag_solanago.PublicKey

	// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	AVaultLp ag_solanago.PublicKey

	// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
	BVaultLp ag_solanago.PublicKey

	// "A" vault lp bump. Used to create signer seeds.
	AVaultLpBump uint8

	// Flag to determine whether the pool is enabled, or disabled.
	Enabled bool

	// Protocol fee token account for token A. Used to receive trading fee.
	ProtocolTokenAFee ag_solanago.PublicKey

	// Protocol fee token account for token B. Used to receive trading fee.
	ProtocolTokenBFee ag_solanago.PublicKey

	// Fee last updated timestamp
	FeeLastUpdatedAt uint64
	Padding0         [24]uint8

	// Store the fee charges setting.
	Fees PoolFees

	// Pool type
	PoolType PoolType

	// Stake pubkey of SPL stake pool
	Stake ag_solanago.PublicKey

	// Total locked lp token
	TotalLockedLp uint64

	// bootstrapping config
	Bootstrapping Bootstrapping
	PartnerInfo   PartnerInfo

	// Padding for future pool field
	Padding Padding

	// The type of the swap curve supported by the pool.
	CurveType *CurveType
}

func (obj Pool) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `AVault` param:
	err = encoder.Encode(obj.AVault)
	if err != nil {
		return err
	}
	// Serialize `BVault` param:
	err = encoder.Encode(obj.BVault)
	if err != nil {
		return err
	}
	// Serialize `AVaultLp` param:
	err = encoder.Encode(obj.AVaultLp)
	if err != nil {
		return err
	}
	// Serialize `BVaultLp` param:
	err = encoder.Encode(obj.BVaultLp)
	if err != nil {
		return err
	}
	// Serialize `AVaultLpBump` param:
	err = encoder.Encode(obj.AVaultLpBump)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTokenAFee` param:
	err = encoder.Encode(obj.ProtocolTokenAFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTokenBFee` param:
	err = encoder.Encode(obj.ProtocolTokenBFee)
	if err != nil {
		return err
	}
	// Serialize `FeeLastUpdatedAt` param:
	err = encoder.Encode(obj.FeeLastUpdatedAt)
	if err != nil {
		return err
	}
	// Serialize `Padding0` param:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return err
	}
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `Stake` param:
	err = encoder.Encode(obj.Stake)
	if err != nil {
		return err
	}
	// Serialize `TotalLockedLp` param:
	err = encoder.Encode(obj.TotalLockedLp)
	if err != nil {
		return err
	}
	// Serialize `Bootstrapping` param:
	err = encoder.Encode(obj.Bootstrapping)
	if err != nil {
		return err
	}
	// Serialize `PartnerInfo` param:
	err = encoder.Encode(obj.PartnerInfo)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `CurveType` param:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Pool) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `AVault`:
	err = decoder.Decode(&obj.AVault)
	if err != nil {
		return err
	}
	// Deserialize `BVault`:
	err = decoder.Decode(&obj.BVault)
	if err != nil {
		return err
	}
	// Deserialize `AVaultLp`:
	err = decoder.Decode(&obj.AVaultLp)
	if err != nil {
		return err
	}
	// Deserialize `BVaultLp`:
	err = decoder.Decode(&obj.BVaultLp)
	if err != nil {
		return err
	}
	// Deserialize `AVaultLpBump`:
	err = decoder.Decode(&obj.AVaultLpBump)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTokenAFee`:
	err = decoder.Decode(&obj.ProtocolTokenAFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTokenBFee`:
	err = decoder.Decode(&obj.ProtocolTokenBFee)
	if err != nil {
		return err
	}
	// Deserialize `FeeLastUpdatedAt`:
	err = decoder.Decode(&obj.FeeLastUpdatedAt)
	if err != nil {
		return err
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return err
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `Stake`:
	err = decoder.Decode(&obj.Stake)
	if err != nil {
		return err
	}
	// Deserialize `TotalLockedLp`:
	err = decoder.Decode(&obj.TotalLockedLp)
	if err != nil {
		return err
	}
	// Deserialize `Bootstrapping`:
	err = decoder.Decode(&obj.Bootstrapping)
	if err != nil {
		return err
	}
	// Deserialize `PartnerInfo`:
	err = decoder.Decode(&obj.PartnerInfo)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return err
	}
	return nil
}

type AddLiquidity struct {
	LpMintAmount uint64
	TokenAAmount uint64
	TokenBAmount uint64
}

func (obj AddLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpMintAmount` param:
	err = encoder.Encode(obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpMintAmount`:
	err = decoder.Decode(&obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

type RemoveLiquidity struct {
	LpUnmintAmount  uint64
	TokenAOutAmount uint64
	TokenBOutAmount uint64
}

func (obj RemoveLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpUnmintAmount` param:
	err = encoder.Encode(obj.LpUnmintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAOutAmount` param:
	err = encoder.Encode(obj.TokenAOutAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBOutAmount` param:
	err = encoder.Encode(obj.TokenBOutAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoveLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpUnmintAmount`:
	err = decoder.Decode(&obj.LpUnmintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAOutAmount`:
	err = decoder.Decode(&obj.TokenAOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBOutAmount`:
	err = decoder.Decode(&obj.TokenBOutAmount)
	if err != nil {
		return err
	}
	return nil
}

type BootstrapLiquidity struct {
	LpMintAmount uint64
	TokenAAmount uint64
	TokenBAmount uint64
	Pool         ag_solanago.PublicKey
}

func (obj BootstrapLiquidity) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpMintAmount` param:
	err = encoder.Encode(obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BootstrapLiquidity) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpMintAmount`:
	err = decoder.Decode(&obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

type Swap struct {
	InAmount    uint64
	OutAmount   uint64
	TradeFee    uint64
	ProtocolFee uint64
	HostFee     uint64
}

func (obj Swap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `InAmount` param:
	err = encoder.Encode(obj.InAmount)
	if err != nil {
		return err
	}
	// Serialize `OutAmount` param:
	err = encoder.Encode(obj.OutAmount)
	if err != nil {
		return err
	}
	// Serialize `TradeFee` param:
	err = encoder.Encode(obj.TradeFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `HostFee` param:
	err = encoder.Encode(obj.HostFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Swap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `InAmount`:
	err = decoder.Decode(&obj.InAmount)
	if err != nil {
		return err
	}
	// Deserialize `OutAmount`:
	err = decoder.Decode(&obj.OutAmount)
	if err != nil {
		return err
	}
	// Deserialize `TradeFee`:
	err = decoder.Decode(&obj.TradeFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `HostFee`:
	err = decoder.Decode(&obj.HostFee)
	if err != nil {
		return err
	}
	return nil
}

type SetPoolFees struct {
	TradeFeeNumerator           uint64
	TradeFeeDenominator         uint64
	ProtocolTradeFeeNumerator   uint64
	ProtocolTradeFeeDenominator uint64
	Pool                        ag_solanago.PublicKey
}

func (obj SetPoolFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeDenominator` param:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeDenominator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetPoolFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

type PoolInfo struct {
	TokenAAmount     uint64
	TokenBAmount     uint64
	VirtualPrice     float64
	CurrentTimestamp uint64
}

func (obj PoolInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `VirtualPrice` param:
	err = encoder.Encode(obj.VirtualPrice)
	if err != nil {
		return err
	}
	// Serialize `CurrentTimestamp` param:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `VirtualPrice`:
	err = decoder.Decode(&obj.VirtualPrice)
	if err != nil {
		return err
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

type TransferAdmin struct {
	Admin    ag_solanago.PublicKey
	NewAdmin ag_solanago.PublicKey
	Pool     ag_solanago.PublicKey
}

func (obj TransferAdmin) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferAdmin) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

type OverrideCurveParam struct {
	NewAmp           uint64
	UpdatedTimestamp uint64
	Pool             ag_solanago.PublicKey
}

func (obj OverrideCurveParam) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewAmp` param:
	err = encoder.Encode(obj.NewAmp)
	if err != nil {
		return err
	}
	// Serialize `UpdatedTimestamp` param:
	err = encoder.Encode(obj.UpdatedTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OverrideCurveParam) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewAmp`:
	err = decoder.Decode(&obj.NewAmp)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedTimestamp`:
	err = decoder.Decode(&obj.UpdatedTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

type PoolCreated struct {
	LpMint     ag_solanago.PublicKey
	TokenAMint ag_solanago.PublicKey
	TokenBMint ag_solanago.PublicKey
	PoolType   PoolType
	Pool       ag_solanago.PublicKey
}

func (obj PoolCreated) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolCreated) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

type PoolEnabled struct {
	Pool    ag_solanago.PublicKey
	Enabled bool
}

func (obj PoolEnabled) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolEnabled) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

type MigrateFeeAccount struct {
	Pool              ag_solanago.PublicKey
	NewAdminTokenAFee ag_solanago.PublicKey
	NewAdminTokenBFee ag_solanago.PublicKey
	TokenAAmount      uint64
	TokenBAmount      uint64
}

func (obj MigrateFeeAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `NewAdminTokenAFee` param:
	err = encoder.Encode(obj.NewAdminTokenAFee)
	if err != nil {
		return err
	}
	// Serialize `NewAdminTokenBFee` param:
	err = encoder.Encode(obj.NewAdminTokenBFee)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MigrateFeeAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `NewAdminTokenAFee`:
	err = decoder.Decode(&obj.NewAdminTokenAFee)
	if err != nil {
		return err
	}
	// Deserialize `NewAdminTokenBFee`:
	err = decoder.Decode(&obj.NewAdminTokenBFee)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

type CreateLockEscrow struct {
	Pool  ag_solanago.PublicKey
	Owner ag_solanago.PublicKey
}

func (obj CreateLockEscrow) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateLockEscrow) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

type Lock struct {
	Pool   ag_solanago.PublicKey
	Owner  ag_solanago.PublicKey
	Amount uint64
}

func (obj Lock) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Lock) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type ClaimFee struct {
	Pool   ag_solanago.PublicKey
	Owner  ag_solanago.PublicKey
	Amount uint64
	AFee   uint64
	BFee   uint64
}

func (obj ClaimFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `AFee` param:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return err
	}
	// Serialize `BFee` param:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return err
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

type CreateConfig struct {
	TradeFeeNumerator         uint64
	ProtocolTradeFeeNumerator uint64
	Config                    ag_solanago.PublicKey
}

func (obj CreateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

type CloseConfig struct {
	Config ag_solanago.PublicKey
}

func (obj CloseConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CloseConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

type WithdrawProtocolFees struct {
	Pool              ag_solanago.PublicKey
	ProtocolAFee      uint64
	ProtocolBFee      uint64
	ProtocolAFeeOwner ag_solanago.PublicKey
	ProtocolBFeeOwner ag_solanago.PublicKey
}

func (obj WithdrawProtocolFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `ProtocolAFee` param:
	err = encoder.Encode(obj.ProtocolAFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolBFee` param:
	err = encoder.Encode(obj.ProtocolBFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolAFeeOwner` param:
	err = encoder.Encode(obj.ProtocolAFeeOwner)
	if err != nil {
		return err
	}
	// Serialize `ProtocolBFeeOwner` param:
	err = encoder.Encode(obj.ProtocolBFeeOwner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawProtocolFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolAFee`:
	err = decoder.Decode(&obj.ProtocolAFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolBFee`:
	err = decoder.Decode(&obj.ProtocolBFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolAFeeOwner`:
	err = decoder.Decode(&obj.ProtocolAFeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolBFeeOwner`:
	err = decoder.Decode(&obj.ProtocolBFeeOwner)
	if err != nil {
		return err
	}
	return nil
}

type PartnerClaimFees struct {
	Pool    ag_solanago.PublicKey
	FeeA    uint64
	FeeB    uint64
	Partner ag_solanago.PublicKey
}

func (obj PartnerClaimFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `FeeA` param:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return err
	}
	// Serialize `FeeB` param:
	err = encoder.Encode(obj.FeeB)
	if err != nil {
		return err
	}
	// Serialize `Partner` param:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PartnerClaimFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return err
	}
	// Deserialize `FeeB`:
	err = decoder.Decode(&obj.FeeB)
	if err != nil {
		return err
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return err
	}
	return nil
}
