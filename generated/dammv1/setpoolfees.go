// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv1

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Update trading fee charged for liquidity provider, and admin.
type SetPoolFeesInstruction struct {
	Fees                   *PoolFees
	NewPartnerFeeNumerator *uint64

	// [0] = [WRITE] pool
	// ··········· Pool account (PDA)
	//
	// [1] = [SIGNER] fee_operator
	// ··········· Fee operator account
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetPoolFeesInstructionBuilder creates a new `SetPoolFeesInstruction` instruction builder.
func NewSetPoolFeesInstructionBuilder() *SetPoolFeesInstruction {
	nd := &SetPoolFeesInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetFees sets the "fees" parameter.
func (inst *SetPoolFeesInstruction) SetFees(fees PoolFees) *SetPoolFeesInstruction {
	inst.Fees = &fees
	return inst
}

// SetNewPartnerFeeNumerator sets the "new_partner_fee_numerator" parameter.
func (inst *SetPoolFeesInstruction) SetNewPartnerFeeNumerator(new_partner_fee_numerator uint64) *SetPoolFeesInstruction {
	inst.NewPartnerFeeNumerator = &new_partner_fee_numerator
	return inst
}

// SetPoolAccount sets the "pool" account.
// Pool account (PDA)
func (inst *SetPoolFeesInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *SetPoolFeesInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Pool account (PDA)
func (inst *SetPoolFeesInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetFeeOperatorAccount sets the "fee_operator" account.
// Fee operator account
func (inst *SetPoolFeesInstruction) SetFeeOperatorAccount(feeOperator ag_solanago.PublicKey) *SetPoolFeesInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(feeOperator).SIGNER()
	return inst
}

// GetFeeOperatorAccount gets the "fee_operator" account.
// Fee operator account
func (inst *SetPoolFeesInstruction) GetFeeOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst SetPoolFeesInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetPoolFees,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetPoolFeesInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetPoolFeesInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Fees == nil {
			return errors.New("Fees parameter is not set")
		}
		if inst.NewPartnerFeeNumerator == nil {
			return errors.New("NewPartnerFeeNumerator parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.FeeOperator is not set")
		}
	}
	return nil
}

func (inst *SetPoolFeesInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetPoolFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                     Fees", *inst.Fees))
						paramsBranch.Child(ag_format.Param("   NewPartnerFeeNumerator", *inst.NewPartnerFeeNumerator))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("fee_operator", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetPoolFeesInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	// Serialize `NewPartnerFeeNumerator` param:
	err = encoder.Encode(obj.NewPartnerFeeNumerator)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetPoolFeesInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	// Deserialize `NewPartnerFeeNumerator`:
	err = decoder.Decode(&obj.NewPartnerFeeNumerator)
	if err != nil {
		return err
	}
	return nil
}

// NewSetPoolFeesInstruction declares a new SetPoolFees instruction with the provided parameters and accounts.
func NewSetPoolFeesInstruction(
	// Parameters:
	fees PoolFees,
	new_partner_fee_numerator uint64,
	// Accounts:
	pool ag_solanago.PublicKey,
	feeOperator ag_solanago.PublicKey) *SetPoolFeesInstruction {
	return NewSetPoolFeesInstructionBuilder().
		SetFees(fees).
		SetNewPartnerFeeNumerator(new_partner_fee_numerator).
		SetPoolAccount(pool).
		SetFeeOperatorAccount(feeOperator)
}
