// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv1

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type AddLiquidityEventData struct {
	LpMintAmount uint64
	TokenAAmount uint64
	TokenBAmount uint64
}

var AddLiquidityEventDataDiscriminator = [8]byte{31, 94, 125, 90, 227, 52, 61, 186}

func (obj AddLiquidityEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AddLiquidityEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LpMintAmount` param:
	err = encoder.Encode(obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AddLiquidityEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AddLiquidityEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[31 94 125 90 227 52 61 186]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LpMintAmount`:
	err = decoder.Decode(&obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*AddLiquidityEventData) isEventData() {}
func (obj *AddLiquidityEventData) Self() any {
	return obj
}

type RemoveLiquidityEventData struct {
	LpUnmintAmount  uint64
	TokenAOutAmount uint64
	TokenBOutAmount uint64
}

var RemoveLiquidityEventDataDiscriminator = [8]byte{116, 244, 97, 232, 103, 31, 152, 58}

func (obj RemoveLiquidityEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RemoveLiquidityEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LpUnmintAmount` param:
	err = encoder.Encode(obj.LpUnmintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAOutAmount` param:
	err = encoder.Encode(obj.TokenAOutAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBOutAmount` param:
	err = encoder.Encode(obj.TokenBOutAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RemoveLiquidityEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RemoveLiquidityEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[116 244 97 232 103 31 152 58]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LpUnmintAmount`:
	err = decoder.Decode(&obj.LpUnmintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAOutAmount`:
	err = decoder.Decode(&obj.TokenAOutAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBOutAmount`:
	err = decoder.Decode(&obj.TokenBOutAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*RemoveLiquidityEventData) isEventData() {}
func (obj *RemoveLiquidityEventData) Self() any {
	return obj
}

type BootstrapLiquidityEventData struct {
	LpMintAmount uint64
	TokenAAmount uint64
	TokenBAmount uint64
	Pool         ag_solanago.PublicKey
}

var BootstrapLiquidityEventDataDiscriminator = [8]byte{121, 127, 38, 136, 92, 55, 14, 247}

func (obj BootstrapLiquidityEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BootstrapLiquidityEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LpMintAmount` param:
	err = encoder.Encode(obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BootstrapLiquidityEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BootstrapLiquidityEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[121 127 38 136 92 55 14 247]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LpMintAmount`:
	err = decoder.Decode(&obj.LpMintAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (*BootstrapLiquidityEventData) isEventData() {}
func (obj *BootstrapLiquidityEventData) Self() any {
	return obj
}

type SwapEventData struct {
	InAmount    uint64
	OutAmount   uint64
	TradeFee    uint64
	ProtocolFee uint64
	HostFee     uint64
}

var SwapEventDataDiscriminator = [8]byte{81, 108, 227, 190, 205, 208, 10, 196}

func (obj SwapEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SwapEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `InAmount` param:
	err = encoder.Encode(obj.InAmount)
	if err != nil {
		return err
	}
	// Serialize `OutAmount` param:
	err = encoder.Encode(obj.OutAmount)
	if err != nil {
		return err
	}
	// Serialize `TradeFee` param:
	err = encoder.Encode(obj.TradeFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolFee` param:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Serialize `HostFee` param:
	err = encoder.Encode(obj.HostFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SwapEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SwapEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[81 108 227 190 205 208 10 196]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `InAmount`:
	err = decoder.Decode(&obj.InAmount)
	if err != nil {
		return err
	}
	// Deserialize `OutAmount`:
	err = decoder.Decode(&obj.OutAmount)
	if err != nil {
		return err
	}
	// Deserialize `TradeFee`:
	err = decoder.Decode(&obj.TradeFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return err
	}
	// Deserialize `HostFee`:
	err = decoder.Decode(&obj.HostFee)
	if err != nil {
		return err
	}
	return nil
}

func (*SwapEventData) isEventData() {}
func (obj *SwapEventData) Self() any {
	return obj
}

type SetPoolFeesEventData struct {
	TradeFeeNumerator           uint64
	TradeFeeDenominator         uint64
	ProtocolTradeFeeNumerator   uint64
	ProtocolTradeFeeDenominator uint64
	Pool                        ag_solanago.PublicKey
}

var SetPoolFeesEventDataDiscriminator = [8]byte{245, 26, 198, 164, 88, 18, 75, 9}

func (obj SetPoolFeesEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SetPoolFeesEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeDenominator` param:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeDenominator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SetPoolFeesEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SetPoolFeesEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[245 26 198 164 88 18 75 9]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeDenominator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (*SetPoolFeesEventData) isEventData() {}
func (obj *SetPoolFeesEventData) Self() any {
	return obj
}

type PoolInfoEventData struct {
	TokenAAmount     uint64
	TokenBAmount     uint64
	VirtualPrice     float64
	CurrentTimestamp uint64
}

var PoolInfoEventDataDiscriminator = [8]byte{207, 20, 87, 97, 251, 212, 234, 45}

func (obj PoolInfoEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolInfoEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `VirtualPrice` param:
	err = encoder.Encode(obj.VirtualPrice)
	if err != nil {
		return err
	}
	// Serialize `CurrentTimestamp` param:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolInfoEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolInfoEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[207 20 87 97 251 212 234 45]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `VirtualPrice`:
	err = decoder.Decode(&obj.VirtualPrice)
	if err != nil {
		return err
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (*PoolInfoEventData) isEventData() {}
func (obj *PoolInfoEventData) Self() any {
	return obj
}

type TransferAdminEventData struct {
	Admin    ag_solanago.PublicKey
	NewAdmin ag_solanago.PublicKey
	Pool     ag_solanago.PublicKey
}

var TransferAdminEventDataDiscriminator = [8]byte{228, 169, 131, 244, 61, 56, 65, 254}

func (obj TransferAdminEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TransferAdminEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `NewAdmin` param:
	err = encoder.Encode(obj.NewAdmin)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TransferAdminEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TransferAdminEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[228 169 131 244 61 56 65 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `NewAdmin`:
	err = decoder.Decode(&obj.NewAdmin)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (*TransferAdminEventData) isEventData() {}
func (obj *TransferAdminEventData) Self() any {
	return obj
}

type OverrideCurveParamEventData struct {
	NewAmp           uint64
	UpdatedTimestamp uint64
	Pool             ag_solanago.PublicKey
}

var OverrideCurveParamEventDataDiscriminator = [8]byte{247, 20, 165, 248, 75, 5, 54, 246}

func (obj OverrideCurveParamEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OverrideCurveParamEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `NewAmp` param:
	err = encoder.Encode(obj.NewAmp)
	if err != nil {
		return err
	}
	// Serialize `UpdatedTimestamp` param:
	err = encoder.Encode(obj.UpdatedTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OverrideCurveParamEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OverrideCurveParamEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[247 20 165 248 75 5 54 246]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `NewAmp`:
	err = decoder.Decode(&obj.NewAmp)
	if err != nil {
		return err
	}
	// Deserialize `UpdatedTimestamp`:
	err = decoder.Decode(&obj.UpdatedTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (*OverrideCurveParamEventData) isEventData() {}
func (obj *OverrideCurveParamEventData) Self() any {
	return obj
}

type PoolCreatedEventData struct {
	LpMint     ag_solanago.PublicKey
	TokenAMint ag_solanago.PublicKey
	TokenBMint ag_solanago.PublicKey
	PoolType   PoolType
	Pool       ag_solanago.PublicKey
}

var PoolCreatedEventDataDiscriminator = [8]byte{202, 44, 41, 88, 104, 220, 157, 82}

func (obj PoolCreatedEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolCreatedEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolCreatedEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolCreatedEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[202 44 41 88 104 220 157 82]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	return nil
}

func (*PoolCreatedEventData) isEventData() {}
func (obj *PoolCreatedEventData) Self() any {
	return obj
}

type PoolEnabledEventData struct {
	Pool    ag_solanago.PublicKey
	Enabled bool
}

var PoolEnabledEventDataDiscriminator = [8]byte{2, 151, 18, 83, 204, 134, 92, 191}

func (obj PoolEnabledEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PoolEnabledEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Enabled` param:
	err = encoder.Encode(obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PoolEnabledEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PoolEnabledEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[2 151 18 83 204 134 92 191]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Enabled`:
	err = decoder.Decode(&obj.Enabled)
	if err != nil {
		return err
	}
	return nil
}

func (*PoolEnabledEventData) isEventData() {}
func (obj *PoolEnabledEventData) Self() any {
	return obj
}

type MigrateFeeAccountEventData struct {
	Pool              ag_solanago.PublicKey
	NewAdminTokenAFee ag_solanago.PublicKey
	NewAdminTokenBFee ag_solanago.PublicKey
	TokenAAmount      uint64
	TokenBAmount      uint64
}

var MigrateFeeAccountEventDataDiscriminator = [8]byte{223, 234, 232, 26, 252, 105, 180, 125}

func (obj MigrateFeeAccountEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MigrateFeeAccountEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `NewAdminTokenAFee` param:
	err = encoder.Encode(obj.NewAdminTokenAFee)
	if err != nil {
		return err
	}
	// Serialize `NewAdminTokenBFee` param:
	err = encoder.Encode(obj.NewAdminTokenBFee)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MigrateFeeAccountEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MigrateFeeAccountEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[223 234 232 26 252 105 180 125]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `NewAdminTokenAFee`:
	err = decoder.Decode(&obj.NewAdminTokenAFee)
	if err != nil {
		return err
	}
	// Deserialize `NewAdminTokenBFee`:
	err = decoder.Decode(&obj.NewAdminTokenBFee)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*MigrateFeeAccountEventData) isEventData() {}
func (obj *MigrateFeeAccountEventData) Self() any {
	return obj
}

type CreateLockEscrowEventData struct {
	Pool  ag_solanago.PublicKey
	Owner ag_solanago.PublicKey
}

var CreateLockEscrowEventDataDiscriminator = [8]byte{74, 94, 106, 141, 49, 17, 98, 109}

func (obj CreateLockEscrowEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CreateLockEscrowEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateLockEscrowEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CreateLockEscrowEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[74 94 106 141 49 17 98 109]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	return nil
}

func (*CreateLockEscrowEventData) isEventData() {}
func (obj *CreateLockEscrowEventData) Self() any {
	return obj
}

type LockEventData struct {
	Pool   ag_solanago.PublicKey
	Owner  ag_solanago.PublicKey
	Amount uint64
}

var LockEventDataDiscriminator = [8]byte{220, 183, 67, 215, 153, 207, 56, 234}

func (obj LockEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(LockEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(LockEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[220 183 67 215 153 207 56 234]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*LockEventData) isEventData() {}
func (obj *LockEventData) Self() any {
	return obj
}

type ClaimFeeEventData struct {
	Pool   ag_solanago.PublicKey
	Owner  ag_solanago.PublicKey
	Amount uint64
	AFee   uint64
	BFee   uint64
}

var ClaimFeeEventDataDiscriminator = [8]byte{75, 122, 154, 48, 140, 74, 123, 163}

func (obj ClaimFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ClaimFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `AFee` param:
	err = encoder.Encode(obj.AFee)
	if err != nil {
		return err
	}
	// Serialize `BFee` param:
	err = encoder.Encode(obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ClaimFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[75 122 154 48 140 74 123 163]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `AFee`:
	err = decoder.Decode(&obj.AFee)
	if err != nil {
		return err
	}
	// Deserialize `BFee`:
	err = decoder.Decode(&obj.BFee)
	if err != nil {
		return err
	}
	return nil
}

func (*ClaimFeeEventData) isEventData() {}
func (obj *ClaimFeeEventData) Self() any {
	return obj
}

type CreateConfigEventData struct {
	TradeFeeNumerator         uint64
	ProtocolTradeFeeNumerator uint64
	Config                    ag_solanago.PublicKey
}

var CreateConfigEventDataDiscriminator = [8]byte{199, 152, 10, 19, 39, 39, 157, 104}

func (obj CreateConfigEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CreateConfigEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `ProtocolTradeFeeNumerator` param:
	err = encoder.Encode(obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CreateConfigEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CreateConfigEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[199 152 10 19 39 39 157 104]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolTradeFeeNumerator`:
	err = decoder.Decode(&obj.ProtocolTradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (*CreateConfigEventData) isEventData() {}
func (obj *CreateConfigEventData) Self() any {
	return obj
}

type CloseConfigEventData struct {
	Config ag_solanago.PublicKey
}

var CloseConfigEventDataDiscriminator = [8]byte{249, 181, 108, 89, 4, 150, 90, 174}

func (obj CloseConfigEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(CloseConfigEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *CloseConfigEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(CloseConfigEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[249 181 108 89 4 150 90 174]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (*CloseConfigEventData) isEventData() {}
func (obj *CloseConfigEventData) Self() any {
	return obj
}

type WithdrawProtocolFeesEventData struct {
	Pool              ag_solanago.PublicKey
	ProtocolAFee      uint64
	ProtocolBFee      uint64
	ProtocolAFeeOwner ag_solanago.PublicKey
	ProtocolBFeeOwner ag_solanago.PublicKey
}

var WithdrawProtocolFeesEventDataDiscriminator = [8]byte{30, 240, 207, 196, 139, 239, 79, 28}

func (obj WithdrawProtocolFeesEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(WithdrawProtocolFeesEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `ProtocolAFee` param:
	err = encoder.Encode(obj.ProtocolAFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolBFee` param:
	err = encoder.Encode(obj.ProtocolBFee)
	if err != nil {
		return err
	}
	// Serialize `ProtocolAFeeOwner` param:
	err = encoder.Encode(obj.ProtocolAFeeOwner)
	if err != nil {
		return err
	}
	// Serialize `ProtocolBFeeOwner` param:
	err = encoder.Encode(obj.ProtocolBFeeOwner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *WithdrawProtocolFeesEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(WithdrawProtocolFeesEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[30 240 207 196 139 239 79 28]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolAFee`:
	err = decoder.Decode(&obj.ProtocolAFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolBFee`:
	err = decoder.Decode(&obj.ProtocolBFee)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolAFeeOwner`:
	err = decoder.Decode(&obj.ProtocolAFeeOwner)
	if err != nil {
		return err
	}
	// Deserialize `ProtocolBFeeOwner`:
	err = decoder.Decode(&obj.ProtocolBFeeOwner)
	if err != nil {
		return err
	}
	return nil
}

func (*WithdrawProtocolFeesEventData) isEventData() {}
func (obj *WithdrawProtocolFeesEventData) Self() any {
	return obj
}

type PartnerClaimFeesEventData struct {
	Pool    ag_solanago.PublicKey
	FeeA    uint64
	FeeB    uint64
	Partner ag_solanago.PublicKey
}

var PartnerClaimFeesEventDataDiscriminator = [8]byte{135, 131, 10, 94, 119, 209, 202, 48}

func (obj PartnerClaimFeesEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(PartnerClaimFeesEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `FeeA` param:
	err = encoder.Encode(obj.FeeA)
	if err != nil {
		return err
	}
	// Serialize `FeeB` param:
	err = encoder.Encode(obj.FeeB)
	if err != nil {
		return err
	}
	// Serialize `Partner` param:
	err = encoder.Encode(obj.Partner)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PartnerClaimFeesEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(PartnerClaimFeesEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[135 131 10 94 119 209 202 48]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `FeeA`:
	err = decoder.Decode(&obj.FeeA)
	if err != nil {
		return err
	}
	// Deserialize `FeeB`:
	err = decoder.Decode(&obj.FeeB)
	if err != nil {
		return err
	}
	// Deserialize `Partner`:
	err = decoder.Decode(&obj.Partner)
	if err != nil {
		return err
	}
	return nil
}

func (*PartnerClaimFeesEventData) isEventData() {}
func (obj *PartnerClaimFeesEventData) Self() any {
	return obj
}

var eventTypes = map[[8]byte]reflect.Type{
	AddLiquidityEventDataDiscriminator:         reflect.TypeOf(AddLiquidityEventData{}),
	BootstrapLiquidityEventDataDiscriminator:   reflect.TypeOf(BootstrapLiquidityEventData{}),
	ClaimFeeEventDataDiscriminator:             reflect.TypeOf(ClaimFeeEventData{}),
	CloseConfigEventDataDiscriminator:          reflect.TypeOf(CloseConfigEventData{}),
	CreateConfigEventDataDiscriminator:         reflect.TypeOf(CreateConfigEventData{}),
	CreateLockEscrowEventDataDiscriminator:     reflect.TypeOf(CreateLockEscrowEventData{}),
	LockEventDataDiscriminator:                 reflect.TypeOf(LockEventData{}),
	MigrateFeeAccountEventDataDiscriminator:    reflect.TypeOf(MigrateFeeAccountEventData{}),
	OverrideCurveParamEventDataDiscriminator:   reflect.TypeOf(OverrideCurveParamEventData{}),
	PartnerClaimFeesEventDataDiscriminator:     reflect.TypeOf(PartnerClaimFeesEventData{}),
	PoolCreatedEventDataDiscriminator:          reflect.TypeOf(PoolCreatedEventData{}),
	PoolEnabledEventDataDiscriminator:          reflect.TypeOf(PoolEnabledEventData{}),
	PoolInfoEventDataDiscriminator:             reflect.TypeOf(PoolInfoEventData{}),
	RemoveLiquidityEventDataDiscriminator:      reflect.TypeOf(RemoveLiquidityEventData{}),
	SetPoolFeesEventDataDiscriminator:          reflect.TypeOf(SetPoolFeesEventData{}),
	SwapEventDataDiscriminator:                 reflect.TypeOf(SwapEventData{}),
	TransferAdminEventDataDiscriminator:        reflect.TypeOf(TransferAdminEventData{}),
	WithdrawProtocolFeesEventDataDiscriminator: reflect.TypeOf(WithdrawProtocolFeesEventData{}),
}
var eventNames = map[[8]byte]string{
	AddLiquidityEventDataDiscriminator:         "AddLiquidity",
	BootstrapLiquidityEventDataDiscriminator:   "BootstrapLiquidity",
	ClaimFeeEventDataDiscriminator:             "ClaimFee",
	CloseConfigEventDataDiscriminator:          "CloseConfig",
	CreateConfigEventDataDiscriminator:         "CreateConfig",
	CreateLockEscrowEventDataDiscriminator:     "CreateLockEscrow",
	LockEventDataDiscriminator:                 "Lock",
	MigrateFeeAccountEventDataDiscriminator:    "MigrateFeeAccount",
	OverrideCurveParamEventDataDiscriminator:   "OverrideCurveParam",
	PartnerClaimFeesEventDataDiscriminator:     "PartnerClaimFees",
	PoolCreatedEventDataDiscriminator:          "PoolCreated",
	PoolEnabledEventDataDiscriminator:          "PoolEnabled",
	PoolInfoEventDataDiscriminator:             "PoolInfo",
	RemoveLiquidityEventDataDiscriminator:      "RemoveLiquidity",
	SetPoolFeesEventDataDiscriminator:          "SetPoolFees",
	SwapEventDataDiscriminator:                 "Swap",
	TransferAdminEventDataDiscriminator:        "TransferAdmin",
	WithdrawProtocolFeesEventDataDiscriminator: "WithdrawProtocolFees",
}
var (
	_ fmt.Formatter = nil
)
var (
	_ *ag_solanago.Transaction = nil
)
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
	Self() any
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			if len(ixData) < 8 {
				continue
			}

			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		if len(eventBinary) < 8 {
			continue
		}
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
