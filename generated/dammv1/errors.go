// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv1

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrMathOverflow = &customErrorDef{
		code: 6000,
		msg:  "Math operation overflow",
		name: "MathOverflow",
	}
	ErrInvalidFee = &customErrorDef{
		code: 6001,
		msg:  "Invalid fee setup",
		name: "InvalidFee",
	}
	ErrInvalidInvariant = &customErrorDef{
		code: 6002,
		msg:  "Invalid invariant d",
		name: "InvalidInvariant",
	}
	ErrFeeCalculationFailure = &customErrorDef{
		code: 6003,
		msg:  "Fee calculation failure",
		name: "FeeCalculationFailure",
	}
	ErrExceededSlippage = &customErrorDef{
		code: 6004,
		msg:  "Exceeded slippage tolerance",
		name: "ExceededSlippage",
	}
	ErrInvalidCalculation = &customErrorDef{
		code: 6005,
		msg:  "Invalid curve calculation",
		name: "InvalidCalculation",
	}
	ErrZeroTradingTokens = &customErrorDef{
		code: 6006,
		msg:  "Given pool token amount results in zero trading tokens",
		name: "ZeroTradingTokens",
	}
	ErrConversionError = &customErrorDef{
		code: 6007,
		msg:  "Math conversion overflow",
		name: "ConversionError",
	}
	ErrFaultyLpMint = &customErrorDef{
		code: 6008,
		msg:  "LP mint authority must be 'A' vault lp, without freeze authority, and 0 supply",
		name: "FaultyLpMint",
	}
	ErrMismatchedTokenMint = &customErrorDef{
		code: 6009,
		msg:  "Token mint mismatched",
		name: "MismatchedTokenMint",
	}
	ErrMismatchedLpMint = &customErrorDef{
		code: 6010,
		msg:  "LP mint mismatched",
		name: "MismatchedLpMint",
	}
	ErrMismatchedOwner = &customErrorDef{
		code: 6011,
		msg:  "Invalid lp token owner",
		name: "MismatchedOwner",
	}
	ErrInvalidVaultAccount = &customErrorDef{
		code: 6012,
		msg:  "Invalid vault account",
		name: "InvalidVaultAccount",
	}
	ErrInvalidVaultLpAccount = &customErrorDef{
		code: 6013,
		msg:  "Invalid vault lp account",
		name: "InvalidVaultLpAccount",
	}
	ErrInvalidPoolLpMintAccount = &customErrorDef{
		code: 6014,
		msg:  "Invalid pool lp mint account",
		name: "InvalidPoolLpMintAccount",
	}
	ErrPoolDisabled = &customErrorDef{
		code: 6015,
		msg:  "Pool disabled",
		name: "PoolDisabled",
	}
	ErrInvalidAdminAccount = &customErrorDef{
		code: 6016,
		msg:  "Invalid admin account",
		name: "InvalidAdminAccount",
	}
	ErrInvalidProtocolFeeAccount = &customErrorDef{
		code: 6017,
		msg:  "Invalid protocol fee account",
		name: "InvalidProtocolFeeAccount",
	}
	ErrSameAdminAccount = &customErrorDef{
		code: 6018,
		msg:  "Same admin account",
		name: "SameAdminAccount",
	}
	ErrIdenticalSourceDestination = &customErrorDef{
		code: 6019,
		msg:  "Identical user source and destination token account",
		name: "IdenticalSourceDestination",
	}
	ErrApyCalculationError = &customErrorDef{
		code: 6020,
		msg:  "Apy calculation error",
		name: "ApyCalculationError",
	}
	ErrInsufficientSnapshot = &customErrorDef{
		code: 6021,
		msg:  "Insufficient virtual price snapshot",
		name: "InsufficientSnapshot",
	}
	ErrNonUpdatableCurve = &customErrorDef{
		code: 6022,
		msg:  "Current curve is non-updatable",
		name: "NonUpdatableCurve",
	}
	ErrMisMatchedCurve = &customErrorDef{
		code: 6023,
		msg:  "New curve is mismatched with old curve",
		name: "MisMatchedCurve",
	}
	ErrInvalidAmplification = &customErrorDef{
		code: 6024,
		msg:  "Amplification is invalid",
		name: "InvalidAmplification",
	}
	ErrUnsupportedOperation = &customErrorDef{
		code: 6025,
		msg:  "Operation is not supported",
		name: "UnsupportedOperation",
	}
	ErrExceedMaxAChanges = &customErrorDef{
		code: 6026,
		msg:  "Exceed max amplification changes",
		name: "ExceedMaxAChanges",
	}
	ErrInvalidRemainingAccountsLen = &customErrorDef{
		code: 6027,
		msg:  "Invalid remaining accounts length",
		name: "InvalidRemainingAccountsLen",
	}
	ErrInvalidRemainingAccounts = &customErrorDef{
		code: 6028,
		msg:  "Invalid remaining account",
		name: "InvalidRemainingAccounts",
	}
	ErrMismatchedDepegMint = &customErrorDef{
		code: 6029,
		msg:  "Token mint B doesn't matches depeg type token mint",
		name: "MismatchedDepegMint",
	}
	ErrInvalidApyAccount = &customErrorDef{
		code: 6030,
		msg:  "Invalid APY account",
		name: "InvalidApyAccount",
	}
	ErrInvalidTokenMultiplier = &customErrorDef{
		code: 6031,
		msg:  "Invalid token multiplier",
		name: "InvalidTokenMultiplier",
	}
	ErrInvalidDepegInformation = &customErrorDef{
		code: 6032,
		msg:  "Invalid depeg information",
		name: "InvalidDepegInformation",
	}
	ErrUpdateTimeConstraint = &customErrorDef{
		code: 6033,
		msg:  "Update time constraint violated",
		name: "UpdateTimeConstraint",
	}
	ErrExceedMaxFeeBps = &customErrorDef{
		code: 6034,
		msg:  "Exceeded max fee bps",
		name: "ExceedMaxFeeBps",
	}
	ErrInvalidAdmin = &customErrorDef{
		code: 6035,
		msg:  "Invalid admin",
		name: "InvalidAdmin",
	}
	ErrPoolIsNotPermissioned = &customErrorDef{
		code: 6036,
		msg:  "Pool is not permissioned",
		name: "PoolIsNotPermissioned",
	}
	ErrInvalidDepositAmount = &customErrorDef{
		code: 6037,
		msg:  "Invalid deposit amount",
		name: "InvalidDepositAmount",
	}
	ErrInvalidFeeOwner = &customErrorDef{
		code: 6038,
		msg:  "Invalid fee owner",
		name: "InvalidFeeOwner",
	}
	ErrNonDepletedPool = &customErrorDef{
		code: 6039,
		msg:  "Pool is not depleted",
		name: "NonDepletedPool",
	}
	ErrAmountNotPeg = &customErrorDef{
		code: 6040,
		msg:  "Token amount is not 1:1",
		name: "AmountNotPeg",
	}
	ErrAmountIsZero = &customErrorDef{
		code: 6041,
		msg:  "Amount is zero",
		name: "AmountIsZero",
	}
	ErrTypeCastFailed = &customErrorDef{
		code: 6042,
		msg:  "Type cast error",
		name: "TypeCastFailed",
	}
	ErrAmountIsNotEnough = &customErrorDef{
		code: 6043,
		msg:  "Amount is not enough",
		name: "AmountIsNotEnough",
	}
	ErrInvalidActivationDuration = &customErrorDef{
		code: 6044,
		msg:  "Invalid activation duration",
		name: "InvalidActivationDuration",
	}
	ErrPoolIsNotLaunchPool = &customErrorDef{
		code: 6045,
		msg:  "Pool is not launch pool",
		name: "PoolIsNotLaunchPool",
	}
	ErrUnableToModifyActivationPoint = &customErrorDef{
		code: 6046,
		msg:  "Unable to modify activation point",
		name: "UnableToModifyActivationPoint",
	}
	ErrInvalidAuthorityToCreateThePool = &customErrorDef{
		code: 6047,
		msg:  "Invalid authority to create the pool",
		name: "InvalidAuthorityToCreateThePool",
	}
	ErrInvalidActivationType = &customErrorDef{
		code: 6048,
		msg:  "Invalid activation type",
		name: "InvalidActivationType",
	}
	ErrInvalidActivationPoint = &customErrorDef{
		code: 6049,
		msg:  "Invalid activation point",
		name: "InvalidActivationPoint",
	}
	ErrPreActivationSwapStarted = &customErrorDef{
		code: 6050,
		msg:  "Pre activation swap window started",
		name: "PreActivationSwapStarted",
	}
	ErrInvalidPoolType = &customErrorDef{
		code: 6051,
		msg:  "Invalid pool type",
		name: "InvalidPoolType",
	}
	ErrInvalidQuoteMint = &customErrorDef{
		code: 6052,
		msg:  "Quote token must be SOL,USDC",
		name: "InvalidQuoteMint",
	}
	Errors = map[int]CustomError{
		6000: ErrMathOverflow,
		6001: ErrInvalidFee,
		6002: ErrInvalidInvariant,
		6003: ErrFeeCalculationFailure,
		6004: ErrExceededSlippage,
		6005: ErrInvalidCalculation,
		6006: ErrZeroTradingTokens,
		6007: ErrConversionError,
		6008: ErrFaultyLpMint,
		6009: ErrMismatchedTokenMint,
		6010: ErrMismatchedLpMint,
		6011: ErrMismatchedOwner,
		6012: ErrInvalidVaultAccount,
		6013: ErrInvalidVaultLpAccount,
		6014: ErrInvalidPoolLpMintAccount,
		6015: ErrPoolDisabled,
		6016: ErrInvalidAdminAccount,
		6017: ErrInvalidProtocolFeeAccount,
		6018: ErrSameAdminAccount,
		6019: ErrIdenticalSourceDestination,
		6020: ErrApyCalculationError,
		6021: ErrInsufficientSnapshot,
		6022: ErrNonUpdatableCurve,
		6023: ErrMisMatchedCurve,
		6024: ErrInvalidAmplification,
		6025: ErrUnsupportedOperation,
		6026: ErrExceedMaxAChanges,
		6027: ErrInvalidRemainingAccountsLen,
		6028: ErrInvalidRemainingAccounts,
		6029: ErrMismatchedDepegMint,
		6030: ErrInvalidApyAccount,
		6031: ErrInvalidTokenMultiplier,
		6032: ErrInvalidDepegInformation,
		6033: ErrUpdateTimeConstraint,
		6034: ErrExceedMaxFeeBps,
		6035: ErrInvalidAdmin,
		6036: ErrPoolIsNotPermissioned,
		6037: ErrInvalidDepositAmount,
		6038: ErrInvalidFeeOwner,
		6039: ErrNonDepletedPool,
		6040: ErrAmountNotPeg,
		6041: ErrAmountIsZero,
		6042: ErrTypeCastFailed,
		6043: ErrAmountIsNotEnough,
		6044: ErrInvalidActivationDuration,
		6045: ErrPoolIsNotLaunchPool,
		6046: ErrUnableToModifyActivationPoint,
		6047: ErrInvalidAuthorityToCreateThePool,
		6048: ErrInvalidActivationType,
		6049: ErrInvalidActivationPoint,
		6050: ErrPreActivationSwapStarted,
		6051: ErrInvalidPoolType,
		6052: ErrInvalidQuoteMint,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
