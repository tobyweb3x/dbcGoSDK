// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddLiquidity is the `add_liquidity` instruction.
type AddLiquidityInstruction struct {
	Params *AddLiquidityParameters

	// [0] = [WRITE] pool
	//
	// [1] = [WRITE] position
	//
	// [2] = [WRITE] token_a_account
	// ··········· The user token a account
	//
	// [3] = [WRITE] token_b_account
	// ··········· The user token b account
	//
	// [4] = [WRITE] token_a_vault
	// ··········· The vault token account for input token
	//
	// [5] = [WRITE] token_b_vault
	// ··········· The vault token account for output token
	//
	// [6] = [] token_a_mint
	// ··········· The mint of token a
	//
	// [7] = [] token_b_mint
	// ··········· The mint of token b
	//
	// [8] = [] position_nft_account
	// ··········· The token account for nft
	//
	// [9] = [SIGNER] owner
	// ··········· owner of position
	//
	// [10] = [] token_a_program
	// ··········· Token a program
	//
	// [11] = [] token_b_program
	// ··········· Token b program
	//
	// [12] = [] event_authority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddLiquidityInstructionBuilder creates a new `AddLiquidityInstruction` instruction builder.
func NewAddLiquidityInstructionBuilder() *AddLiquidityInstruction {
	nd := &AddLiquidityInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetParams sets the "params" parameter.
func (inst *AddLiquidityInstruction) SetParams(params AddLiquidityParameters) *AddLiquidityInstruction {
	inst.Params = &params
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *AddLiquidityInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *AddLiquidityInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccount sets the "position" account.
func (inst *AddLiquidityInstruction) SetPositionAccount(position ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *AddLiquidityInstruction) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAAccountAccount sets the "token_a_account" account.
// The user token a account
func (inst *AddLiquidityInstruction) SetTokenAAccountAccount(tokenAAccount ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAAccount).WRITE()
	return inst
}

// GetTokenAAccountAccount gets the "token_a_account" account.
// The user token a account
func (inst *AddLiquidityInstruction) GetTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBAccountAccount sets the "token_b_account" account.
// The user token b account
func (inst *AddLiquidityInstruction) SetTokenBAccountAccount(tokenBAccount ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBAccount).WRITE()
	return inst
}

// GetTokenBAccountAccount gets the "token_b_account" account.
// The user token b account
func (inst *AddLiquidityInstruction) GetTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
// The vault token account for input token
func (inst *AddLiquidityInstruction) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
// The vault token account for input token
func (inst *AddLiquidityInstruction) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
// The vault token account for output token
func (inst *AddLiquidityInstruction) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
// The vault token account for output token
func (inst *AddLiquidityInstruction) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
// The mint of token a
func (inst *AddLiquidityInstruction) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
// The mint of token a
func (inst *AddLiquidityInstruction) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
// The mint of token b
func (inst *AddLiquidityInstruction) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
// The mint of token b
func (inst *AddLiquidityInstruction) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPositionNftAccountAccount sets the "position_nft_account" account.
// The token account for nft
func (inst *AddLiquidityInstruction) SetPositionNftAccountAccount(positionNftAccount ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(positionNftAccount)
	return inst
}

// GetPositionNftAccountAccount gets the "position_nft_account" account.
// The token account for nft
func (inst *AddLiquidityInstruction) GetPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOwnerAccount sets the "owner" account.
// owner of position
func (inst *AddLiquidityInstruction) SetOwnerAccount(owner ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// owner of position
func (inst *AddLiquidityInstruction) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenAProgramAccount sets the "token_a_program" account.
// Token a program
func (inst *AddLiquidityInstruction) SetTokenAProgramAccount(tokenAProgram ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenAProgram)
	return inst
}

// GetTokenAProgramAccount gets the "token_a_program" account.
// Token a program
func (inst *AddLiquidityInstruction) GetTokenAProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenBProgramAccount sets the "token_b_program" account.
// Token b program
func (inst *AddLiquidityInstruction) SetTokenBProgramAccount(tokenBProgram ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenBProgram)
	return inst
}

// GetTokenBProgramAccount gets the "token_b_program" account.
// Token b program
func (inst *AddLiquidityInstruction) GetTokenBProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *AddLiquidityInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *AddLiquidityInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *AddLiquidityInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *AddLiquidityInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *AddLiquidityInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *AddLiquidityInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *AddLiquidityInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *AddLiquidityInstruction) SetProgramAccount(program ag_solanago.PublicKey) *AddLiquidityInstruction {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *AddLiquidityInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst AddLiquidityInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddLiquidity,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddLiquidityInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddLiquidityInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenAProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenBProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *AddLiquidityInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddLiquidity")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       token_a_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       token_b_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  token_a_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  token_b_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("   token_a_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   token_b_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("  position_nft_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("token_a_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("token_b_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj AddLiquidityInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddLiquidityInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewAddLiquidityInstruction declares a new AddLiquidity instruction with the provided parameters and accounts.
func NewAddLiquidityInstruction(
	// Parameters:
	params AddLiquidityParameters,
	// Accounts:
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *AddLiquidityInstruction {
	return NewAddLiquidityInstructionBuilder().
		SetParams(params).
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
