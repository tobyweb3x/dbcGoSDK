// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeReward is the `initialize_reward` instruction.
type InitializeRewardInstruction struct {
	RewardIndex    *uint8
	RewardDuration *uint64
	Funder         *ag_solanago.PublicKey

	// [0] = [] pool_authority
	//
	// [1] = [WRITE] pool
	//
	// [2] = [WRITE] reward_vault
	//
	// [3] = [] reward_mint
	//
	// [4] = [WRITE, SIGNER] admin
	//
	// [5] = [] token_program
	//
	// [6] = [] system_program
	//
	// [7] = [] event_authority
	//
	// [8] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeRewardInstructionBuilder creates a new `InitializeRewardInstruction` instruction builder.
func NewInitializeRewardInstructionBuilder() *InitializeRewardInstruction {
	nd := &InitializeRewardInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	nd.AccountMetaSlice[6] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetRewardIndex sets the "reward_index" parameter.
func (inst *InitializeRewardInstruction) SetRewardIndex(reward_index uint8) *InitializeRewardInstruction {
	inst.RewardIndex = &reward_index
	return inst
}

// SetRewardDuration sets the "reward_duration" parameter.
func (inst *InitializeRewardInstruction) SetRewardDuration(reward_duration uint64) *InitializeRewardInstruction {
	inst.RewardDuration = &reward_duration
	return inst
}

// SetFunder sets the "funder" parameter.
func (inst *InitializeRewardInstruction) SetFunder(funder ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.Funder = &funder
	return inst
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *InitializeRewardInstruction) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

func (inst *InitializeRewardInstruction) findFindPoolAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool_authority
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPoolAuthorityAddressWithBumpSeed calculates PoolAuthority account address with given seeds and a known bump seed.
func (inst *InitializeRewardInstruction) FindPoolAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPoolAuthorityAddress(bumpSeed)
	return
}

func (inst *InitializeRewardInstruction) MustFindPoolAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPoolAuthorityAddress finds PoolAuthority account address with given seeds.
func (inst *InitializeRewardInstruction) FindPoolAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPoolAuthorityAddress(0)
	return
}

func (inst *InitializeRewardInstruction) MustFindPoolAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *InitializeRewardInstruction) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *InitializeRewardInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *InitializeRewardInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRewardVaultAccount sets the "reward_vault" account.
func (inst *InitializeRewardInstruction) SetRewardVaultAccount(rewardVault ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rewardVault).WRITE()
	return inst
}

func (inst *InitializeRewardInstruction) findFindRewardVaultAddress(pool ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: reward_vault
	seeds = append(seeds, []byte{byte(0x72), byte(0x65), byte(0x77), byte(0x61), byte(0x72), byte(0x64), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: pool
	seeds = append(seeds, pool.Bytes())
	// arg: RewardIndex
	rewardIndexSeed, err := ag_binary.MarshalBorsh(inst.RewardIndex)
	if err != nil {
		return
	}
	seeds = append(seeds, rewardIndexSeed)

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindRewardVaultAddressWithBumpSeed calculates RewardVault account address with given seeds and a known bump seed.
func (inst *InitializeRewardInstruction) FindRewardVaultAddressWithBumpSeed(pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindRewardVaultAddress(pool, bumpSeed)
	return
}

func (inst *InitializeRewardInstruction) MustFindRewardVaultAddressWithBumpSeed(pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardVaultAddress(pool, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindRewardVaultAddress finds RewardVault account address with given seeds.
func (inst *InitializeRewardInstruction) FindRewardVaultAddress(pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindRewardVaultAddress(pool, 0)
	return
}

func (inst *InitializeRewardInstruction) MustFindRewardVaultAddress(pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindRewardVaultAddress(pool, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetRewardVaultAccount gets the "reward_vault" account.
func (inst *InitializeRewardInstruction) GetRewardVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetRewardMintAccount sets the "reward_mint" account.
func (inst *InitializeRewardInstruction) SetRewardMintAccount(rewardMint ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rewardMint)
	return inst
}

// GetRewardMintAccount gets the "reward_mint" account.
func (inst *InitializeRewardInstruction) GetRewardMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAdminAccount sets the "admin" account.
func (inst *InitializeRewardInstruction) SetAdminAccount(admin ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *InitializeRewardInstruction) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *InitializeRewardInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *InitializeRewardInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeRewardInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeRewardInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *InitializeRewardInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *InitializeRewardInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *InitializeRewardInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *InitializeRewardInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *InitializeRewardInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *InitializeRewardInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *InitializeRewardInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializeRewardInstruction) SetProgramAccount(program ag_solanago.PublicKey) *InitializeRewardInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializeRewardInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst InitializeRewardInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeReward,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeRewardInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeRewardInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RewardIndex == nil {
			return errors.New("RewardIndex parameter is not set")
		}
		if inst.RewardDuration == nil {
			return errors.New("RewardDuration parameter is not set")
		}
		if inst.Funder == nil {
			return errors.New("Funder parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RewardVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.RewardMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializeRewardInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeReward")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    RewardIndex", *inst.RewardIndex))
						paramsBranch.Child(ag_format.Param(" RewardDuration", *inst.RewardDuration))
						paramsBranch.Child(ag_format.Param("         Funder", *inst.Funder))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("   reward_vault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    reward_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          admin", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("  token_program", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" system_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj InitializeRewardInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `RewardDuration` param:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeRewardInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeRewardInstruction declares a new InitializeReward instruction with the provided parameters and accounts.
func NewInitializeRewardInstruction(
	// Parameters:
	reward_index uint8,
	reward_duration uint64,
	funder ag_solanago.PublicKey,
	// Accounts:
	poolAuthority ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	rewardVault ag_solanago.PublicKey,
	rewardMint ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *InitializeRewardInstruction {
	return NewInitializeRewardInstructionBuilder().
		SetRewardIndex(reward_index).
		SetRewardDuration(reward_duration).
		SetFunder(funder).
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolAccount(pool).
		SetRewardVaultAccount(rewardVault).
		SetRewardMintAccount(rewardMint).
		SetAdminAccount(admin).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
