// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv2

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrMathOverflow = &customErrorDef{
		code: 6000,
		msg:  "Math operation overflow",
		name: "MathOverflow",
	}
	ErrInvalidFee = &customErrorDef{
		code: 6001,
		msg:  "Invalid fee setup",
		name: "InvalidFee",
	}
	ErrExceededSlippage = &customErrorDef{
		code: 6002,
		msg:  "Exceeded slippage tolerance",
		name: "ExceededSlippage",
	}
	ErrPoolDisabled = &customErrorDef{
		code: 6003,
		msg:  "Pool disabled",
		name: "PoolDisabled",
	}
	ErrExceedMaxFeeBps = &customErrorDef{
		code: 6004,
		msg:  "Exceeded max fee bps",
		name: "ExceedMaxFeeBps",
	}
	ErrInvalidAdmin = &customErrorDef{
		code: 6005,
		msg:  "Invalid admin",
		name: "InvalidAdmin",
	}
	ErrAmountIsZero = &customErrorDef{
		code: 6006,
		msg:  "Amount is zero",
		name: "AmountIsZero",
	}
	ErrTypeCastFailed = &customErrorDef{
		code: 6007,
		msg:  "Type cast error",
		name: "TypeCastFailed",
	}
	ErrUnableToModifyActivationPoint = &customErrorDef{
		code: 6008,
		msg:  "Unable to modify activation point",
		name: "UnableToModifyActivationPoint",
	}
	ErrInvalidAuthorityToCreateThePool = &customErrorDef{
		code: 6009,
		msg:  "Invalid authority to create the pool",
		name: "InvalidAuthorityToCreateThePool",
	}
	ErrInvalidActivationType = &customErrorDef{
		code: 6010,
		msg:  "Invalid activation type",
		name: "InvalidActivationType",
	}
	ErrInvalidActivationPoint = &customErrorDef{
		code: 6011,
		msg:  "Invalid activation point",
		name: "InvalidActivationPoint",
	}
	ErrInvalidQuoteMint = &customErrorDef{
		code: 6012,
		msg:  "Quote token must be SOL,USDC",
		name: "InvalidQuoteMint",
	}
	ErrInvalidFeeCurve = &customErrorDef{
		code: 6013,
		msg:  "Invalid fee curve",
		name: "InvalidFeeCurve",
	}
	ErrInvalidPriceRange = &customErrorDef{
		code: 6014,
		msg:  "Invalid Price Range",
		name: "InvalidPriceRange",
	}
	ErrPriceRangeViolation = &customErrorDef{
		code: 6015,
		msg:  "Trade is over price range",
		name: "PriceRangeViolation",
	}
	ErrInvalidParameters = &customErrorDef{
		code: 6016,
		msg:  "Invalid parameters",
		name: "InvalidParameters",
	}
	ErrInvalidCollectFeeMode = &customErrorDef{
		code: 6017,
		msg:  "Invalid collect fee mode",
		name: "InvalidCollectFeeMode",
	}
	ErrInvalidInput = &customErrorDef{
		code: 6018,
		msg:  "Invalid input",
		name: "InvalidInput",
	}
	ErrCannotCreateTokenBadgeOnSupportedMint = &customErrorDef{
		code: 6019,
		msg:  "Cannot create token badge on supported mint",
		name: "CannotCreateTokenBadgeOnSupportedMint",
	}
	ErrInvalidTokenBadge = &customErrorDef{
		code: 6020,
		msg:  "Invalid token badge",
		name: "InvalidTokenBadge",
	}
	ErrInvalidMinimumLiquidity = &customErrorDef{
		code: 6021,
		msg:  "Invalid minimum liquidity",
		name: "InvalidMinimumLiquidity",
	}
	ErrInvalidVestingInfo = &customErrorDef{
		code: 6022,
		msg:  "Invalid vesting information",
		name: "InvalidVestingInfo",
	}
	ErrInsufficientLiquidity = &customErrorDef{
		code: 6023,
		msg:  "Insufficient liquidity",
		name: "InsufficientLiquidity",
	}
	ErrInvalidVestingAccount = &customErrorDef{
		code: 6024,
		msg:  "Invalid vesting account",
		name: "InvalidVestingAccount",
	}
	ErrInvalidPoolStatus = &customErrorDef{
		code: 6025,
		msg:  "Invalid pool status",
		name: "InvalidPoolStatus",
	}
	ErrUnsupportNativeMintToken2022 = &customErrorDef{
		code: 6026,
		msg:  "Unsupported native mint token2022",
		name: "UnsupportNativeMintToken2022",
	}
	ErrInvalidRewardIndex = &customErrorDef{
		code: 6027,
		msg:  "Invalid reward index",
		name: "InvalidRewardIndex",
	}
	ErrInvalidRewardDuration = &customErrorDef{
		code: 6028,
		msg:  "Invalid reward duration",
		name: "InvalidRewardDuration",
	}
	ErrRewardInitialized = &customErrorDef{
		code: 6029,
		msg:  "Reward already initialized",
		name: "RewardInitialized",
	}
	ErrRewardUninitialized = &customErrorDef{
		code: 6030,
		msg:  "Reward not initialized",
		name: "RewardUninitialized",
	}
	ErrInvalidRewardVault = &customErrorDef{
		code: 6031,
		msg:  "Invalid reward vault",
		name: "InvalidRewardVault",
	}
	ErrMustWithdrawnIneligibleReward = &customErrorDef{
		code: 6032,
		msg:  "Must withdraw ineligible reward",
		name: "MustWithdrawnIneligibleReward",
	}
	ErrIdenticalRewardDuration = &customErrorDef{
		code: 6033,
		msg:  "Reward duration is the same",
		name: "IdenticalRewardDuration",
	}
	ErrRewardCampaignInProgress = &customErrorDef{
		code: 6034,
		msg:  "Reward campaign in progress",
		name: "RewardCampaignInProgress",
	}
	ErrIdenticalFunder = &customErrorDef{
		code: 6035,
		msg:  "Identical funder",
		name: "IdenticalFunder",
	}
	ErrInvalidFunder = &customErrorDef{
		code: 6036,
		msg:  "Invalid funder",
		name: "InvalidFunder",
	}
	ErrRewardNotEnded = &customErrorDef{
		code: 6037,
		msg:  "Reward not ended",
		name: "RewardNotEnded",
	}
	ErrFeeInverseIsIncorrect = &customErrorDef{
		code: 6038,
		msg:  "Fee inverse is incorrect",
		name: "FeeInverseIsIncorrect",
	}
	ErrPositionIsNotEmpty = &customErrorDef{
		code: 6039,
		msg:  "Position is not empty",
		name: "PositionIsNotEmpty",
	}
	ErrInvalidPoolCreatorAuthority = &customErrorDef{
		code: 6040,
		msg:  "Invalid pool creator authority",
		name: "InvalidPoolCreatorAuthority",
	}
	ErrInvalidConfigType = &customErrorDef{
		code: 6041,
		msg:  "Invalid config type",
		name: "InvalidConfigType",
	}
	Errors = map[int]CustomError{
		6000: ErrMathOverflow,
		6001: ErrInvalidFee,
		6002: ErrExceededSlippage,
		6003: ErrPoolDisabled,
		6004: ErrExceedMaxFeeBps,
		6005: ErrInvalidAdmin,
		6006: ErrAmountIsZero,
		6007: ErrTypeCastFailed,
		6008: ErrUnableToModifyActivationPoint,
		6009: ErrInvalidAuthorityToCreateThePool,
		6010: ErrInvalidActivationType,
		6011: ErrInvalidActivationPoint,
		6012: ErrInvalidQuoteMint,
		6013: ErrInvalidFeeCurve,
		6014: ErrInvalidPriceRange,
		6015: ErrPriceRangeViolation,
		6016: ErrInvalidParameters,
		6017: ErrInvalidCollectFeeMode,
		6018: ErrInvalidInput,
		6019: ErrCannotCreateTokenBadgeOnSupportedMint,
		6020: ErrInvalidTokenBadge,
		6021: ErrInvalidMinimumLiquidity,
		6022: ErrInvalidVestingInfo,
		6023: ErrInsufficientLiquidity,
		6024: ErrInvalidVestingAccount,
		6025: ErrInvalidPoolStatus,
		6026: ErrUnsupportNativeMintToken2022,
		6027: ErrInvalidRewardIndex,
		6028: ErrInvalidRewardDuration,
		6029: ErrRewardInitialized,
		6030: ErrRewardUninitialized,
		6031: ErrInvalidRewardVault,
		6032: ErrMustWithdrawnIneligibleReward,
		6033: ErrIdenticalRewardDuration,
		6034: ErrRewardCampaignInProgress,
		6035: ErrIdenticalFunder,
		6036: ErrInvalidFunder,
		6037: ErrRewardNotEnded,
		6038: ErrFeeInverseIsIncorrect,
		6039: ErrPositionIsNotEmpty,
		6040: ErrInvalidPoolCreatorAuthority,
		6041: ErrInvalidConfigType,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
