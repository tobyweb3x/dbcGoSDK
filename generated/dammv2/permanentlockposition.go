// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PermanentLockPosition is the `permanent_lock_position` instruction.
type PermanentLockPositionInstruction struct {
	PermanentLockLiquidity *ag_binary.Uint128

	// [0] = [WRITE] pool
	//
	// [1] = [WRITE] position
	//
	// [2] = [] position_nft_account
	// ··········· The token account for nft
	//
	// [3] = [SIGNER] owner
	// ··········· owner of position
	//
	// [4] = [] event_authority
	//
	// [5] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPermanentLockPositionInstructionBuilder creates a new `PermanentLockPositionInstruction` instruction builder.
func NewPermanentLockPositionInstructionBuilder() *PermanentLockPositionInstruction {
	nd := &PermanentLockPositionInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetPermanentLockLiquidity sets the "permanent_lock_liquidity" parameter.
func (inst *PermanentLockPositionInstruction) SetPermanentLockLiquidity(permanent_lock_liquidity ag_binary.Uint128) *PermanentLockPositionInstruction {
	inst.PermanentLockLiquidity = &permanent_lock_liquidity
	return inst
}

// SetPoolAccount sets the "pool" account.
func (inst *PermanentLockPositionInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *PermanentLockPositionInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *PermanentLockPositionInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionAccount sets the "position" account.
func (inst *PermanentLockPositionInstruction) SetPositionAccount(position ag_solanago.PublicKey) *PermanentLockPositionInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(position).WRITE()
	return inst
}

// GetPositionAccount gets the "position" account.
func (inst *PermanentLockPositionInstruction) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionNftAccountAccount sets the "position_nft_account" account.
// The token account for nft
func (inst *PermanentLockPositionInstruction) SetPositionNftAccountAccount(positionNftAccount ag_solanago.PublicKey) *PermanentLockPositionInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionNftAccount)
	return inst
}

// GetPositionNftAccountAccount gets the "position_nft_account" account.
// The token account for nft
func (inst *PermanentLockPositionInstruction) GetPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerAccount sets the "owner" account.
// owner of position
func (inst *PermanentLockPositionInstruction) SetOwnerAccount(owner ag_solanago.PublicKey) *PermanentLockPositionInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// owner of position
func (inst *PermanentLockPositionInstruction) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *PermanentLockPositionInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *PermanentLockPositionInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *PermanentLockPositionInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *PermanentLockPositionInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *PermanentLockPositionInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *PermanentLockPositionInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *PermanentLockPositionInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *PermanentLockPositionInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramAccount sets the "program" account.
func (inst *PermanentLockPositionInstruction) SetProgramAccount(program ag_solanago.PublicKey) *PermanentLockPositionInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *PermanentLockPositionInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst PermanentLockPositionInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PermanentLockPosition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PermanentLockPositionInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PermanentLockPositionInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PermanentLockLiquidity == nil {
			return errors.New("PermanentLockLiquidity parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *PermanentLockPositionInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PermanentLockPosition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  PermanentLockLiquidity", *inst.PermanentLockLiquidity))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       position", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  position_nft_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj PermanentLockPositionInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PermanentLockLiquidity` param:
	err = encoder.Encode(obj.PermanentLockLiquidity)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PermanentLockPositionInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PermanentLockLiquidity`:
	err = decoder.Decode(&obj.PermanentLockLiquidity)
	if err != nil {
		return err
	}
	return nil
}

// NewPermanentLockPositionInstruction declares a new PermanentLockPosition instruction with the provided parameters and accounts.
func NewPermanentLockPositionInstruction(
	// Parameters:
	permanent_lock_liquidity ag_binary.Uint128,
	// Accounts:
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *PermanentLockPositionInstruction {
	return NewPermanentLockPositionInstructionBuilder().
		SetPermanentLockLiquidity(permanent_lock_liquidity).
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetPositionNftAccountAccount(positionNftAccount).
		SetOwnerAccount(owner).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
