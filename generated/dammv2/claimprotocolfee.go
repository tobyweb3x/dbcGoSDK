// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimProtocolFee is the `claim_protocol_fee` instruction.
type ClaimProtocolFeeInstruction struct {

	// [0] = [] pool_authority
	//
	// [1] = [WRITE] pool
	//
	// [2] = [WRITE] token_a_vault
	// ··········· The vault token account for input token
	//
	// [3] = [WRITE] token_b_vault
	// ··········· The vault token account for output token
	//
	// [4] = [] token_a_mint
	// ··········· The mint of token a
	//
	// [5] = [] token_b_mint
	// ··········· The mint of token b
	//
	// [6] = [WRITE] token_a_account
	// ··········· The treasury token a account
	//
	// [7] = [WRITE] token_b_account
	// ··········· The treasury token b account
	//
	// [8] = [] claim_fee_operator
	// ··········· Claim fee operator
	//
	// [9] = [SIGNER] operator
	// ··········· Operator
	//
	// [10] = [] token_a_program
	// ··········· Token a program
	//
	// [11] = [] token_b_program
	// ··········· Token b program
	//
	// [12] = [] event_authority
	//
	// [13] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimProtocolFeeInstructionBuilder creates a new `ClaimProtocolFeeInstruction` instruction builder.
func NewClaimProtocolFeeInstructionBuilder() *ClaimProtocolFeeInstruction {
	nd := &ClaimProtocolFeeInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *ClaimProtocolFeeInstruction) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

func (inst *ClaimProtocolFeeInstruction) findFindPoolAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool_authority
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPoolAuthorityAddressWithBumpSeed calculates PoolAuthority account address with given seeds and a known bump seed.
func (inst *ClaimProtocolFeeInstruction) FindPoolAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPoolAuthorityAddress(bumpSeed)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindPoolAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPoolAuthorityAddress finds PoolAuthority account address with given seeds.
func (inst *ClaimProtocolFeeInstruction) FindPoolAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPoolAuthorityAddress(0)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindPoolAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *ClaimProtocolFeeInstruction) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *ClaimProtocolFeeInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *ClaimProtocolFeeInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
// The vault token account for input token
func (inst *ClaimProtocolFeeInstruction) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
// The vault token account for input token
func (inst *ClaimProtocolFeeInstruction) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
// The vault token account for output token
func (inst *ClaimProtocolFeeInstruction) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
// The vault token account for output token
func (inst *ClaimProtocolFeeInstruction) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
// The mint of token a
func (inst *ClaimProtocolFeeInstruction) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
// The mint of token a
func (inst *ClaimProtocolFeeInstruction) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
// The mint of token b
func (inst *ClaimProtocolFeeInstruction) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
// The mint of token b
func (inst *ClaimProtocolFeeInstruction) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenAAccountAccount sets the "token_a_account" account.
// The treasury token a account
func (inst *ClaimProtocolFeeInstruction) SetTokenAAccountAccount(tokenAAccount ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenAAccount).WRITE()
	return inst
}

func (inst *ClaimProtocolFeeInstruction) findFindTokenAAccountAddress(tokenAProgram ag_solanago.PublicKey, tokenAMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const (raw): [48 9 89 123 106 114 131 251 50 173 254 250 10 80 160 84 143 100 81 249 134 112 30 213 50 166 239 78 53 175 188 85]
	seeds = append(seeds, []byte{byte(0x30), byte(0x9), byte(0x59), byte(0x7b), byte(0x6a), byte(0x72), byte(0x83), byte(0xfb), byte(0x32), byte(0xad), byte(0xfe), byte(0xfa), byte(0xa), byte(0x50), byte(0xa0), byte(0x54), byte(0x8f), byte(0x64), byte(0x51), byte(0xf9), byte(0x86), byte(0x70), byte(0x1e), byte(0xd5), byte(0x32), byte(0xa6), byte(0xef), byte(0x4e), byte(0x35), byte(0xaf), byte(0xbc), byte(0x55)})
	// path: tokenAProgram
	seeds = append(seeds, tokenAProgram.Bytes())
	// path: tokenAMint
	seeds = append(seeds, tokenAMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindTokenAAccountAddressWithBumpSeed calculates TokenAAccount account address with given seeds and a known bump seed.
func (inst *ClaimProtocolFeeInstruction) FindTokenAAccountAddressWithBumpSeed(tokenAProgram ag_solanago.PublicKey, tokenAMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindTokenAAccountAddress(tokenAProgram, tokenAMint, bumpSeed)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindTokenAAccountAddressWithBumpSeed(tokenAProgram ag_solanago.PublicKey, tokenAMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenAAccountAddress(tokenAProgram, tokenAMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindTokenAAccountAddress finds TokenAAccount account address with given seeds.
func (inst *ClaimProtocolFeeInstruction) FindTokenAAccountAddress(tokenAProgram ag_solanago.PublicKey, tokenAMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindTokenAAccountAddress(tokenAProgram, tokenAMint, 0)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindTokenAAccountAddress(tokenAProgram ag_solanago.PublicKey, tokenAMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenAAccountAddress(tokenAProgram, tokenAMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetTokenAAccountAccount gets the "token_a_account" account.
// The treasury token a account
func (inst *ClaimProtocolFeeInstruction) GetTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBAccountAccount sets the "token_b_account" account.
// The treasury token b account
func (inst *ClaimProtocolFeeInstruction) SetTokenBAccountAccount(tokenBAccount ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBAccount).WRITE()
	return inst
}

func (inst *ClaimProtocolFeeInstruction) findFindTokenBAccountAddress(tokenBProgram ag_solanago.PublicKey, tokenBMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const (raw): [48 9 89 123 106 114 131 251 50 173 254 250 10 80 160 84 143 100 81 249 134 112 30 213 50 166 239 78 53 175 188 85]
	seeds = append(seeds, []byte{byte(0x30), byte(0x9), byte(0x59), byte(0x7b), byte(0x6a), byte(0x72), byte(0x83), byte(0xfb), byte(0x32), byte(0xad), byte(0xfe), byte(0xfa), byte(0xa), byte(0x50), byte(0xa0), byte(0x54), byte(0x8f), byte(0x64), byte(0x51), byte(0xf9), byte(0x86), byte(0x70), byte(0x1e), byte(0xd5), byte(0x32), byte(0xa6), byte(0xef), byte(0x4e), byte(0x35), byte(0xaf), byte(0xbc), byte(0x55)})
	// path: tokenBProgram
	seeds = append(seeds, tokenBProgram.Bytes())
	// path: tokenBMint
	seeds = append(seeds, tokenBMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindTokenBAccountAddressWithBumpSeed calculates TokenBAccount account address with given seeds and a known bump seed.
func (inst *ClaimProtocolFeeInstruction) FindTokenBAccountAddressWithBumpSeed(tokenBProgram ag_solanago.PublicKey, tokenBMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindTokenBAccountAddress(tokenBProgram, tokenBMint, bumpSeed)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindTokenBAccountAddressWithBumpSeed(tokenBProgram ag_solanago.PublicKey, tokenBMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenBAccountAddress(tokenBProgram, tokenBMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindTokenBAccountAddress finds TokenBAccount account address with given seeds.
func (inst *ClaimProtocolFeeInstruction) FindTokenBAccountAddress(tokenBProgram ag_solanago.PublicKey, tokenBMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindTokenBAccountAddress(tokenBProgram, tokenBMint, 0)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindTokenBAccountAddress(tokenBProgram ag_solanago.PublicKey, tokenBMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenBAccountAddress(tokenBProgram, tokenBMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetTokenBAccountAccount gets the "token_b_account" account.
// The treasury token b account
func (inst *ClaimProtocolFeeInstruction) GetTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetClaimFeeOperatorAccount sets the "claim_fee_operator" account.
// Claim fee operator
func (inst *ClaimProtocolFeeInstruction) SetClaimFeeOperatorAccount(claimFeeOperator ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(claimFeeOperator)
	return inst
}

// GetClaimFeeOperatorAccount gets the "claim_fee_operator" account.
// Claim fee operator
func (inst *ClaimProtocolFeeInstruction) GetClaimFeeOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOperatorAccount sets the "operator" account.
// Operator
func (inst *ClaimProtocolFeeInstruction) SetOperatorAccount(operator ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(operator).SIGNER()
	return inst
}

// GetOperatorAccount gets the "operator" account.
// Operator
func (inst *ClaimProtocolFeeInstruction) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenAProgramAccount sets the "token_a_program" account.
// Token a program
func (inst *ClaimProtocolFeeInstruction) SetTokenAProgramAccount(tokenAProgram ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenAProgram)
	return inst
}

// GetTokenAProgramAccount gets the "token_a_program" account.
// Token a program
func (inst *ClaimProtocolFeeInstruction) GetTokenAProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenBProgramAccount sets the "token_b_program" account.
// Token b program
func (inst *ClaimProtocolFeeInstruction) SetTokenBProgramAccount(tokenBProgram ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenBProgram)
	return inst
}

// GetTokenBProgramAccount gets the "token_b_program" account.
// Token b program
func (inst *ClaimProtocolFeeInstruction) GetTokenBProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *ClaimProtocolFeeInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *ClaimProtocolFeeInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *ClaimProtocolFeeInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *ClaimProtocolFeeInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *ClaimProtocolFeeInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *ClaimProtocolFeeInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetProgramAccount sets the "program" account.
func (inst *ClaimProtocolFeeInstruction) SetProgramAccount(program ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ClaimProtocolFeeInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst ClaimProtocolFeeInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimProtocolFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimProtocolFeeInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimProtocolFeeInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenAAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.ClaimFeeOperator is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenAProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenBProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *ClaimProtocolFeeInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimProtocolFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     token_a_vault", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     token_b_vault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      token_a_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("      token_b_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          token_a_", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("          token_b_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("claim_fee_operator", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          operator", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("   token_a_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   token_b_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj ClaimProtocolFeeInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ClaimProtocolFeeInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewClaimProtocolFeeInstruction declares a new ClaimProtocolFee instruction with the provided parameters and accounts.
func NewClaimProtocolFeeInstruction(
	// Accounts:
	poolAuthority ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	claimFeeOperator ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *ClaimProtocolFeeInstruction {
	return NewClaimProtocolFeeInstructionBuilder().
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolAccount(pool).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
