// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeCustomizablePool is the `initialize_customizable_pool` instruction.
type InitializeCustomizablePoolInstruction struct {
	Params *InitializeCustomizablePoolParameters

	// [0] = [] creator
	//
	// [1] = [WRITE, SIGNER] position_nft_mint
	// ··········· position_nft_mint
	//
	// [2] = [WRITE] position_nft_account
	// ··········· position nft account
	//
	// [3] = [WRITE, SIGNER] payer
	// ··········· Address paying to create the pool. Can be anyone
	//
	// [4] = [] pool_authority
	//
	// [5] = [WRITE] pool
	// ··········· Initialize an account to store the pool state
	//
	// [6] = [WRITE] position
	//
	// [7] = [] token_a_mint
	// ··········· Token a mint
	//
	// [8] = [] token_b_mint
	// ··········· Token b mint
	//
	// [9] = [WRITE] token_a_vault
	// ··········· Token a vault for the pool
	//
	// [10] = [WRITE] token_b_vault
	// ··········· Token b vault for the pool
	//
	// [11] = [WRITE] payer_token_a
	// ··········· payer token a account
	//
	// [12] = [WRITE] payer_token_b
	// ··········· creator token b account
	//
	// [13] = [] token_a_program
	// ··········· Program to create mint account and mint tokens
	//
	// [14] = [] token_b_program
	// ··········· Program to create mint account and mint tokens
	//
	// [15] = [] token_2022_program
	// ··········· Program to create NFT mint/token account and transfer for token22 account
	//
	// [16] = [] system_program
	//
	// [17] = [] event_authority
	//
	// [18] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeCustomizablePoolInstructionBuilder creates a new `InitializeCustomizablePoolInstruction` instruction builder.
func NewInitializeCustomizablePoolInstructionBuilder() *InitializeCustomizablePoolInstruction {
	nd := &InitializeCustomizablePoolInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 19),
	}
	nd.AccountMetaSlice[15] = ag_solanago.Meta(Addresses["TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"])
	nd.AccountMetaSlice[16] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetParams sets the "params" parameter.
func (inst *InitializeCustomizablePoolInstruction) SetParams(params InitializeCustomizablePoolParameters) *InitializeCustomizablePoolInstruction {
	inst.Params = &params
	return inst
}

// SetCreatorAccount sets the "creator" account.
func (inst *InitializeCustomizablePoolInstruction) SetCreatorAccount(creator ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(creator)
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *InitializeCustomizablePoolInstruction) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPositionNftMintAccount sets the "position_nft_mint" account.
// position_nft_mint
func (inst *InitializeCustomizablePoolInstruction) SetPositionNftMintAccount(positionNftMint ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(positionNftMint).WRITE().SIGNER()
	return inst
}

// GetPositionNftMintAccount gets the "position_nft_mint" account.
// position_nft_mint
func (inst *InitializeCustomizablePoolInstruction) GetPositionNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPositionNftAccountAccount sets the "position_nft_account" account.
// position nft account
func (inst *InitializeCustomizablePoolInstruction) SetPositionNftAccountAccount(positionNftAccount ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(positionNftAccount).WRITE()
	return inst
}

func (inst *InitializeCustomizablePoolInstruction) findFindPositionNftAccountAddress(positionNftMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: position_nft_account
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x73), byte(0x69), byte(0x74), byte(0x69), byte(0x6f), byte(0x6e), byte(0x5f), byte(0x6e), byte(0x66), byte(0x74), byte(0x5f), byte(0x61), byte(0x63), byte(0x63), byte(0x6f), byte(0x75), byte(0x6e), byte(0x74)})
	// path: positionNftMint
	seeds = append(seeds, positionNftMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPositionNftAccountAddressWithBumpSeed calculates PositionNftAccount account address with given seeds and a known bump seed.
func (inst *InitializeCustomizablePoolInstruction) FindPositionNftAccountAddressWithBumpSeed(positionNftMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPositionNftAccountAddress(positionNftMint, bumpSeed)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindPositionNftAccountAddressWithBumpSeed(positionNftMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPositionNftAccountAddress(positionNftMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPositionNftAccountAddress finds PositionNftAccount account address with given seeds.
func (inst *InitializeCustomizablePoolInstruction) FindPositionNftAccountAddress(positionNftMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPositionNftAccountAddress(positionNftMint, 0)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindPositionNftAccountAddress(positionNftMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPositionNftAccountAddress(positionNftMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPositionNftAccountAccount gets the "position_nft_account" account.
// position nft account
func (inst *InitializeCustomizablePoolInstruction) GetPositionNftAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
// Address paying to create the pool. Can be anyone
func (inst *InitializeCustomizablePoolInstruction) SetPayerAccount(payer ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Address paying to create the pool. Can be anyone
func (inst *InitializeCustomizablePoolInstruction) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *InitializeCustomizablePoolInstruction) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(poolAuthority)
	return inst
}

func (inst *InitializeCustomizablePoolInstruction) findFindPoolAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: pool_authority
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPoolAuthorityAddressWithBumpSeed calculates PoolAuthority account address with given seeds and a known bump seed.
func (inst *InitializeCustomizablePoolInstruction) FindPoolAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPoolAuthorityAddress(bumpSeed)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindPoolAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPoolAuthorityAddress finds PoolAuthority account address with given seeds.
func (inst *InitializeCustomizablePoolInstruction) FindPoolAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPoolAuthorityAddress(0)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindPoolAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPoolAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *InitializeCustomizablePoolInstruction) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolAccount sets the "pool" account.
// Initialize an account to store the pool state
func (inst *InitializeCustomizablePoolInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Initialize an account to store the pool state
func (inst *InitializeCustomizablePoolInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPositionAccount sets the "position" account.
func (inst *InitializeCustomizablePoolInstruction) SetPositionAccount(position ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(position).WRITE()
	return inst
}

func (inst *InitializeCustomizablePoolInstruction) findFindPositionAddress(positionNftMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: position
	seeds = append(seeds, []byte{byte(0x70), byte(0x6f), byte(0x73), byte(0x69), byte(0x74), byte(0x69), byte(0x6f), byte(0x6e)})
	// path: positionNftMint
	seeds = append(seeds, positionNftMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPositionAddressWithBumpSeed calculates Position account address with given seeds and a known bump seed.
func (inst *InitializeCustomizablePoolInstruction) FindPositionAddressWithBumpSeed(positionNftMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPositionAddress(positionNftMint, bumpSeed)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindPositionAddressWithBumpSeed(positionNftMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPositionAddress(positionNftMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPositionAddress finds Position account address with given seeds.
func (inst *InitializeCustomizablePoolInstruction) FindPositionAddress(positionNftMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPositionAddress(positionNftMint, 0)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindPositionAddress(positionNftMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPositionAddress(positionNftMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPositionAccount gets the "position" account.
func (inst *InitializeCustomizablePoolInstruction) GetPositionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenAMintAccount sets the "token_a_mint" account.
// Token a mint
func (inst *InitializeCustomizablePoolInstruction) SetTokenAMintAccount(tokenAMint ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenAMint)
	return inst
}

// GetTokenAMintAccount gets the "token_a_mint" account.
// Token a mint
func (inst *InitializeCustomizablePoolInstruction) GetTokenAMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenBMintAccount sets the "token_b_mint" account.
// Token b mint
func (inst *InitializeCustomizablePoolInstruction) SetTokenBMintAccount(tokenBMint ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenBMint)
	return inst
}

// GetTokenBMintAccount gets the "token_b_mint" account.
// Token b mint
func (inst *InitializeCustomizablePoolInstruction) GetTokenBMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenAVaultAccount sets the "token_a_vault" account.
// Token a vault for the pool
func (inst *InitializeCustomizablePoolInstruction) SetTokenAVaultAccount(tokenAVault ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenAVault).WRITE()
	return inst
}

func (inst *InitializeCustomizablePoolInstruction) findFindTokenAVaultAddress(tokenAMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: token_vault
	seeds = append(seeds, []byte{byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: tokenAMint
	seeds = append(seeds, tokenAMint.Bytes())
	// path: pool
	seeds = append(seeds, pool.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindTokenAVaultAddressWithBumpSeed calculates TokenAVault account address with given seeds and a known bump seed.
func (inst *InitializeCustomizablePoolInstruction) FindTokenAVaultAddressWithBumpSeed(tokenAMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindTokenAVaultAddress(tokenAMint, pool, bumpSeed)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindTokenAVaultAddressWithBumpSeed(tokenAMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenAVaultAddress(tokenAMint, pool, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindTokenAVaultAddress finds TokenAVault account address with given seeds.
func (inst *InitializeCustomizablePoolInstruction) FindTokenAVaultAddress(tokenAMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindTokenAVaultAddress(tokenAMint, pool, 0)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindTokenAVaultAddress(tokenAMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenAVaultAddress(tokenAMint, pool, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetTokenAVaultAccount gets the "token_a_vault" account.
// Token a vault for the pool
func (inst *InitializeCustomizablePoolInstruction) GetTokenAVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenBVaultAccount sets the "token_b_vault" account.
// Token b vault for the pool
func (inst *InitializeCustomizablePoolInstruction) SetTokenBVaultAccount(tokenBVault ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenBVault).WRITE()
	return inst
}

func (inst *InitializeCustomizablePoolInstruction) findFindTokenBVaultAddress(tokenBMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: token_vault
	seeds = append(seeds, []byte{byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: tokenBMint
	seeds = append(seeds, tokenBMint.Bytes())
	// path: pool
	seeds = append(seeds, pool.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindTokenBVaultAddressWithBumpSeed calculates TokenBVault account address with given seeds and a known bump seed.
func (inst *InitializeCustomizablePoolInstruction) FindTokenBVaultAddressWithBumpSeed(tokenBMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindTokenBVaultAddress(tokenBMint, pool, bumpSeed)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindTokenBVaultAddressWithBumpSeed(tokenBMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenBVaultAddress(tokenBMint, pool, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindTokenBVaultAddress finds TokenBVault account address with given seeds.
func (inst *InitializeCustomizablePoolInstruction) FindTokenBVaultAddress(tokenBMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindTokenBVaultAddress(tokenBMint, pool, 0)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindTokenBVaultAddress(tokenBMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenBVaultAddress(tokenBMint, pool, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetTokenBVaultAccount gets the "token_b_vault" account.
// Token b vault for the pool
func (inst *InitializeCustomizablePoolInstruction) GetTokenBVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetPayerTokenAAccount sets the "payer_token_a" account.
// payer token a account
func (inst *InitializeCustomizablePoolInstruction) SetPayerTokenAAccount(payerTokenA ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(payerTokenA).WRITE()
	return inst
}

// GetPayerTokenAAccount gets the "payer_token_a" account.
// payer token a account
func (inst *InitializeCustomizablePoolInstruction) GetPayerTokenAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetPayerTokenBAccount sets the "payer_token_b" account.
// creator token b account
func (inst *InitializeCustomizablePoolInstruction) SetPayerTokenBAccount(payerTokenB ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(payerTokenB).WRITE()
	return inst
}

// GetPayerTokenBAccount gets the "payer_token_b" account.
// creator token b account
func (inst *InitializeCustomizablePoolInstruction) GetPayerTokenBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetTokenAProgramAccount sets the "token_a_program" account.
// Program to create mint account and mint tokens
func (inst *InitializeCustomizablePoolInstruction) SetTokenAProgramAccount(tokenAProgram ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(tokenAProgram)
	return inst
}

// GetTokenAProgramAccount gets the "token_a_program" account.
// Program to create mint account and mint tokens
func (inst *InitializeCustomizablePoolInstruction) GetTokenAProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenBProgramAccount sets the "token_b_program" account.
// Program to create mint account and mint tokens
func (inst *InitializeCustomizablePoolInstruction) SetTokenBProgramAccount(tokenBProgram ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenBProgram)
	return inst
}

// GetTokenBProgramAccount gets the "token_b_program" account.
// Program to create mint account and mint tokens
func (inst *InitializeCustomizablePoolInstruction) GetTokenBProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetToken2022ProgramAccount sets the "token_2022_program" account.
// Program to create NFT mint/token account and transfer for token22 account
func (inst *InitializeCustomizablePoolInstruction) SetToken2022ProgramAccount(token2022Program ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(token2022Program)
	return inst
}

// GetToken2022ProgramAccount gets the "token_2022_program" account.
// Program to create NFT mint/token account and transfer for token22 account
func (inst *InitializeCustomizablePoolInstruction) GetToken2022ProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeCustomizablePoolInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeCustomizablePoolInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *InitializeCustomizablePoolInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *InitializeCustomizablePoolInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *InitializeCustomizablePoolInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *InitializeCustomizablePoolInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *InitializeCustomizablePoolInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *InitializeCustomizablePoolInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializeCustomizablePoolInstruction) SetProgramAccount(program ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	inst.AccountMetaSlice[18] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializeCustomizablePoolInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(18)
}

func (inst InitializeCustomizablePoolInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeCustomizablePool,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeCustomizablePoolInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeCustomizablePoolInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PositionNftMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PositionNftAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Position is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenAMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenBMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenAVault is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenBVault is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.PayerTokenA is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.PayerTokenB is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.TokenAProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenBProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Token2022Program is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[18] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializeCustomizablePoolInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeCustomizablePool")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=19]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           creator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" position_nft_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     position_nft_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    pool_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              pool", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          position", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      token_a_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      token_b_mint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("     token_a_vault", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     token_b_vault", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("     payer_token_a", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("     payer_token_b", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("   token_a_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("   token_b_program", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("token_2022_program", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("    system_program", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(17)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(18)))
					})
				})
		})
}

func (obj InitializeCustomizablePoolInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeCustomizablePoolInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeCustomizablePoolInstruction declares a new InitializeCustomizablePool instruction with the provided parameters and accounts.
func NewInitializeCustomizablePoolInstruction(
	// Parameters:
	params InitializeCustomizablePoolParameters,
	// Accounts:
	creator ag_solanago.PublicKey,
	positionNftMint ag_solanago.PublicKey,
	positionNftAccount ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	position ag_solanago.PublicKey,
	tokenAMint ag_solanago.PublicKey,
	tokenBMint ag_solanago.PublicKey,
	tokenAVault ag_solanago.PublicKey,
	tokenBVault ag_solanago.PublicKey,
	payerTokenA ag_solanago.PublicKey,
	payerTokenB ag_solanago.PublicKey,
	tokenAProgram ag_solanago.PublicKey,
	tokenBProgram ag_solanago.PublicKey,
	token2022Program ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *InitializeCustomizablePoolInstruction {
	return NewInitializeCustomizablePoolInstructionBuilder().
		SetParams(params).
		SetCreatorAccount(creator).
		SetPositionNftMintAccount(positionNftMint).
		SetPositionNftAccountAccount(positionNftAccount).
		SetPayerAccount(payer).
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolAccount(pool).
		SetPositionAccount(position).
		SetTokenAMintAccount(tokenAMint).
		SetTokenBMintAccount(tokenBMint).
		SetTokenAVaultAccount(tokenAVault).
		SetTokenBVaultAccount(tokenBVault).
		SetPayerTokenAAccount(payerTokenA).
		SetPayerTokenBAccount(payerTokenB).
		SetTokenAProgramAccount(tokenAProgram).
		SetTokenBProgramAccount(tokenBProgram).
		SetToken2022ProgramAccount(token2022Program).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
