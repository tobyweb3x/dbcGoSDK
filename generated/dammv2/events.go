// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dammv2

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type EvtAddLiquidityEventData struct {
	Pool         ag_solanago.PublicKey
	Position     ag_solanago.PublicKey
	Owner        ag_solanago.PublicKey
	Params       AddLiquidityParameters
	TokenAAmount uint64
	TokenBAmount uint64
	TotalAmountA uint64
	TotalAmountB uint64
}

var EvtAddLiquidityEventDataDiscriminator = [8]byte{175, 242, 8, 157, 30, 247, 185, 169}

func (obj EvtAddLiquidityEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtAddLiquidityEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountA` param:
	err = encoder.Encode(obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountB` param:
	err = encoder.Encode(obj.TotalAmountB)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtAddLiquidityEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtAddLiquidityEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[175 242 8 157 30 247 185 169]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountA`:
	err = decoder.Decode(&obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountB`:
	err = decoder.Decode(&obj.TotalAmountB)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtAddLiquidityEventData) isEventData() {}
func (obj *EvtAddLiquidityEventData) Self() any {
	return obj
}

type EvtClaimPartnerFeeEventData struct {
	Pool         ag_solanago.PublicKey
	TokenAAmount uint64
	TokenBAmount uint64
}

var EvtClaimPartnerFeeEventDataDiscriminator = [8]byte{118, 99, 77, 10, 226, 1, 1, 87}

func (obj EvtClaimPartnerFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClaimPartnerFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimPartnerFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClaimPartnerFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[118 99 77 10 226 1 1 87]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClaimPartnerFeeEventData) isEventData() {}
func (obj *EvtClaimPartnerFeeEventData) Self() any {
	return obj
}

type EvtClaimPositionFeeEventData struct {
	Pool        ag_solanago.PublicKey
	Position    ag_solanago.PublicKey
	Owner       ag_solanago.PublicKey
	FeeAClaimed uint64
	FeeBClaimed uint64
}

var EvtClaimPositionFeeEventDataDiscriminator = [8]byte{198, 182, 183, 52, 97, 12, 49, 56}

func (obj EvtClaimPositionFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClaimPositionFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `FeeAClaimed` param:
	err = encoder.Encode(obj.FeeAClaimed)
	if err != nil {
		return err
	}
	// Serialize `FeeBClaimed` param:
	err = encoder.Encode(obj.FeeBClaimed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimPositionFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClaimPositionFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[198 182 183 52 97 12 49 56]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `FeeAClaimed`:
	err = decoder.Decode(&obj.FeeAClaimed)
	if err != nil {
		return err
	}
	// Deserialize `FeeBClaimed`:
	err = decoder.Decode(&obj.FeeBClaimed)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClaimPositionFeeEventData) isEventData() {}
func (obj *EvtClaimPositionFeeEventData) Self() any {
	return obj
}

type EvtClaimProtocolFeeEventData struct {
	Pool         ag_solanago.PublicKey
	TokenAAmount uint64
	TokenBAmount uint64
}

var EvtClaimProtocolFeeEventDataDiscriminator = [8]byte{186, 244, 75, 251, 188, 13, 25, 33}

func (obj EvtClaimProtocolFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClaimProtocolFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimProtocolFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClaimProtocolFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[186 244 75 251 188 13 25 33]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClaimProtocolFeeEventData) isEventData() {}
func (obj *EvtClaimProtocolFeeEventData) Self() any {
	return obj
}

type EvtClaimRewardEventData struct {
	Pool        ag_solanago.PublicKey
	Position    ag_solanago.PublicKey
	Owner       ag_solanago.PublicKey
	MintReward  ag_solanago.PublicKey
	RewardIndex uint8
	TotalReward uint64
}

var EvtClaimRewardEventDataDiscriminator = [8]byte{218, 86, 147, 200, 235, 188, 215, 231}

func (obj EvtClaimRewardEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClaimRewardEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `MintReward` param:
	err = encoder.Encode(obj.MintReward)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `TotalReward` param:
	err = encoder.Encode(obj.TotalReward)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimRewardEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClaimRewardEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[218 86 147 200 235 188 215 231]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `MintReward`:
	err = decoder.Decode(&obj.MintReward)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `TotalReward`:
	err = decoder.Decode(&obj.TotalReward)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClaimRewardEventData) isEventData() {}
func (obj *EvtClaimRewardEventData) Self() any {
	return obj
}

type EvtCloseClaimFeeOperatorEventData struct {
	ClaimFeeOperator ag_solanago.PublicKey
	Operator         ag_solanago.PublicKey
}

var EvtCloseClaimFeeOperatorEventDataDiscriminator = [8]byte{111, 39, 37, 55, 110, 216, 194, 23}

func (obj EvtCloseClaimFeeOperatorEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCloseClaimFeeOperatorEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ClaimFeeOperator` param:
	err = encoder.Encode(obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCloseClaimFeeOperatorEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCloseClaimFeeOperatorEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[111 39 37 55 110 216 194 23]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ClaimFeeOperator`:
	err = decoder.Decode(&obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCloseClaimFeeOperatorEventData) isEventData() {}
func (obj *EvtCloseClaimFeeOperatorEventData) Self() any {
	return obj
}

type EvtCloseConfigEventData struct {
	// Config pubkey
	Config ag_solanago.PublicKey

	// admin pk
	Admin ag_solanago.PublicKey
}

var EvtCloseConfigEventDataDiscriminator = [8]byte{36, 30, 239, 45, 58, 132, 14, 5}

func (obj EvtCloseConfigEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCloseConfigEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCloseConfigEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCloseConfigEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[36 30 239 45 58 132 14 5]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCloseConfigEventData) isEventData() {}
func (obj *EvtCloseConfigEventData) Self() any {
	return obj
}

type EvtClosePositionEventData struct {
	Pool            ag_solanago.PublicKey
	Owner           ag_solanago.PublicKey
	Position        ag_solanago.PublicKey
	PositionNftMint ag_solanago.PublicKey
}

var EvtClosePositionEventDataDiscriminator = [8]byte{20, 145, 144, 68, 143, 142, 214, 178}

func (obj EvtClosePositionEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClosePositionEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `PositionNftMint` param:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClosePositionEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClosePositionEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[20 145 144 68 143 142 214 178]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClosePositionEventData) isEventData() {}
func (obj *EvtClosePositionEventData) Self() any {
	return obj
}

type EvtCreateClaimFeeOperatorEventData struct {
	Operator ag_solanago.PublicKey
}

var EvtCreateClaimFeeOperatorEventDataDiscriminator = [8]byte{21, 6, 153, 120, 68, 116, 28, 177}

func (obj EvtCreateClaimFeeOperatorEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateClaimFeeOperatorEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateClaimFeeOperatorEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateClaimFeeOperatorEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[21 6 153 120 68 116 28 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateClaimFeeOperatorEventData) isEventData() {}
func (obj *EvtCreateClaimFeeOperatorEventData) Self() any {
	return obj
}

type EvtCreateConfigEventData struct {
	PoolFees             PoolFeeParameters
	VaultConfigKey       ag_solanago.PublicKey
	PoolCreatorAuthority ag_solanago.PublicKey
	ActivationType       uint8
	SqrtMinPrice         ag_binary.Uint128
	SqrtMaxPrice         ag_binary.Uint128
	CollectFeeMode       uint8
	Index                uint64
	Config               ag_solanago.PublicKey
}

var EvtCreateConfigEventDataDiscriminator = [8]byte{131, 207, 180, 174, 180, 73, 165, 54}

func (obj EvtCreateConfigEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateConfigEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `VaultConfigKey` param:
	err = encoder.Encode(obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateConfigEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateConfigEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[131 207 180 174 180 73 165 54]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `VaultConfigKey`:
	err = decoder.Decode(&obj.VaultConfigKey)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateConfigEventData) isEventData() {}
func (obj *EvtCreateConfigEventData) Self() any {
	return obj
}

type EvtCreateDynamicConfigEventData struct {
	Config               ag_solanago.PublicKey
	PoolCreatorAuthority ag_solanago.PublicKey
	Index                uint64
}

var EvtCreateDynamicConfigEventDataDiscriminator = [8]byte{231, 197, 13, 164, 248, 213, 133, 152}

func (obj EvtCreateDynamicConfigEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateDynamicConfigEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `PoolCreatorAuthority` param:
	err = encoder.Encode(obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateDynamicConfigEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateDynamicConfigEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[231 197 13 164 248 213 133 152]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `PoolCreatorAuthority`:
	err = decoder.Decode(&obj.PoolCreatorAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateDynamicConfigEventData) isEventData() {}
func (obj *EvtCreateDynamicConfigEventData) Self() any {
	return obj
}

type EvtCreatePositionEventData struct {
	Pool            ag_solanago.PublicKey
	Owner           ag_solanago.PublicKey
	Position        ag_solanago.PublicKey
	PositionNftMint ag_solanago.PublicKey
}

var EvtCreatePositionEventDataDiscriminator = [8]byte{156, 15, 119, 198, 29, 181, 221, 55}

func (obj EvtCreatePositionEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreatePositionEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `PositionNftMint` param:
	err = encoder.Encode(obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreatePositionEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreatePositionEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[156 15 119 198 29 181 221 55]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `PositionNftMint`:
	err = decoder.Decode(&obj.PositionNftMint)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreatePositionEventData) isEventData() {}
func (obj *EvtCreatePositionEventData) Self() any {
	return obj
}

type EvtCreateTokenBadgeEventData struct {
	TokenMint ag_solanago.PublicKey
}

var EvtCreateTokenBadgeEventDataDiscriminator = [8]byte{141, 120, 134, 116, 34, 28, 114, 160}

func (obj EvtCreateTokenBadgeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateTokenBadgeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TokenMint` param:
	err = encoder.Encode(obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateTokenBadgeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateTokenBadgeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[141 120 134 116 34 28 114 160]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TokenMint`:
	err = decoder.Decode(&obj.TokenMint)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateTokenBadgeEventData) isEventData() {}
func (obj *EvtCreateTokenBadgeEventData) Self() any {
	return obj
}

type EvtFundRewardEventData struct {
	Pool                        ag_solanago.PublicKey
	Funder                      ag_solanago.PublicKey
	MintReward                  ag_solanago.PublicKey
	RewardIndex                 uint8
	Amount                      uint64
	TransferFeeExcludedAmountIn uint64
}

var EvtFundRewardEventDataDiscriminator = [8]byte{104, 233, 237, 122, 199, 191, 121, 85}

func (obj EvtFundRewardEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtFundRewardEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	// Serialize `MintReward` param:
	err = encoder.Encode(obj.MintReward)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `TransferFeeExcludedAmountIn` param:
	err = encoder.Encode(obj.TransferFeeExcludedAmountIn)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtFundRewardEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtFundRewardEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[104 233 237 122 199 191 121 85]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	// Deserialize `MintReward`:
	err = decoder.Decode(&obj.MintReward)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `TransferFeeExcludedAmountIn`:
	err = decoder.Decode(&obj.TransferFeeExcludedAmountIn)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtFundRewardEventData) isEventData() {}
func (obj *EvtFundRewardEventData) Self() any {
	return obj
}

type EvtInitializePoolEventData struct {
	Pool            ag_solanago.PublicKey
	TokenAMint      ag_solanago.PublicKey
	TokenBMint      ag_solanago.PublicKey
	Creator         ag_solanago.PublicKey
	Payer           ag_solanago.PublicKey
	AlphaVault      ag_solanago.PublicKey
	PoolFees        PoolFeeParameters
	SqrtMinPrice    ag_binary.Uint128
	SqrtMaxPrice    ag_binary.Uint128
	ActivationType  uint8
	CollectFeeMode  uint8
	Liquidity       ag_binary.Uint128
	SqrtPrice       ag_binary.Uint128
	ActivationPoint uint64
	TokenAFlag      uint8
	TokenBFlag      uint8
	TokenAAmount    uint64
	TokenBAmount    uint64
	TotalAmountA    uint64
	TotalAmountB    uint64
	PoolType        uint8
}

var EvtInitializePoolEventDataDiscriminator = [8]byte{228, 50, 246, 85, 203, 66, 134, 37}

func (obj EvtInitializePoolEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtInitializePoolEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenAMint` param:
	err = encoder.Encode(obj.TokenAMint)
	if err != nil {
		return err
	}
	// Serialize `TokenBMint` param:
	err = encoder.Encode(obj.TokenBMint)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Payer` param:
	err = encoder.Encode(obj.Payer)
	if err != nil {
		return err
	}
	// Serialize `AlphaVault` param:
	err = encoder.Encode(obj.AlphaVault)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `SqrtMinPrice` param:
	err = encoder.Encode(obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Serialize `SqrtMaxPrice` param:
	err = encoder.Encode(obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `Liquidity` param:
	err = encoder.Encode(obj.Liquidity)
	if err != nil {
		return err
	}
	// Serialize `SqrtPrice` param:
	err = encoder.Encode(obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Serialize `TokenAFlag` param:
	err = encoder.Encode(obj.TokenAFlag)
	if err != nil {
		return err
	}
	// Serialize `TokenBFlag` param:
	err = encoder.Encode(obj.TokenBFlag)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountA` param:
	err = encoder.Encode(obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountB` param:
	err = encoder.Encode(obj.TotalAmountB)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtInitializePoolEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtInitializePoolEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[228 50 246 85 203 66 134 37]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenAMint`:
	err = decoder.Decode(&obj.TokenAMint)
	if err != nil {
		return err
	}
	// Deserialize `TokenBMint`:
	err = decoder.Decode(&obj.TokenBMint)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Payer`:
	err = decoder.Decode(&obj.Payer)
	if err != nil {
		return err
	}
	// Deserialize `AlphaVault`:
	err = decoder.Decode(&obj.AlphaVault)
	if err != nil {
		return err
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMinPrice`:
	err = decoder.Decode(&obj.SqrtMinPrice)
	if err != nil {
		return err
	}
	// Deserialize `SqrtMaxPrice`:
	err = decoder.Decode(&obj.SqrtMaxPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `Liquidity`:
	err = decoder.Decode(&obj.Liquidity)
	if err != nil {
		return err
	}
	// Deserialize `SqrtPrice`:
	err = decoder.Decode(&obj.SqrtPrice)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	// Deserialize `TokenAFlag`:
	err = decoder.Decode(&obj.TokenAFlag)
	if err != nil {
		return err
	}
	// Deserialize `TokenBFlag`:
	err = decoder.Decode(&obj.TokenBFlag)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountA`:
	err = decoder.Decode(&obj.TotalAmountA)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountB`:
	err = decoder.Decode(&obj.TotalAmountB)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtInitializePoolEventData) isEventData() {}
func (obj *EvtInitializePoolEventData) Self() any {
	return obj
}

type EvtInitializeRewardEventData struct {
	Pool           ag_solanago.PublicKey
	RewardMint     ag_solanago.PublicKey
	Funder         ag_solanago.PublicKey
	RewardIndex    uint8
	RewardDuration uint64
}

var EvtInitializeRewardEventDataDiscriminator = [8]byte{129, 91, 188, 3, 246, 52, 185, 249}

func (obj EvtInitializeRewardEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtInitializeRewardEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardMint` param:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return err
	}
	// Serialize `Funder` param:
	err = encoder.Encode(obj.Funder)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `RewardDuration` param:
	err = encoder.Encode(obj.RewardDuration)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtInitializeRewardEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtInitializeRewardEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[129 91 188 3 246 52 185 249]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return err
	}
	// Deserialize `Funder`:
	err = decoder.Decode(&obj.Funder)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `RewardDuration`:
	err = decoder.Decode(&obj.RewardDuration)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtInitializeRewardEventData) isEventData() {}
func (obj *EvtInitializeRewardEventData) Self() any {
	return obj
}

type EvtLockPositionEventData struct {
	Pool                 ag_solanago.PublicKey
	Position             ag_solanago.PublicKey
	Owner                ag_solanago.PublicKey
	Vesting              ag_solanago.PublicKey
	CliffPoint           uint64
	PeriodFrequency      uint64
	CliffUnlockLiquidity ag_binary.Uint128
	LiquidityPerPeriod   ag_binary.Uint128
	NumberOfPeriod       uint16
}

var EvtLockPositionEventDataDiscriminator = [8]byte{168, 63, 108, 83, 219, 82, 2, 200}

func (obj EvtLockPositionEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtLockPositionEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Vesting` param:
	err = encoder.Encode(obj.Vesting)
	if err != nil {
		return err
	}
	// Serialize `CliffPoint` param:
	err = encoder.Encode(obj.CliffPoint)
	if err != nil {
		return err
	}
	// Serialize `PeriodFrequency` param:
	err = encoder.Encode(obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Serialize `CliffUnlockLiquidity` param:
	err = encoder.Encode(obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Serialize `LiquidityPerPeriod` param:
	err = encoder.Encode(obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Serialize `NumberOfPeriod` param:
	err = encoder.Encode(obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtLockPositionEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtLockPositionEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[168 63 108 83 219 82 2 200]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Vesting`:
	err = decoder.Decode(&obj.Vesting)
	if err != nil {
		return err
	}
	// Deserialize `CliffPoint`:
	err = decoder.Decode(&obj.CliffPoint)
	if err != nil {
		return err
	}
	// Deserialize `PeriodFrequency`:
	err = decoder.Decode(&obj.PeriodFrequency)
	if err != nil {
		return err
	}
	// Deserialize `CliffUnlockLiquidity`:
	err = decoder.Decode(&obj.CliffUnlockLiquidity)
	if err != nil {
		return err
	}
	// Deserialize `LiquidityPerPeriod`:
	err = decoder.Decode(&obj.LiquidityPerPeriod)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfPeriod`:
	err = decoder.Decode(&obj.NumberOfPeriod)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtLockPositionEventData) isEventData() {}
func (obj *EvtLockPositionEventData) Self() any {
	return obj
}

type EvtPermanentLockPositionEventData struct {
	Pool                          ag_solanago.PublicKey
	Position                      ag_solanago.PublicKey
	LockLiquidityAmount           ag_binary.Uint128
	TotalPermanentLockedLiquidity ag_binary.Uint128
}

var EvtPermanentLockPositionEventDataDiscriminator = [8]byte{145, 143, 162, 218, 218, 80, 67, 11}

func (obj EvtPermanentLockPositionEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtPermanentLockPositionEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `LockLiquidityAmount` param:
	err = encoder.Encode(obj.LockLiquidityAmount)
	if err != nil {
		return err
	}
	// Serialize `TotalPermanentLockedLiquidity` param:
	err = encoder.Encode(obj.TotalPermanentLockedLiquidity)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPermanentLockPositionEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtPermanentLockPositionEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[145 143 162 218 218 80 67 11]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `LockLiquidityAmount`:
	err = decoder.Decode(&obj.LockLiquidityAmount)
	if err != nil {
		return err
	}
	// Deserialize `TotalPermanentLockedLiquidity`:
	err = decoder.Decode(&obj.TotalPermanentLockedLiquidity)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtPermanentLockPositionEventData) isEventData() {}
func (obj *EvtPermanentLockPositionEventData) Self() any {
	return obj
}

type EvtRemoveLiquidityEventData struct {
	Pool         ag_solanago.PublicKey
	Position     ag_solanago.PublicKey
	Owner        ag_solanago.PublicKey
	Params       RemoveLiquidityParameters
	TokenAAmount uint64
	TokenBAmount uint64
}

var EvtRemoveLiquidityEventDataDiscriminator = [8]byte{87, 46, 88, 98, 175, 96, 34, 91}

func (obj EvtRemoveLiquidityEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtRemoveLiquidityEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `TokenAAmount` param:
	err = encoder.Encode(obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenBAmount` param:
	err = encoder.Encode(obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtRemoveLiquidityEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtRemoveLiquidityEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[87 46 88 98 175 96 34 91]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `TokenAAmount`:
	err = decoder.Decode(&obj.TokenAAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenBAmount`:
	err = decoder.Decode(&obj.TokenBAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtRemoveLiquidityEventData) isEventData() {}
func (obj *EvtRemoveLiquidityEventData) Self() any {
	return obj
}

type EvtSetPoolStatusEventData struct {
	Pool   ag_solanago.PublicKey
	Status uint8
}

var EvtSetPoolStatusEventDataDiscriminator = [8]byte{100, 213, 74, 3, 95, 91, 228, 146}

func (obj EvtSetPoolStatusEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtSetPoolStatusEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtSetPoolStatusEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtSetPoolStatusEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[100 213 74 3 95 91 228 146]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtSetPoolStatusEventData) isEventData() {}
func (obj *EvtSetPoolStatusEventData) Self() any {
	return obj
}

type EvtSwapEventData struct {
	Pool             ag_solanago.PublicKey
	TradeDirection   uint8
	HasReferral      bool
	Params           SwapParameters
	SwapResult       SwapResult
	ActualAmountIn   uint64
	CurrentTimestamp uint64
}

var EvtSwapEventDataDiscriminator = [8]byte{27, 60, 21, 213, 138, 170, 187, 147}

func (obj EvtSwapEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtSwapEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TradeDirection` param:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return err
	}
	// Serialize `HasReferral` param:
	err = encoder.Encode(obj.HasReferral)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `SwapResult` param:
	err = encoder.Encode(obj.SwapResult)
	if err != nil {
		return err
	}
	// Serialize `ActualAmountIn` param:
	err = encoder.Encode(obj.ActualAmountIn)
	if err != nil {
		return err
	}
	// Serialize `CurrentTimestamp` param:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtSwapEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtSwapEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[27 60 21 213 138 170 187 147]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return err
	}
	// Deserialize `HasReferral`:
	err = decoder.Decode(&obj.HasReferral)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `SwapResult`:
	err = decoder.Decode(&obj.SwapResult)
	if err != nil {
		return err
	}
	// Deserialize `ActualAmountIn`:
	err = decoder.Decode(&obj.ActualAmountIn)
	if err != nil {
		return err
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtSwapEventData) isEventData() {}
func (obj *EvtSwapEventData) Self() any {
	return obj
}

type EvtUpdateRewardDurationEventData struct {
	Pool              ag_solanago.PublicKey
	RewardIndex       uint8
	OldRewardDuration uint64
	NewRewardDuration uint64
}

var EvtUpdateRewardDurationEventDataDiscriminator = [8]byte{149, 135, 65, 231, 129, 153, 65, 57}

func (obj EvtUpdateRewardDurationEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtUpdateRewardDurationEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `OldRewardDuration` param:
	err = encoder.Encode(obj.OldRewardDuration)
	if err != nil {
		return err
	}
	// Serialize `NewRewardDuration` param:
	err = encoder.Encode(obj.NewRewardDuration)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtUpdateRewardDurationEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtUpdateRewardDurationEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[149 135 65 231 129 153 65 57]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `OldRewardDuration`:
	err = decoder.Decode(&obj.OldRewardDuration)
	if err != nil {
		return err
	}
	// Deserialize `NewRewardDuration`:
	err = decoder.Decode(&obj.NewRewardDuration)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtUpdateRewardDurationEventData) isEventData() {}
func (obj *EvtUpdateRewardDurationEventData) Self() any {
	return obj
}

type EvtUpdateRewardFunderEventData struct {
	Pool        ag_solanago.PublicKey
	RewardIndex uint8
	OldFunder   ag_solanago.PublicKey
	NewFunder   ag_solanago.PublicKey
}

var EvtUpdateRewardFunderEventDataDiscriminator = [8]byte{76, 154, 208, 13, 40, 115, 246, 146}

func (obj EvtUpdateRewardFunderEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtUpdateRewardFunderEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardIndex` param:
	err = encoder.Encode(obj.RewardIndex)
	if err != nil {
		return err
	}
	// Serialize `OldFunder` param:
	err = encoder.Encode(obj.OldFunder)
	if err != nil {
		return err
	}
	// Serialize `NewFunder` param:
	err = encoder.Encode(obj.NewFunder)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtUpdateRewardFunderEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtUpdateRewardFunderEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[76 154 208 13 40 115 246 146]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardIndex`:
	err = decoder.Decode(&obj.RewardIndex)
	if err != nil {
		return err
	}
	// Deserialize `OldFunder`:
	err = decoder.Decode(&obj.OldFunder)
	if err != nil {
		return err
	}
	// Deserialize `NewFunder`:
	err = decoder.Decode(&obj.NewFunder)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtUpdateRewardFunderEventData) isEventData() {}
func (obj *EvtUpdateRewardFunderEventData) Self() any {
	return obj
}

type EvtWithdrawIneligibleRewardEventData struct {
	Pool       ag_solanago.PublicKey
	RewardMint ag_solanago.PublicKey
	Amount     uint64
}

var EvtWithdrawIneligibleRewardEventDataDiscriminator = [8]byte{248, 215, 184, 78, 31, 180, 179, 168}

func (obj EvtWithdrawIneligibleRewardEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtWithdrawIneligibleRewardEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `RewardMint` param:
	err = encoder.Encode(obj.RewardMint)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtWithdrawIneligibleRewardEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtWithdrawIneligibleRewardEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[248 215 184 78 31 180 179 168]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `RewardMint`:
	err = decoder.Decode(&obj.RewardMint)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtWithdrawIneligibleRewardEventData) isEventData() {}
func (obj *EvtWithdrawIneligibleRewardEventData) Self() any {
	return obj
}

var eventTypes = map[[8]byte]reflect.Type{
	EvtAddLiquidityEventDataDiscriminator:             reflect.TypeOf(EvtAddLiquidityEventData{}),
	EvtClaimPartnerFeeEventDataDiscriminator:          reflect.TypeOf(EvtClaimPartnerFeeEventData{}),
	EvtClaimPositionFeeEventDataDiscriminator:         reflect.TypeOf(EvtClaimPositionFeeEventData{}),
	EvtClaimProtocolFeeEventDataDiscriminator:         reflect.TypeOf(EvtClaimProtocolFeeEventData{}),
	EvtClaimRewardEventDataDiscriminator:              reflect.TypeOf(EvtClaimRewardEventData{}),
	EvtCloseClaimFeeOperatorEventDataDiscriminator:    reflect.TypeOf(EvtCloseClaimFeeOperatorEventData{}),
	EvtCloseConfigEventDataDiscriminator:              reflect.TypeOf(EvtCloseConfigEventData{}),
	EvtClosePositionEventDataDiscriminator:            reflect.TypeOf(EvtClosePositionEventData{}),
	EvtCreateClaimFeeOperatorEventDataDiscriminator:   reflect.TypeOf(EvtCreateClaimFeeOperatorEventData{}),
	EvtCreateConfigEventDataDiscriminator:             reflect.TypeOf(EvtCreateConfigEventData{}),
	EvtCreateDynamicConfigEventDataDiscriminator:      reflect.TypeOf(EvtCreateDynamicConfigEventData{}),
	EvtCreatePositionEventDataDiscriminator:           reflect.TypeOf(EvtCreatePositionEventData{}),
	EvtCreateTokenBadgeEventDataDiscriminator:         reflect.TypeOf(EvtCreateTokenBadgeEventData{}),
	EvtFundRewardEventDataDiscriminator:               reflect.TypeOf(EvtFundRewardEventData{}),
	EvtInitializePoolEventDataDiscriminator:           reflect.TypeOf(EvtInitializePoolEventData{}),
	EvtInitializeRewardEventDataDiscriminator:         reflect.TypeOf(EvtInitializeRewardEventData{}),
	EvtLockPositionEventDataDiscriminator:             reflect.TypeOf(EvtLockPositionEventData{}),
	EvtPermanentLockPositionEventDataDiscriminator:    reflect.TypeOf(EvtPermanentLockPositionEventData{}),
	EvtRemoveLiquidityEventDataDiscriminator:          reflect.TypeOf(EvtRemoveLiquidityEventData{}),
	EvtSetPoolStatusEventDataDiscriminator:            reflect.TypeOf(EvtSetPoolStatusEventData{}),
	EvtSwapEventDataDiscriminator:                     reflect.TypeOf(EvtSwapEventData{}),
	EvtUpdateRewardDurationEventDataDiscriminator:     reflect.TypeOf(EvtUpdateRewardDurationEventData{}),
	EvtUpdateRewardFunderEventDataDiscriminator:       reflect.TypeOf(EvtUpdateRewardFunderEventData{}),
	EvtWithdrawIneligibleRewardEventDataDiscriminator: reflect.TypeOf(EvtWithdrawIneligibleRewardEventData{}),
}
var eventNames = map[[8]byte]string{
	EvtAddLiquidityEventDataDiscriminator:             "EvtAddLiquidity",
	EvtClaimPartnerFeeEventDataDiscriminator:          "EvtClaimPartnerFee",
	EvtClaimPositionFeeEventDataDiscriminator:         "EvtClaimPositionFee",
	EvtClaimProtocolFeeEventDataDiscriminator:         "EvtClaimProtocolFee",
	EvtClaimRewardEventDataDiscriminator:              "EvtClaimReward",
	EvtCloseClaimFeeOperatorEventDataDiscriminator:    "EvtCloseClaimFeeOperator",
	EvtCloseConfigEventDataDiscriminator:              "EvtCloseConfig",
	EvtClosePositionEventDataDiscriminator:            "EvtClosePosition",
	EvtCreateClaimFeeOperatorEventDataDiscriminator:   "EvtCreateClaimFeeOperator",
	EvtCreateConfigEventDataDiscriminator:             "EvtCreateConfig",
	EvtCreateDynamicConfigEventDataDiscriminator:      "EvtCreateDynamicConfig",
	EvtCreatePositionEventDataDiscriminator:           "EvtCreatePosition",
	EvtCreateTokenBadgeEventDataDiscriminator:         "EvtCreateTokenBadge",
	EvtFundRewardEventDataDiscriminator:               "EvtFundReward",
	EvtInitializePoolEventDataDiscriminator:           "EvtInitializePool",
	EvtInitializeRewardEventDataDiscriminator:         "EvtInitializeReward",
	EvtLockPositionEventDataDiscriminator:             "EvtLockPosition",
	EvtPermanentLockPositionEventDataDiscriminator:    "EvtPermanentLockPosition",
	EvtRemoveLiquidityEventDataDiscriminator:          "EvtRemoveLiquidity",
	EvtSetPoolStatusEventDataDiscriminator:            "EvtSetPoolStatus",
	EvtSwapEventDataDiscriminator:                     "EvtSwap",
	EvtUpdateRewardDurationEventDataDiscriminator:     "EvtUpdateRewardDuration",
	EvtUpdateRewardFunderEventDataDiscriminator:       "EvtUpdateRewardFunder",
	EvtWithdrawIneligibleRewardEventDataDiscriminator: "EvtWithdrawIneligibleReward",
}
var (
	_ fmt.Formatter = nil
)
var (
	_ *ag_solanago.Transaction = nil
)
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
	Self() any
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			if len(ixData) < 8 {
				continue
			}

			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		if len(eventBinary) < 8 {
			continue
		}
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
