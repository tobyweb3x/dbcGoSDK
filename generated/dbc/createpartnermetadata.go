// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PARTNER FUNCTIONS ////
type CreatePartnerMetadataInstruction struct {
	Metadata *CreatePartnerMetadataParameters

	// [0] = [WRITE] partner_metadata
	// ··········· Partner metadata
	//
	// [1] = [WRITE, SIGNER] payer
	// ··········· Payer of the partner metadata.
	//
	// [2] = [SIGNER] fee_claimer
	// ··········· Fee claimer for partner
	//
	// [3] = [] system_program
	// ··········· System program.
	//
	// [4] = [] event_authority
	//
	// [5] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreatePartnerMetadataInstructionBuilder creates a new `CreatePartnerMetadataInstruction` instruction builder.
func NewCreatePartnerMetadataInstructionBuilder() *CreatePartnerMetadataInstruction {
	nd := &CreatePartnerMetadataInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetMetadata sets the "metadata" parameter.
func (inst *CreatePartnerMetadataInstruction) SetMetadata(metadata CreatePartnerMetadataParameters) *CreatePartnerMetadataInstruction {
	inst.Metadata = &metadata
	return inst
}

// SetPartnerMetadataAccount sets the "partner_metadata" account.
// Partner metadata
func (inst *CreatePartnerMetadataInstruction) SetPartnerMetadataAccount(partnerMetadata ag_solanago.PublicKey) *CreatePartnerMetadataInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(partnerMetadata).WRITE()
	return inst
}

func (inst *CreatePartnerMetadataInstruction) findFindPartnerMetadataAddress(feeClaimer ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: partner_metadata
	seeds = append(seeds, []byte{byte(0x70), byte(0x61), byte(0x72), byte(0x74), byte(0x6e), byte(0x65), byte(0x72), byte(0x5f), byte(0x6d), byte(0x65), byte(0x74), byte(0x61), byte(0x64), byte(0x61), byte(0x74), byte(0x61)})
	// path: feeClaimer
	seeds = append(seeds, feeClaimer.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindPartnerMetadataAddressWithBumpSeed calculates PartnerMetadata account address with given seeds and a known bump seed.
func (inst *CreatePartnerMetadataInstruction) FindPartnerMetadataAddressWithBumpSeed(feeClaimer ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindPartnerMetadataAddress(feeClaimer, bumpSeed)
	return
}

func (inst *CreatePartnerMetadataInstruction) MustFindPartnerMetadataAddressWithBumpSeed(feeClaimer ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPartnerMetadataAddress(feeClaimer, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindPartnerMetadataAddress finds PartnerMetadata account address with given seeds.
func (inst *CreatePartnerMetadataInstruction) FindPartnerMetadataAddress(feeClaimer ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindPartnerMetadataAddress(feeClaimer, 0)
	return
}

func (inst *CreatePartnerMetadataInstruction) MustFindPartnerMetadataAddress(feeClaimer ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindPartnerMetadataAddress(feeClaimer, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetPartnerMetadataAccount gets the "partner_metadata" account.
// Partner metadata
func (inst *CreatePartnerMetadataInstruction) GetPartnerMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
// Payer of the partner metadata.
func (inst *CreatePartnerMetadataInstruction) SetPayerAccount(payer ag_solanago.PublicKey) *CreatePartnerMetadataInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Payer of the partner metadata.
func (inst *CreatePartnerMetadataInstruction) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetFeeClaimerAccount sets the "fee_claimer" account.
// Fee claimer for partner
func (inst *CreatePartnerMetadataInstruction) SetFeeClaimerAccount(feeClaimer ag_solanago.PublicKey) *CreatePartnerMetadataInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(feeClaimer).SIGNER()
	return inst
}

// GetFeeClaimerAccount gets the "fee_claimer" account.
// Fee claimer for partner
func (inst *CreatePartnerMetadataInstruction) GetFeeClaimerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
// System program.
func (inst *CreatePartnerMetadataInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreatePartnerMetadataInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
// System program.
func (inst *CreatePartnerMetadataInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreatePartnerMetadataInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreatePartnerMetadataInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *CreatePartnerMetadataInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *CreatePartnerMetadataInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *CreatePartnerMetadataInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *CreatePartnerMetadataInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *CreatePartnerMetadataInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreatePartnerMetadataInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramAccount sets the "program" account.
func (inst *CreatePartnerMetadataInstruction) SetProgramAccount(program ag_solanago.PublicKey) *CreatePartnerMetadataInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreatePartnerMetadataInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst CreatePartnerMetadataInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreatePartnerMetadata,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreatePartnerMetadataInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreatePartnerMetadataInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Metadata == nil {
			return errors.New("Metadata parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PartnerMetadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FeeClaimer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreatePartnerMetadataInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreatePartnerMetadata")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Metadata", *inst.Metadata))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("partner_metadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     fee_claimer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" event_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CreatePartnerMetadataInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreatePartnerMetadataInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}

// NewCreatePartnerMetadataInstruction declares a new CreatePartnerMetadata instruction with the provided parameters and accounts.
func NewCreatePartnerMetadataInstruction(
	// Parameters:
	metadata CreatePartnerMetadataParameters,
	// Accounts:
	partnerMetadata ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	feeClaimer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *CreatePartnerMetadataInstruction {
	return NewCreatePartnerMetadataInstructionBuilder().
		SetMetadata(metadata).
		SetPartnerMetadataAccount(partnerMetadata).
		SetPayerAccount(payer).
		SetFeeClaimerAccount(feeClaimer).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
