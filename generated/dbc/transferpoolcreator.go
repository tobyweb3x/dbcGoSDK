// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// TransferPoolCreator is the `transfer_pool_creator` instruction.
type TransferPoolCreatorInstruction struct {

	// [0] = [WRITE] virtual_pool
	//
	// [1] = [] config
	//
	// [2] = [SIGNER] creator
	//
	// [3] = [] new_creator
	//
	// [4] = [] event_authority
	//
	// [5] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewTransferPoolCreatorInstructionBuilder creates a new `TransferPoolCreatorInstruction` instruction builder.
func NewTransferPoolCreatorInstructionBuilder() *TransferPoolCreatorInstruction {
	nd := &TransferPoolCreatorInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
func (inst *TransferPoolCreatorInstruction) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *TransferPoolCreatorInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(virtualPool).WRITE()
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
func (inst *TransferPoolCreatorInstruction) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *TransferPoolCreatorInstruction) SetConfigAccount(config ag_solanago.PublicKey) *TransferPoolCreatorInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *TransferPoolCreatorInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCreatorAccount sets the "creator" account.
func (inst *TransferPoolCreatorInstruction) SetCreatorAccount(creator ag_solanago.PublicKey) *TransferPoolCreatorInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(creator).SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *TransferPoolCreatorInstruction) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewCreatorAccount sets the "new_creator" account.
func (inst *TransferPoolCreatorInstruction) SetNewCreatorAccount(newCreator ag_solanago.PublicKey) *TransferPoolCreatorInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newCreator)
	return inst
}

// GetNewCreatorAccount gets the "new_creator" account.
func (inst *TransferPoolCreatorInstruction) GetNewCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *TransferPoolCreatorInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *TransferPoolCreatorInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *TransferPoolCreatorInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *TransferPoolCreatorInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *TransferPoolCreatorInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *TransferPoolCreatorInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *TransferPoolCreatorInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *TransferPoolCreatorInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramAccount sets the "program" account.
func (inst *TransferPoolCreatorInstruction) SetProgramAccount(program ag_solanago.PublicKey) *TransferPoolCreatorInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *TransferPoolCreatorInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst TransferPoolCreatorInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_TransferPoolCreator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst TransferPoolCreatorInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *TransferPoolCreatorInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewCreator is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *TransferPoolCreatorInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("TransferPoolCreator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   virtual_pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        creator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    new_creator", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("event_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj TransferPoolCreatorInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *TransferPoolCreatorInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewTransferPoolCreatorInstruction declares a new TransferPoolCreator instruction with the provided parameters and accounts.
func NewTransferPoolCreatorInstruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	newCreator ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *TransferPoolCreatorInstruction {
	return NewTransferPoolCreatorInstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetConfigAccount(config).
		SetCreatorAccount(creator).
		SetNewCreatorAccount(newCreator).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
