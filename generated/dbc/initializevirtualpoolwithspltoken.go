// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// POOL CREATOR FUNCTIONS ////
type InitializeVirtualPoolWithSplTokenInstruction struct {
	Params *InitializePoolParameters

	// [0] = [] config
	// ··········· Which config the pool belongs to.
	//
	// [1] = [] pool_authority
	//
	// [2] = [SIGNER] creator
	//
	// [3] = [WRITE, SIGNER] base_mint
	//
	// [4] = [] quote_mint
	//
	// [5] = [WRITE] pool
	// ··········· Initialize an account to store the pool state
	//
	// [6] = [WRITE] base_vault
	// ··········· Token a vault for the pool
	//
	// [7] = [WRITE] quote_vault
	// ··········· Token b vault for the pool
	//
	// [8] = [WRITE] mint_metadata
	//
	// [9] = [] metadata_program
	//
	// [10] = [WRITE, SIGNER] payer
	// ··········· Address paying to create the pool. Can be anyone
	//
	// [11] = [] token_quote_program
	// ··········· Program to create mint account and mint tokens
	//
	// [12] = [] token_program
	//
	// [13] = [] system_program
	//
	// [14] = [] event_authority
	//
	// [15] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeVirtualPoolWithSplTokenInstructionBuilder creates a new `InitializeVirtualPoolWithSplTokenInstruction` instruction builder.
func NewInitializeVirtualPoolWithSplTokenInstructionBuilder() *InitializeVirtualPoolWithSplTokenInstruction {
	nd := &InitializeVirtualPoolWithSplTokenInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	nd.AccountMetaSlice[1] = ag_solanago.Meta(Addresses["FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"])
	nd.AccountMetaSlice[9] = ag_solanago.Meta(Addresses["metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"])
	nd.AccountMetaSlice[12] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	nd.AccountMetaSlice[13] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetParams sets the "params" parameter.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetParams(params InitializePoolParameters) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.Params = &params
	return inst
}

// SetConfigAccount sets the "config" account.
// Which config the pool belongs to.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetConfigAccount(config ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
// Which config the pool belongs to.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCreatorAccount sets the "creator" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetCreatorAccount(creator ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(creator).SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBaseMintAccount sets the "base_mint" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(baseMint).WRITE().SIGNER()
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetQuoteMintAccount sets the "quote_mint" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPoolAccount sets the "pool" account.
// Initialize an account to store the pool state
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
// Initialize an account to store the pool state
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBaseVaultAccount sets the "base_vault" account.
// Token a vault for the pool
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) findFindBaseVaultAddress(baseMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: token_vault
	seeds = append(seeds, []byte{byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())
	// path: pool
	seeds = append(seeds, pool.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindBaseVaultAddressWithBumpSeed calculates BaseVault account address with given seeds and a known bump seed.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) FindBaseVaultAddressWithBumpSeed(baseMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindBaseVaultAddress(baseMint, pool, bumpSeed)
	return
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) MustFindBaseVaultAddressWithBumpSeed(baseMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindBaseVaultAddress(baseMint, pool, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindBaseVaultAddress finds BaseVault account address with given seeds.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) FindBaseVaultAddress(baseMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindBaseVaultAddress(baseMint, pool, 0)
	return
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) MustFindBaseVaultAddress(baseMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindBaseVaultAddress(baseMint, pool, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetBaseVaultAccount gets the "base_vault" account.
// Token a vault for the pool
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// Token b vault for the pool
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) findFindQuoteVaultAddress(quoteMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: token_vault
	seeds = append(seeds, []byte{byte(0x74), byte(0x6f), byte(0x6b), byte(0x65), byte(0x6e), byte(0x5f), byte(0x76), byte(0x61), byte(0x75), byte(0x6c), byte(0x74)})
	// path: quoteMint
	seeds = append(seeds, quoteMint.Bytes())
	// path: pool
	seeds = append(seeds, pool.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindQuoteVaultAddressWithBumpSeed calculates QuoteVault account address with given seeds and a known bump seed.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) FindQuoteVaultAddressWithBumpSeed(quoteMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindQuoteVaultAddress(quoteMint, pool, bumpSeed)
	return
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) MustFindQuoteVaultAddressWithBumpSeed(quoteMint ag_solanago.PublicKey, pool ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindQuoteVaultAddress(quoteMint, pool, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindQuoteVaultAddress finds QuoteVault account address with given seeds.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) FindQuoteVaultAddress(quoteMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindQuoteVaultAddress(quoteMint, pool, 0)
	return
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) MustFindQuoteVaultAddress(quoteMint ag_solanago.PublicKey, pool ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindQuoteVaultAddress(quoteMint, pool, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// Token b vault for the pool
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMintMetadataAccount sets the "mint_metadata" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetMintMetadataAccount(mintMetadata ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(mintMetadata).WRITE()
	return inst
}

// GetMintMetadataAccount gets the "mint_metadata" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetMintMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMetadataProgramAccount sets the "metadata_program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetMetadataProgramAccount(metadataProgram ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(metadataProgram)
	return inst
}

// GetMetadataProgramAccount gets the "metadata_program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetPayerAccount sets the "payer" account.
// Address paying to create the pool. Can be anyone
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetPayerAccount(payer ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
// Address paying to create the pool. Can be anyone
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenQuoteProgramAccount sets the "token_quote_program" account.
// Program to create mint account and mint tokens
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetTokenQuoteProgramAccount(tokenQuoteProgram ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenQuoteProgram)
	return inst
}

// GetTokenQuoteProgramAccount gets the "token_quote_program" account.
// Program to create mint account and mint tokens
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetTokenQuoteProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetTokenProgramAccount sets the "token_program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) SetProgramAccount(program ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializeVirtualPoolWithSplTokenInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst InitializeVirtualPoolWithSplTokenInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeVirtualPoolWithSplToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeVirtualPoolWithSplTokenInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MintMetadata is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MetadataProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenQuoteProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *InitializeVirtualPoolWithSplTokenInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeVirtualPoolWithSplToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             config", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     pool_authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            creator", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          base_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         quote_mint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("               pool", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         base_vault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("        quote_vault", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      mint_metadata", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("   metadata_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("              payer", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("token_quote_program", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("      token_program", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("     system_program", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("    event_authority", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("            program", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj InitializeVirtualPoolWithSplTokenInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeVirtualPoolWithSplTokenInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeVirtualPoolWithSplTokenInstruction declares a new InitializeVirtualPoolWithSplToken instruction with the provided parameters and accounts.
func NewInitializeVirtualPoolWithSplTokenInstruction(
	// Parameters:
	params InitializePoolParameters,
	// Accounts:
	config ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	mintMetadata ag_solanago.PublicKey,
	metadataProgram ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *InitializeVirtualPoolWithSplTokenInstruction {
	return NewInitializeVirtualPoolWithSplTokenInstructionBuilder().
		SetParams(params).
		SetConfigAccount(config).
		SetPoolAuthorityAccount(poolAuthority).
		SetCreatorAccount(creator).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetPoolAccount(pool).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetMintMetadataAccount(mintMetadata).
		SetMetadataProgramAccount(metadataProgram).
		SetPayerAccount(payer).
		SetTokenQuoteProgramAccount(tokenQuoteProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
