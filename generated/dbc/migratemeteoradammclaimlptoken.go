// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MigrateMeteoraDammClaimLpToken is the `migrate_meteora_damm_claim_lp_token` instruction.
type MigrateMeteoraDammClaimLpTokenInstruction struct {

	// [0] = [] virtual_pool
	//
	// [1] = [WRITE] migration_metadata
	// ··········· migration metadata
	//
	// [2] = [WRITE] pool_authority
	//
	// [3] = [] lp_mint
	//
	// [4] = [WRITE] source_token
	//
	// [5] = [WRITE] destination_token
	//
	// [6] = [] owner
	//
	// [7] = [SIGNER] sender
	//
	// [8] = [] token_program
	// ··········· token_program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMigrateMeteoraDammClaimLpTokenInstructionBuilder creates a new `MigrateMeteoraDammClaimLpTokenInstruction` instruction builder.
func NewMigrateMeteoraDammClaimLpTokenInstructionBuilder() *MigrateMeteoraDammClaimLpTokenInstruction {
	nd := &MigrateMeteoraDammClaimLpTokenInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	nd.AccountMetaSlice[2] = ag_solanago.Meta(Addresses["FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"]).WRITE()
	nd.AccountMetaSlice[8] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	return nd
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(virtualPool)
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMigrationMetadataAccount sets the "migration_metadata" account.
// migration metadata
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetMigrationMetadataAccount(migrationMetadata ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(migrationMetadata).WRITE()
	return inst
}

// GetMigrationMetadataAccount gets the "migration_metadata" account.
// migration metadata
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetMigrationMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolAuthority).WRITE()
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetLpMintAccount sets the "lp_mint" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetLpMintAccount(lpMint ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(lpMint)
	return inst
}

// GetLpMintAccount gets the "lp_mint" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetLpMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSourceTokenAccount sets the "source_token" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetSourceTokenAccount(sourceToken ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sourceToken).WRITE()
	return inst
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) findFindSourceTokenAddress(poolAuthority ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: poolAuthority
	seeds = append(seeds, poolAuthority.Bytes())
	// const (raw): [6 221 246 225 215 101 161 147 217 203 225 70 206 235 121 172 28 180 133 237 95 91 55 145 58 140 245 133 126 255 0 169]
	seeds = append(seeds, []byte{byte(0x6), byte(0xdd), byte(0xf6), byte(0xe1), byte(0xd7), byte(0x65), byte(0xa1), byte(0x93), byte(0xd9), byte(0xcb), byte(0xe1), byte(0x46), byte(0xce), byte(0xeb), byte(0x79), byte(0xac), byte(0x1c), byte(0xb4), byte(0x85), byte(0xed), byte(0x5f), byte(0x5b), byte(0x37), byte(0x91), byte(0x3a), byte(0x8c), byte(0xf5), byte(0x85), byte(0x7e), byte(0xff), byte(0x0), byte(0xa9)})
	// path: migrationMetadata
	seeds = append(seeds, migrationMetadata.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindSourceTokenAddressWithBumpSeed calculates SourceToken account address with given seeds and a known bump seed.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) FindSourceTokenAddressWithBumpSeed(poolAuthority ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindSourceTokenAddress(poolAuthority, migrationMetadata, bumpSeed)
	return
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) MustFindSourceTokenAddressWithBumpSeed(poolAuthority ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSourceTokenAddress(poolAuthority, migrationMetadata, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindSourceTokenAddress finds SourceToken account address with given seeds.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) FindSourceTokenAddress(poolAuthority ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindSourceTokenAddress(poolAuthority, migrationMetadata, 0)
	return
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) MustFindSourceTokenAddress(poolAuthority ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSourceTokenAddress(poolAuthority, migrationMetadata, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetSourceTokenAccount gets the "source_token" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetSourceTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetDestinationTokenAccount sets the "destination_token" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetDestinationTokenAccount(destinationToken ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(destinationToken).WRITE()
	return inst
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) findFindDestinationTokenAddress(owner ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: owner
	seeds = append(seeds, owner.Bytes())
	// const (raw): [6 221 246 225 215 101 161 147 217 203 225 70 206 235 121 172 28 180 133 237 95 91 55 145 58 140 245 133 126 255 0 169]
	seeds = append(seeds, []byte{byte(0x6), byte(0xdd), byte(0xf6), byte(0xe1), byte(0xd7), byte(0x65), byte(0xa1), byte(0x93), byte(0xd9), byte(0xcb), byte(0xe1), byte(0x46), byte(0xce), byte(0xeb), byte(0x79), byte(0xac), byte(0x1c), byte(0xb4), byte(0x85), byte(0xed), byte(0x5f), byte(0x5b), byte(0x37), byte(0x91), byte(0x3a), byte(0x8c), byte(0xf5), byte(0x85), byte(0x7e), byte(0xff), byte(0x0), byte(0xa9)})
	// path: migrationMetadata
	seeds = append(seeds, migrationMetadata.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindDestinationTokenAddressWithBumpSeed calculates DestinationToken account address with given seeds and a known bump seed.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) FindDestinationTokenAddressWithBumpSeed(owner ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindDestinationTokenAddress(owner, migrationMetadata, bumpSeed)
	return
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) MustFindDestinationTokenAddressWithBumpSeed(owner ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindDestinationTokenAddress(owner, migrationMetadata, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindDestinationTokenAddress finds DestinationToken account address with given seeds.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) FindDestinationTokenAddress(owner ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindDestinationTokenAddress(owner, migrationMetadata, 0)
	return
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) MustFindDestinationTokenAddress(owner ag_solanago.PublicKey, migrationMetadata ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindDestinationTokenAddress(owner, migrationMetadata, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetDestinationTokenAccount gets the "destination_token" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetDestinationTokenAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOwnerAccount sets the "owner" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetOwnerAccount(owner ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(owner)
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSenderAccount sets the "sender" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetSenderAccount(sender ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(sender).SIGNER()
	return inst
}

// GetSenderAccount gets the "sender" account.
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetSenderAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "token_program" account.
// token_program
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "token_program" account.
// token_program
func (inst *MigrateMeteoraDammClaimLpTokenInstruction) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst MigrateMeteoraDammClaimLpTokenInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MigrateMeteoraDammClaimLpToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MigrateMeteoraDammClaimLpTokenInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MigrationMetadata is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.LpMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SourceToken is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.DestinationToken is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Sender is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *MigrateMeteoraDammClaimLpTokenInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MigrateMeteoraDammClaimLpToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      virtual_pool", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("migration_metadata", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    pool_authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           lp_mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      source_token", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" destination_token", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("             owner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("            sender", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("     token_program", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj MigrateMeteoraDammClaimLpTokenInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *MigrateMeteoraDammClaimLpTokenInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewMigrateMeteoraDammClaimLpTokenInstruction declares a new MigrateMeteoraDammClaimLpToken instruction with the provided parameters and accounts.
func NewMigrateMeteoraDammClaimLpTokenInstruction(
	// Accounts:
	virtualPool ag_solanago.PublicKey,
	migrationMetadata ag_solanago.PublicKey,
	poolAuthority ag_solanago.PublicKey,
	lpMint ag_solanago.PublicKey,
	sourceToken ag_solanago.PublicKey,
	destinationToken ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	sender ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *MigrateMeteoraDammClaimLpTokenInstruction {
	return NewMigrateMeteoraDammClaimLpTokenInstructionBuilder().
		SetVirtualPoolAccount(virtualPool).
		SetMigrationMetadataAccount(migrationMetadata).
		SetPoolAuthorityAccount(poolAuthority).
		SetLpMintAccount(lpMint).
		SetSourceTokenAccount(sourceToken).
		SetDestinationTokenAccount(destinationToken).
		SetOwnerAccount(owner).
		SetSenderAccount(sender).
		SetTokenProgramAccount(tokenProgram)
}
