// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ClaimCreatorTradingFee is the `claim_creator_trading_fee` instruction.
type ClaimCreatorTradingFeeInstruction struct {
	MaxBaseAmount  *uint64
	MaxQuoteAmount *uint64

	// [0] = [] pool_authority
	//
	// [1] = [WRITE] pool
	//
	// [2] = [WRITE] token_a_account
	// ··········· The treasury token a account
	//
	// [3] = [WRITE] token_b_account
	// ··········· The treasury token b account
	//
	// [4] = [WRITE] base_vault
	// ··········· The vault token account for input token
	//
	// [5] = [WRITE] quote_vault
	// ··········· The vault token account for output token
	//
	// [6] = [] base_mint
	// ··········· The mint of token a
	//
	// [7] = [] quote_mint
	// ··········· The mint of token b
	//
	// [8] = [SIGNER] creator
	//
	// [9] = [] token_base_program
	// ··········· Token a program
	//
	// [10] = [] token_quote_program
	// ··········· Token b program
	//
	// [11] = [] event_authority
	//
	// [12] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimCreatorTradingFeeInstructionBuilder creates a new `ClaimCreatorTradingFeeInstruction` instruction builder.
func NewClaimCreatorTradingFeeInstructionBuilder() *ClaimCreatorTradingFeeInstruction {
	nd := &ClaimCreatorTradingFeeInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Addresses["FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"])
	return nd
}

// SetMaxBaseAmount sets the "max_base_amount" parameter.
func (inst *ClaimCreatorTradingFeeInstruction) SetMaxBaseAmount(max_base_amount uint64) *ClaimCreatorTradingFeeInstruction {
	inst.MaxBaseAmount = &max_base_amount
	return inst
}

// SetMaxQuoteAmount sets the "max_quote_amount" parameter.
func (inst *ClaimCreatorTradingFeeInstruction) SetMaxQuoteAmount(max_quote_amount uint64) *ClaimCreatorTradingFeeInstruction {
	inst.MaxQuoteAmount = &max_quote_amount
	return inst
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *ClaimCreatorTradingFeeInstruction) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *ClaimCreatorTradingFeeInstruction) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPoolAccount sets the "pool" account.
func (inst *ClaimCreatorTradingFeeInstruction) SetPoolAccount(pool ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pool).WRITE()
	return inst
}

// GetPoolAccount gets the "pool" account.
func (inst *ClaimCreatorTradingFeeInstruction) GetPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAAccountAccount sets the "token_a_account" account.
// The treasury token a account
func (inst *ClaimCreatorTradingFeeInstruction) SetTokenAAccountAccount(tokenAAccount ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAAccount).WRITE()
	return inst
}

// GetTokenAAccountAccount gets the "token_a_account" account.
// The treasury token a account
func (inst *ClaimCreatorTradingFeeInstruction) GetTokenAAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBAccountAccount sets the "token_b_account" account.
// The treasury token b account
func (inst *ClaimCreatorTradingFeeInstruction) SetTokenBAccountAccount(tokenBAccount ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBAccount).WRITE()
	return inst
}

// GetTokenBAccountAccount gets the "token_b_account" account.
// The treasury token b account
func (inst *ClaimCreatorTradingFeeInstruction) GetTokenBAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The vault token account for input token
func (inst *ClaimCreatorTradingFeeInstruction) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The vault token account for input token
func (inst *ClaimCreatorTradingFeeInstruction) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetQuoteVaultAccount sets the "quote_vault" account.
// The vault token account for output token
func (inst *ClaimCreatorTradingFeeInstruction) SetQuoteVaultAccount(quoteVault ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(quoteVault).WRITE()
	return inst
}

// GetQuoteVaultAccount gets the "quote_vault" account.
// The vault token account for output token
func (inst *ClaimCreatorTradingFeeInstruction) GetQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetBaseMintAccount sets the "base_mint" account.
// The mint of token a
func (inst *ClaimCreatorTradingFeeInstruction) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
// The mint of token a
func (inst *ClaimCreatorTradingFeeInstruction) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetQuoteMintAccount sets the "quote_mint" account.
// The mint of token b
func (inst *ClaimCreatorTradingFeeInstruction) SetQuoteMintAccount(quoteMint ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(quoteMint)
	return inst
}

// GetQuoteMintAccount gets the "quote_mint" account.
// The mint of token b
func (inst *ClaimCreatorTradingFeeInstruction) GetQuoteMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCreatorAccount sets the "creator" account.
func (inst *ClaimCreatorTradingFeeInstruction) SetCreatorAccount(creator ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(creator).SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *ClaimCreatorTradingFeeInstruction) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenBaseProgramAccount sets the "token_base_program" account.
// Token a program
func (inst *ClaimCreatorTradingFeeInstruction) SetTokenBaseProgramAccount(tokenBaseProgram ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenBaseProgram)
	return inst
}

// GetTokenBaseProgramAccount gets the "token_base_program" account.
// Token a program
func (inst *ClaimCreatorTradingFeeInstruction) GetTokenBaseProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenQuoteProgramAccount sets the "token_quote_program" account.
// Token b program
func (inst *ClaimCreatorTradingFeeInstruction) SetTokenQuoteProgramAccount(tokenQuoteProgram ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenQuoteProgram)
	return inst
}

// GetTokenQuoteProgramAccount gets the "token_quote_program" account.
// Token b program
func (inst *ClaimCreatorTradingFeeInstruction) GetTokenQuoteProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *ClaimCreatorTradingFeeInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *ClaimCreatorTradingFeeInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *ClaimCreatorTradingFeeInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *ClaimCreatorTradingFeeInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *ClaimCreatorTradingFeeInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *ClaimCreatorTradingFeeInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *ClaimCreatorTradingFeeInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetProgramAccount sets the "program" account.
func (inst *ClaimCreatorTradingFeeInstruction) SetProgramAccount(program ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ClaimCreatorTradingFeeInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst ClaimCreatorTradingFeeInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ClaimCreatorTradingFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ClaimCreatorTradingFeeInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ClaimCreatorTradingFeeInstruction) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MaxBaseAmount == nil {
			return errors.New("MaxBaseAmount parameter is not set")
		}
		if inst.MaxQuoteAmount == nil {
			return errors.New("MaxQuoteAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Pool is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.QuoteVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.QuoteMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenBaseProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenQuoteProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *ClaimCreatorTradingFeeInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ClaimCreatorTradingFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   MaxBaseAmount", *inst.MaxBaseAmount))
						paramsBranch.Child(ag_format.Param("  MaxQuoteAmount", *inst.MaxQuoteAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("               pool", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("           token_a_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           token_b_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         base_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        quote_vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("          base_mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         quote_mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            creator", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta(" token_base_program", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("token_quote_program", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("    event_authority", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            program", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj ClaimCreatorTradingFeeInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxBaseAmount` param:
	err = encoder.Encode(obj.MaxBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteAmount` param:
	err = encoder.Encode(obj.MaxQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ClaimCreatorTradingFeeInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxBaseAmount`:
	err = decoder.Decode(&obj.MaxBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteAmount`:
	err = decoder.Decode(&obj.MaxQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimCreatorTradingFeeInstruction declares a new ClaimCreatorTradingFee instruction with the provided parameters and accounts.
func NewClaimCreatorTradingFeeInstruction(
	// Parameters:
	max_base_amount uint64,
	max_quote_amount uint64,
	// Accounts:
	poolAuthority ag_solanago.PublicKey,
	pool ag_solanago.PublicKey,
	tokenAAccount ag_solanago.PublicKey,
	tokenBAccount ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	quoteVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	quoteMint ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey,
	tokenQuoteProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *ClaimCreatorTradingFeeInstruction {
	return NewClaimCreatorTradingFeeInstructionBuilder().
		SetMaxBaseAmount(max_base_amount).
		SetMaxQuoteAmount(max_quote_amount).
		SetPoolAuthorityAccount(poolAuthority).
		SetPoolAccount(pool).
		SetTokenAAccountAccount(tokenAAccount).
		SetTokenBAccountAccount(tokenBAccount).
		SetBaseVaultAccount(baseVault).
		SetQuoteVaultAccount(quoteVault).
		SetBaseMintAccount(baseMint).
		SetQuoteMintAccount(quoteMint).
		SetCreatorAccount(creator).
		SetTokenBaseProgramAccount(tokenBaseProgram).
		SetTokenQuoteProgramAccount(tokenQuoteProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
