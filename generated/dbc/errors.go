// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"encoding/json"
	"errors"
	"fmt"
	ag_jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"
)

var (
	_ *json.Encoder        = nil
	_ *ag_jsonrpc.RPCError = nil
	_ fmt.Formatter        = nil
	_                      = errors.ErrUnsupported
)
var (
	ErrMathOverflow = &customErrorDef{
		code: 6000,
		msg:  "Math operation overflow",
		name: "MathOverflow",
	}
	ErrInvalidFee = &customErrorDef{
		code: 6001,
		msg:  "Invalid fee setup",
		name: "InvalidFee",
	}
	ErrExceededSlippage = &customErrorDef{
		code: 6002,
		msg:  "Exceeded slippage tolerance",
		name: "ExceededSlippage",
	}
	ErrExceedMaxFeeBps = &customErrorDef{
		code: 6003,
		msg:  "Exceeded max fee bps",
		name: "ExceedMaxFeeBps",
	}
	ErrInvalidAdmin = &customErrorDef{
		code: 6004,
		msg:  "Invalid admin",
		name: "InvalidAdmin",
	}
	ErrAmountIsZero = &customErrorDef{
		code: 6005,
		msg:  "Amount is zero",
		name: "AmountIsZero",
	}
	ErrTypeCastFailed = &customErrorDef{
		code: 6006,
		msg:  "Type cast error",
		name: "TypeCastFailed",
	}
	ErrInvalidActivationType = &customErrorDef{
		code: 6007,
		msg:  "Invalid activation type",
		name: "InvalidActivationType",
	}
	ErrInvalidQuoteMint = &customErrorDef{
		code: 6008,
		msg:  "Invalid quote mint",
		name: "InvalidQuoteMint",
	}
	ErrInvalidCollectFeeMode = &customErrorDef{
		code: 6009,
		msg:  "Invalid collect fee mode",
		name: "InvalidCollectFeeMode",
	}
	ErrInvalidMigrationFeeOption = &customErrorDef{
		code: 6010,
		msg:  "Invalid migration fee option",
		name: "InvalidMigrationFeeOption",
	}
	ErrInvalidInput = &customErrorDef{
		code: 6011,
		msg:  "Invalid input",
		name: "InvalidInput",
	}
	ErrNotEnoughLiquidity = &customErrorDef{
		code: 6012,
		msg:  "Not enough liquidity",
		name: "NotEnoughLiquidity",
	}
	ErrPoolIsCompleted = &customErrorDef{
		code: 6013,
		msg:  "Pool is completed",
		name: "PoolIsCompleted",
	}
	ErrPoolIsIncompleted = &customErrorDef{
		code: 6014,
		msg:  "Pool is incompleted",
		name: "PoolIsIncompleted",
	}
	ErrInvalidMigrationOption = &customErrorDef{
		code: 6015,
		msg:  "Invalid migration option",
		name: "InvalidMigrationOption",
	}
	ErrInvalidTokenDecimals = &customErrorDef{
		code: 6016,
		msg:  "Invalid activation type",
		name: "InvalidTokenDecimals",
	}
	ErrInvalidTokenType = &customErrorDef{
		code: 6017,
		msg:  "Invalid token type",
		name: "InvalidTokenType",
	}
	ErrInvalidFeePercentage = &customErrorDef{
		code: 6018,
		msg:  "Invalid fee percentage",
		name: "InvalidFeePercentage",
	}
	ErrInvalidQuoteThreshold = &customErrorDef{
		code: 6019,
		msg:  "Invalid quote threshold",
		name: "InvalidQuoteThreshold",
	}
	ErrInvalidTokenSupply = &customErrorDef{
		code: 6020,
		msg:  "Invalid token supply",
		name: "InvalidTokenSupply",
	}
	ErrInvalidCurve = &customErrorDef{
		code: 6021,
		msg:  "Invalid curve",
		name: "InvalidCurve",
	}
	ErrNotPermitToDoThisAction = &customErrorDef{
		code: 6022,
		msg:  "Not permit to do this action",
		name: "NotPermitToDoThisAction",
	}
	ErrInvalidOwnerAccount = &customErrorDef{
		code: 6023,
		msg:  "Invalid owner account",
		name: "InvalidOwnerAccount",
	}
	ErrInvalidConfigAccount = &customErrorDef{
		code: 6024,
		msg:  "Invalid config account",
		name: "InvalidConfigAccount",
	}
	ErrSurplusHasBeenWithdraw = &customErrorDef{
		code: 6025,
		msg:  "Surplus has been withdraw",
		name: "SurplusHasBeenWithdraw",
	}
	ErrLeftoverHasBeenWithdraw = &customErrorDef{
		code: 6026,
		msg:  "Leftover has been withdraw",
		name: "LeftoverHasBeenWithdraw",
	}
	ErrTotalBaseTokenExceedMaxSupply = &customErrorDef{
		code: 6027,
		msg:  "Total base token is exceeded max supply",
		name: "TotalBaseTokenExceedMaxSupply",
	}
	ErrUnsupportNativeMintToken2022 = &customErrorDef{
		code: 6028,
		msg:  "Unsupport native mint token 2022",
		name: "UnsupportNativeMintToken2022",
	}
	ErrInsufficientLiquidityForMigration = &customErrorDef{
		code: 6029,
		msg:  "Insufficient liquidity for migration",
		name: "InsufficientLiquidityForMigration",
	}
	ErrMissingPoolConfigInRemainingAccount = &customErrorDef{
		code: 6030,
		msg:  "Missing pool config in remaining account",
		name: "MissingPoolConfigInRemainingAccount",
	}
	ErrInvalidVestingParameters = &customErrorDef{
		code: 6031,
		msg:  "Invalid vesting parameters",
		name: "InvalidVestingParameters",
	}
	ErrInvalidLeftoverAddress = &customErrorDef{
		code: 6032,
		msg:  "Invalid leftover address",
		name: "InvalidLeftoverAddress",
	}
	ErrSwapAmountIsOverAThreshold = &customErrorDef{
		code: 6033,
		msg:  "Swap amount is over a threshold",
		name: "SwapAmountIsOverAThreshold",
	}
	ErrInvalidFeeScheduler = &customErrorDef{
		code: 6034,
		msg:  "Invalid fee scheduler",
		name: "InvalidFeeScheduler",
	}
	ErrInvalidCreatorTradingFeePercentage = &customErrorDef{
		code: 6035,
		msg:  "Invalid creator trading fee percentage",
		name: "InvalidCreatorTradingFeePercentage",
	}
	ErrInvalidNewCreator = &customErrorDef{
		code: 6036,
		msg:  "Invalid new creator",
		name: "InvalidNewCreator",
	}
	ErrInvalidTokenAuthorityOption = &customErrorDef{
		code: 6037,
		msg:  "Invalid token authority option",
		name: "InvalidTokenAuthorityOption",
	}
	ErrInvalidAccount = &customErrorDef{
		code: 6038,
		msg:  "Invalid account for the instruction",
		name: "InvalidAccount",
	}
	ErrInvalidMigratorFeePercentage = &customErrorDef{
		code: 6039,
		msg:  "Invalid migrator fee percentage",
		name: "InvalidMigratorFeePercentage",
	}
	ErrMigrationFeeHasBeenWithdraw = &customErrorDef{
		code: 6040,
		msg:  "Migration fee has been withdraw",
		name: "MigrationFeeHasBeenWithdraw",
	}
	ErrInvalidBaseFeeMode = &customErrorDef{
		code: 6041,
		msg:  "Invalid base fee mode",
		name: "InvalidBaseFeeMode",
	}
	ErrInvalidFeeRateLimiter = &customErrorDef{
		code: 6042,
		msg:  "Invalid fee rate limiter",
		name: "InvalidFeeRateLimiter",
	}
	ErrFailToValidateSingleSwapInstruction = &customErrorDef{
		code: 6043,
		msg:  "Fail to validate single swap instruction in rate limiter",
		name: "FailToValidateSingleSwapInstruction",
	}
	ErrInvalidMigratedPoolFee = &customErrorDef{
		code: 6044,
		msg:  "Invalid migrated pool fee params",
		name: "InvalidMigratedPoolFee",
	}
	ErrUndeterminedError = &customErrorDef{
		code: 6045,
		msg:  "Undertermined error",
		name: "UndeterminedError",
	}
	ErrRateLimiterNotSupported = &customErrorDef{
		code: 6046,
		msg:  "Rate limiter not supported",
		name: "RateLimiterNotSupported",
	}
	ErrAmountLeftIsNotZero = &customErrorDef{
		code: 6047,
		msg:  "Amount left is not zero",
		name: "AmountLeftIsNotZero",
	}
	ErrNextSqrtPriceIsSmallerThanStartSqrtPrice = &customErrorDef{
		code: 6048,
		msg:  "Next sqrt price is smaller than start sqrt price",
		name: "NextSqrtPriceIsSmallerThanStartSqrtPrice",
	}
	Errors = map[int]CustomError{
		6000: ErrMathOverflow,
		6001: ErrInvalidFee,
		6002: ErrExceededSlippage,
		6003: ErrExceedMaxFeeBps,
		6004: ErrInvalidAdmin,
		6005: ErrAmountIsZero,
		6006: ErrTypeCastFailed,
		6007: ErrInvalidActivationType,
		6008: ErrInvalidQuoteMint,
		6009: ErrInvalidCollectFeeMode,
		6010: ErrInvalidMigrationFeeOption,
		6011: ErrInvalidInput,
		6012: ErrNotEnoughLiquidity,
		6013: ErrPoolIsCompleted,
		6014: ErrPoolIsIncompleted,
		6015: ErrInvalidMigrationOption,
		6016: ErrInvalidTokenDecimals,
		6017: ErrInvalidTokenType,
		6018: ErrInvalidFeePercentage,
		6019: ErrInvalidQuoteThreshold,
		6020: ErrInvalidTokenSupply,
		6021: ErrInvalidCurve,
		6022: ErrNotPermitToDoThisAction,
		6023: ErrInvalidOwnerAccount,
		6024: ErrInvalidConfigAccount,
		6025: ErrSurplusHasBeenWithdraw,
		6026: ErrLeftoverHasBeenWithdraw,
		6027: ErrTotalBaseTokenExceedMaxSupply,
		6028: ErrUnsupportNativeMintToken2022,
		6029: ErrInsufficientLiquidityForMigration,
		6030: ErrMissingPoolConfigInRemainingAccount,
		6031: ErrInvalidVestingParameters,
		6032: ErrInvalidLeftoverAddress,
		6033: ErrSwapAmountIsOverAThreshold,
		6034: ErrInvalidFeeScheduler,
		6035: ErrInvalidCreatorTradingFeePercentage,
		6036: ErrInvalidNewCreator,
		6037: ErrInvalidTokenAuthorityOption,
		6038: ErrInvalidAccount,
		6039: ErrInvalidMigratorFeePercentage,
		6040: ErrMigrationFeeHasBeenWithdraw,
		6041: ErrInvalidBaseFeeMode,
		6042: ErrInvalidFeeRateLimiter,
		6043: ErrFailToValidateSingleSwapInstruction,
		6044: ErrInvalidMigratedPoolFee,
		6045: ErrUndeterminedError,
		6046: ErrRateLimiterNotSupported,
		6047: ErrAmountLeftIsNotZero,
		6048: ErrNextSqrtPriceIsSmallerThanStartSqrtPrice,
	}
)

type CustomError interface {
	Code() int
	Name() string
	Error() string
}

type customErrorDef struct {
	code int
	name string
	msg  string
}

func (e *customErrorDef) Code() int {
	return e.code
}

func (e *customErrorDef) Name() string {
	return e.name
}

func (e *customErrorDef) Error() string {
	return fmt.Sprintf("%s(%d): %s", e.name, e.code, e.msg)
}

func DecodeCustomError(rpcErr error) (err error, ok bool) {
	if errCode, o := decodeErrorCode(rpcErr); o {
		if customErr, o := Errors[errCode]; o {
			err = customErr
			ok = true
			return
		}
	}
	return
}

func decodeErrorCode(rpcErr error) (errorCode int, ok bool) {
	var jErr *ag_jsonrpc.RPCError
	if errors.As(rpcErr, &jErr) && jErr.Data != nil {
		if root, o := jErr.Data.(map[string]interface{}); o {
			if rootErr, o := root["err"].(map[string]interface{}); o {
				if rootErrInstructionError, o := rootErr["InstructionError"]; o {
					if rootErrInstructionErrorItems, o := rootErrInstructionError.([]interface{}); o {
						if len(rootErrInstructionErrorItems) == 2 {
							if v, o := rootErrInstructionErrorItems[1].(map[string]interface{}); o {
								if v2, o := v["Custom"].(json.Number); o {
									if code, err := v2.Int64(); err == nil {
										ok = true
										errorCode = int(code)
									}
								} else if v2, o := v["Custom"].(float64); o {
									ok = true
									errorCode = int(v2)
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
