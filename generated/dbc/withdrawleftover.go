// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawLeftover is the `withdraw_leftover` instruction.
type WithdrawLeftoverInstruction struct {

	// [0] = [] pool_authority
	//
	// [1] = [] config
	//
	// [2] = [WRITE] virtual_pool
	//
	// [3] = [WRITE] token_base_account
	// ··········· The receiver token account, withdraw to ATA
	//
	// [4] = [WRITE] base_vault
	// ··········· The vault token account for output token
	//
	// [5] = [] base_mint
	// ··········· The mint of quote token
	//
	// [6] = [] leftover_receiver
	//
	// [7] = [] token_base_program
	// ··········· Token base program
	//
	// [8] = [] event_authority
	//
	// [9] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawLeftoverInstructionBuilder creates a new `WithdrawLeftoverInstruction` instruction builder.
func NewWithdrawLeftoverInstructionBuilder() *WithdrawLeftoverInstruction {
	nd := &WithdrawLeftoverInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	nd.AccountMetaSlice[0] = ag_solanago.Meta(Addresses["FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"])
	return nd
}

// SetPoolAuthorityAccount sets the "pool_authority" account.
func (inst *WithdrawLeftoverInstruction) SetPoolAuthorityAccount(poolAuthority ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(poolAuthority)
	return inst
}

// GetPoolAuthorityAccount gets the "pool_authority" account.
func (inst *WithdrawLeftoverInstruction) GetPoolAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *WithdrawLeftoverInstruction) SetConfigAccount(config ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *WithdrawLeftoverInstruction) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVirtualPoolAccount sets the "virtual_pool" account.
func (inst *WithdrawLeftoverInstruction) SetVirtualPoolAccount(virtualPool ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(virtualPool).WRITE()
	return inst
}

// GetVirtualPoolAccount gets the "virtual_pool" account.
func (inst *WithdrawLeftoverInstruction) GetVirtualPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTokenBaseAccountAccount sets the "token_base_account" account.
// The receiver token account, withdraw to ATA
func (inst *WithdrawLeftoverInstruction) SetTokenBaseAccountAccount(tokenBaseAccount ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(tokenBaseAccount).WRITE()
	return inst
}

func (inst *WithdrawLeftoverInstruction) findFindTokenBaseAccountAddress(leftoverReceiver ag_solanago.PublicKey, tokenBaseProgram ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: leftoverReceiver
	seeds = append(seeds, leftoverReceiver.Bytes())
	// path: tokenBaseProgram
	seeds = append(seeds, tokenBaseProgram.Bytes())
	// path: baseMint
	seeds = append(seeds, baseMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindTokenBaseAccountAddressWithBumpSeed calculates TokenBaseAccount account address with given seeds and a known bump seed.
func (inst *WithdrawLeftoverInstruction) FindTokenBaseAccountAddressWithBumpSeed(leftoverReceiver ag_solanago.PublicKey, tokenBaseProgram ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindTokenBaseAccountAddress(leftoverReceiver, tokenBaseProgram, baseMint, bumpSeed)
	return
}

func (inst *WithdrawLeftoverInstruction) MustFindTokenBaseAccountAddressWithBumpSeed(leftoverReceiver ag_solanago.PublicKey, tokenBaseProgram ag_solanago.PublicKey, baseMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenBaseAccountAddress(leftoverReceiver, tokenBaseProgram, baseMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindTokenBaseAccountAddress finds TokenBaseAccount account address with given seeds.
func (inst *WithdrawLeftoverInstruction) FindTokenBaseAccountAddress(leftoverReceiver ag_solanago.PublicKey, tokenBaseProgram ag_solanago.PublicKey, baseMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindTokenBaseAccountAddress(leftoverReceiver, tokenBaseProgram, baseMint, 0)
	return
}

func (inst *WithdrawLeftoverInstruction) MustFindTokenBaseAccountAddress(leftoverReceiver ag_solanago.PublicKey, tokenBaseProgram ag_solanago.PublicKey, baseMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindTokenBaseAccountAddress(leftoverReceiver, tokenBaseProgram, baseMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetTokenBaseAccountAccount gets the "token_base_account" account.
// The receiver token account, withdraw to ATA
func (inst *WithdrawLeftoverInstruction) GetTokenBaseAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetBaseVaultAccount sets the "base_vault" account.
// The vault token account for output token
func (inst *WithdrawLeftoverInstruction) SetBaseVaultAccount(baseVault ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(baseVault).WRITE()
	return inst
}

// GetBaseVaultAccount gets the "base_vault" account.
// The vault token account for output token
func (inst *WithdrawLeftoverInstruction) GetBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBaseMintAccount sets the "base_mint" account.
// The mint of quote token
func (inst *WithdrawLeftoverInstruction) SetBaseMintAccount(baseMint ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(baseMint)
	return inst
}

// GetBaseMintAccount gets the "base_mint" account.
// The mint of quote token
func (inst *WithdrawLeftoverInstruction) GetBaseMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetLeftoverReceiverAccount sets the "leftover_receiver" account.
func (inst *WithdrawLeftoverInstruction) SetLeftoverReceiverAccount(leftoverReceiver ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(leftoverReceiver)
	return inst
}

// GetLeftoverReceiverAccount gets the "leftover_receiver" account.
func (inst *WithdrawLeftoverInstruction) GetLeftoverReceiverAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenBaseProgramAccount sets the "token_base_program" account.
// Token base program
func (inst *WithdrawLeftoverInstruction) SetTokenBaseProgramAccount(tokenBaseProgram ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenBaseProgram)
	return inst
}

// GetTokenBaseProgramAccount gets the "token_base_program" account.
// Token base program
func (inst *WithdrawLeftoverInstruction) GetTokenBaseProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *WithdrawLeftoverInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *WithdrawLeftoverInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *WithdrawLeftoverInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *WithdrawLeftoverInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *WithdrawLeftoverInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *WithdrawLeftoverInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *WithdrawLeftoverInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetProgramAccount sets the "program" account.
func (inst *WithdrawLeftoverInstruction) SetProgramAccount(program ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *WithdrawLeftoverInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst WithdrawLeftoverInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawLeftover,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawLeftoverInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawLeftoverInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PoolAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VirtualPool is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TokenBaseAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.BaseVault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BaseMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.LeftoverReceiver is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenBaseProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *WithdrawLeftoverInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawLeftover")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    pool_authority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      virtual_pool", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       token_base_", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        base_vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         base_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta(" leftover_receiver", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("token_base_program", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj WithdrawLeftoverInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *WithdrawLeftoverInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewWithdrawLeftoverInstruction declares a new WithdrawLeftover instruction with the provided parameters and accounts.
func NewWithdrawLeftoverInstruction(
	// Accounts:
	poolAuthority ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	virtualPool ag_solanago.PublicKey,
	tokenBaseAccount ag_solanago.PublicKey,
	baseVault ag_solanago.PublicKey,
	baseMint ag_solanago.PublicKey,
	leftoverReceiver ag_solanago.PublicKey,
	tokenBaseProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *WithdrawLeftoverInstruction {
	return NewWithdrawLeftoverInstructionBuilder().
		SetPoolAuthorityAccount(poolAuthority).
		SetConfigAccount(config).
		SetVirtualPoolAccount(virtualPool).
		SetTokenBaseAccountAccount(tokenBaseAccount).
		SetBaseVaultAccount(baseVault).
		SetBaseMintAccount(baseMint).
		SetLeftoverReceiverAccount(leftoverReceiver).
		SetTokenBaseProgramAccount(tokenBaseProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
