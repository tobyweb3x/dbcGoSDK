// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ADMIN FUNCTIONS ///
type CreateClaimFeeOperatorInstruction struct {

	// [0] = [WRITE] claim_fee_operator
	//
	// [1] = [] operator
	//
	// [2] = [WRITE, SIGNER] admin
	//
	// [3] = [] system_program
	//
	// [4] = [] event_authority
	//
	// [5] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateClaimFeeOperatorInstructionBuilder creates a new `CreateClaimFeeOperatorInstruction` instruction builder.
func NewCreateClaimFeeOperatorInstructionBuilder() *CreateClaimFeeOperatorInstruction {
	nd := &CreateClaimFeeOperatorInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["11111111111111111111111111111111"])
	return nd
}

// SetClaimFeeOperatorAccount sets the "claim_fee_operator" account.
func (inst *CreateClaimFeeOperatorInstruction) SetClaimFeeOperatorAccount(claimFeeOperator ag_solanago.PublicKey) *CreateClaimFeeOperatorInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(claimFeeOperator).WRITE()
	return inst
}

func (inst *CreateClaimFeeOperatorInstruction) findFindClaimFeeOperatorAddress(operator ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: cf_operator
	seeds = append(seeds, []byte{byte(0x63), byte(0x66), byte(0x5f), byte(0x6f), byte(0x70), byte(0x65), byte(0x72), byte(0x61), byte(0x74), byte(0x6f), byte(0x72)})
	// path: operator
	seeds = append(seeds, operator.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindClaimFeeOperatorAddressWithBumpSeed calculates ClaimFeeOperator account address with given seeds and a known bump seed.
func (inst *CreateClaimFeeOperatorInstruction) FindClaimFeeOperatorAddressWithBumpSeed(operator ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindClaimFeeOperatorAddress(operator, bumpSeed)
	return
}

func (inst *CreateClaimFeeOperatorInstruction) MustFindClaimFeeOperatorAddressWithBumpSeed(operator ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindClaimFeeOperatorAddress(operator, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindClaimFeeOperatorAddress finds ClaimFeeOperator account address with given seeds.
func (inst *CreateClaimFeeOperatorInstruction) FindClaimFeeOperatorAddress(operator ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindClaimFeeOperatorAddress(operator, 0)
	return
}

func (inst *CreateClaimFeeOperatorInstruction) MustFindClaimFeeOperatorAddress(operator ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindClaimFeeOperatorAddress(operator, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetClaimFeeOperatorAccount gets the "claim_fee_operator" account.
func (inst *CreateClaimFeeOperatorInstruction) GetClaimFeeOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOperatorAccount sets the "operator" account.
func (inst *CreateClaimFeeOperatorInstruction) SetOperatorAccount(operator ag_solanago.PublicKey) *CreateClaimFeeOperatorInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(operator)
	return inst
}

// GetOperatorAccount gets the "operator" account.
func (inst *CreateClaimFeeOperatorInstruction) GetOperatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *CreateClaimFeeOperatorInstruction) SetAdminAccount(admin ag_solanago.PublicKey) *CreateClaimFeeOperatorInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *CreateClaimFeeOperatorInstruction) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "system_program" account.
func (inst *CreateClaimFeeOperatorInstruction) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateClaimFeeOperatorInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "system_program" account.
func (inst *CreateClaimFeeOperatorInstruction) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *CreateClaimFeeOperatorInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *CreateClaimFeeOperatorInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *CreateClaimFeeOperatorInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *CreateClaimFeeOperatorInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *CreateClaimFeeOperatorInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *CreateClaimFeeOperatorInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *CreateClaimFeeOperatorInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *CreateClaimFeeOperatorInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetProgramAccount sets the "program" account.
func (inst *CreateClaimFeeOperatorInstruction) SetProgramAccount(program ag_solanago.PublicKey) *CreateClaimFeeOperatorInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *CreateClaimFeeOperatorInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst CreateClaimFeeOperatorInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateClaimFeeOperator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateClaimFeeOperatorInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateClaimFeeOperatorInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ClaimFeeOperator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Operator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *CreateClaimFeeOperatorInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateClaimFeeOperator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("claim_fee_operator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          operator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    system_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   event_authority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           program", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CreateClaimFeeOperatorInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateClaimFeeOperatorInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateClaimFeeOperatorInstruction declares a new CreateClaimFeeOperator instruction with the provided parameters and accounts.
func NewCreateClaimFeeOperatorInstruction(
	// Accounts:
	claimFeeOperator ag_solanago.PublicKey,
	operator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *CreateClaimFeeOperatorInstruction {
	return NewCreateClaimFeeOperatorInstructionBuilder().
		SetClaimFeeOperatorAccount(claimFeeOperator).
		SetOperatorAccount(operator).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
