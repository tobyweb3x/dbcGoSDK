// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package dbc

import (
	"encoding/base64"
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_rpc "github.com/gagliardetto/solana-go/rpc"
	ag_base58 "github.com/mr-tron/base58"
	"reflect"
	"strings"
)

type EvtClaimCreatorTradingFeeEventData struct {
	Pool             ag_solanago.PublicKey
	TokenBaseAmount  uint64
	TokenQuoteAmount uint64
}

var EvtClaimCreatorTradingFeeEventDataDiscriminator = [8]byte{154, 228, 215, 202, 133, 155, 214, 138}

func (obj EvtClaimCreatorTradingFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClaimCreatorTradingFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenBaseAmount` param:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenQuoteAmount` param:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimCreatorTradingFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClaimCreatorTradingFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[154 228 215 202 133 155 214 138]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClaimCreatorTradingFeeEventData) isEventData() {}
func (obj *EvtClaimCreatorTradingFeeEventData) Self() any {
	return obj
}

type EvtClaimProtocolFeeEventData struct {
	Pool             ag_solanago.PublicKey
	TokenBaseAmount  uint64
	TokenQuoteAmount uint64
}

var EvtClaimProtocolFeeEventDataDiscriminator = [8]byte{186, 244, 75, 251, 188, 13, 25, 33}

func (obj EvtClaimProtocolFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClaimProtocolFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenBaseAmount` param:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenQuoteAmount` param:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimProtocolFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClaimProtocolFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[186 244 75 251 188 13 25 33]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClaimProtocolFeeEventData) isEventData() {}
func (obj *EvtClaimProtocolFeeEventData) Self() any {
	return obj
}

type EvtClaimTradingFeeEventData struct {
	Pool             ag_solanago.PublicKey
	TokenBaseAmount  uint64
	TokenQuoteAmount uint64
}

var EvtClaimTradingFeeEventDataDiscriminator = [8]byte{26, 83, 117, 240, 92, 202, 112, 254}

func (obj EvtClaimTradingFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtClaimTradingFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `TokenBaseAmount` param:
	err = encoder.Encode(obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `TokenQuoteAmount` param:
	err = encoder.Encode(obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtClaimTradingFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtClaimTradingFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[26 83 117 240 92 202 112 254]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `TokenBaseAmount`:
	err = decoder.Decode(&obj.TokenBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `TokenQuoteAmount`:
	err = decoder.Decode(&obj.TokenQuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtClaimTradingFeeEventData) isEventData() {}
func (obj *EvtClaimTradingFeeEventData) Self() any {
	return obj
}

type EvtCloseClaimFeeOperatorEventData struct {
	ClaimFeeOperator ag_solanago.PublicKey
	Operator         ag_solanago.PublicKey
}

var EvtCloseClaimFeeOperatorEventDataDiscriminator = [8]byte{111, 39, 37, 55, 110, 216, 194, 23}

func (obj EvtCloseClaimFeeOperatorEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCloseClaimFeeOperatorEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ClaimFeeOperator` param:
	err = encoder.Encode(obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCloseClaimFeeOperatorEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCloseClaimFeeOperatorEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[111 39 37 55 110 216 194 23]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ClaimFeeOperator`:
	err = decoder.Decode(&obj.ClaimFeeOperator)
	if err != nil {
		return err
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCloseClaimFeeOperatorEventData) isEventData() {}
func (obj *EvtCloseClaimFeeOperatorEventData) Self() any {
	return obj
}

type EvtCreateClaimFeeOperatorEventData struct {
	Operator ag_solanago.PublicKey
}

var EvtCreateClaimFeeOperatorEventDataDiscriminator = [8]byte{21, 6, 153, 120, 68, 116, 28, 177}

func (obj EvtCreateClaimFeeOperatorEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateClaimFeeOperatorEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Operator` param:
	err = encoder.Encode(obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateClaimFeeOperatorEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateClaimFeeOperatorEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[21 6 153 120 68 116 28 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Operator`:
	err = decoder.Decode(&obj.Operator)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateClaimFeeOperatorEventData) isEventData() {}
func (obj *EvtCreateClaimFeeOperatorEventData) Self() any {
	return obj
}

type EvtCreateConfigEventData struct {
	Config                    ag_solanago.PublicKey
	QuoteMint                 ag_solanago.PublicKey
	FeeClaimer                ag_solanago.PublicKey
	Owner                     ag_solanago.PublicKey
	PoolFees                  PoolFeeParameters
	CollectFeeMode            uint8
	MigrationOption           uint8
	ActivationType            uint8
	TokenDecimal              uint8
	TokenType                 uint8
	PartnerLockedLpPercentage uint8
	PartnerLpPercentage       uint8
	CreatorLockedLpPercentage uint8
	CreatorLpPercentage       uint8
	SwapBaseAmount            uint64
	MigrationQuoteThreshold   uint64
	MigrationBaseAmount       uint64
	SqrtStartPrice            ag_binary.Uint128
	LockedVesting             LockedVestingParams
	MigrationFeeOption        uint8
	FixedTokenSupplyFlag      uint8
	PreMigrationTokenSupply   uint64
	PostMigrationTokenSupply  uint64
	Curve                     []LiquidityDistributionParameters
}

var EvtCreateConfigEventDataDiscriminator = [8]byte{131, 207, 180, 174, 180, 73, 165, 54}

func (obj EvtCreateConfigEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateConfigEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `PoolFees` param:
	err = encoder.Encode(obj.PoolFees)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeMode` param:
	err = encoder.Encode(obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Serialize `MigrationOption` param:
	err = encoder.Encode(obj.MigrationOption)
	if err != nil {
		return err
	}
	// Serialize `ActivationType` param:
	err = encoder.Encode(obj.ActivationType)
	if err != nil {
		return err
	}
	// Serialize `TokenDecimal` param:
	err = encoder.Encode(obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Serialize `TokenType` param:
	err = encoder.Encode(obj.TokenType)
	if err != nil {
		return err
	}
	// Serialize `PartnerLockedLpPercentage` param:
	err = encoder.Encode(obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `PartnerLpPercentage` param:
	err = encoder.Encode(obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLockedLpPercentage` param:
	err = encoder.Encode(obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `CreatorLpPercentage` param:
	err = encoder.Encode(obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Serialize `SwapBaseAmount` param:
	err = encoder.Encode(obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `MigrationQuoteThreshold` param:
	err = encoder.Encode(obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Serialize `MigrationBaseAmount` param:
	err = encoder.Encode(obj.MigrationBaseAmount)
	if err != nil {
		return err
	}
	// Serialize `SqrtStartPrice` param:
	err = encoder.Encode(obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Serialize `LockedVesting` param:
	err = encoder.Encode(obj.LockedVesting)
	if err != nil {
		return err
	}
	// Serialize `MigrationFeeOption` param:
	err = encoder.Encode(obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Serialize `FixedTokenSupplyFlag` param:
	err = encoder.Encode(obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Serialize `PreMigrationTokenSupply` param:
	err = encoder.Encode(obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `PostMigrationTokenSupply` param:
	err = encoder.Encode(obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Serialize `Curve` param:
	err = encoder.Encode(obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateConfigEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateConfigEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[131 207 180 174 180 73 165 54]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `PoolFees`:
	err = decoder.Decode(&obj.PoolFees)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeMode`:
	err = decoder.Decode(&obj.CollectFeeMode)
	if err != nil {
		return err
	}
	// Deserialize `MigrationOption`:
	err = decoder.Decode(&obj.MigrationOption)
	if err != nil {
		return err
	}
	// Deserialize `ActivationType`:
	err = decoder.Decode(&obj.ActivationType)
	if err != nil {
		return err
	}
	// Deserialize `TokenDecimal`:
	err = decoder.Decode(&obj.TokenDecimal)
	if err != nil {
		return err
	}
	// Deserialize `TokenType`:
	err = decoder.Decode(&obj.TokenType)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLockedLpPercentage`:
	err = decoder.Decode(&obj.PartnerLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `PartnerLpPercentage`:
	err = decoder.Decode(&obj.PartnerLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLockedLpPercentage`:
	err = decoder.Decode(&obj.CreatorLockedLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `CreatorLpPercentage`:
	err = decoder.Decode(&obj.CreatorLpPercentage)
	if err != nil {
		return err
	}
	// Deserialize `SwapBaseAmount`:
	err = decoder.Decode(&obj.SwapBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `MigrationQuoteThreshold`:
	err = decoder.Decode(&obj.MigrationQuoteThreshold)
	if err != nil {
		return err
	}
	// Deserialize `MigrationBaseAmount`:
	err = decoder.Decode(&obj.MigrationBaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `SqrtStartPrice`:
	err = decoder.Decode(&obj.SqrtStartPrice)
	if err != nil {
		return err
	}
	// Deserialize `LockedVesting`:
	err = decoder.Decode(&obj.LockedVesting)
	if err != nil {
		return err
	}
	// Deserialize `MigrationFeeOption`:
	err = decoder.Decode(&obj.MigrationFeeOption)
	if err != nil {
		return err
	}
	// Deserialize `FixedTokenSupplyFlag`:
	err = decoder.Decode(&obj.FixedTokenSupplyFlag)
	if err != nil {
		return err
	}
	// Deserialize `PreMigrationTokenSupply`:
	err = decoder.Decode(&obj.PreMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `PostMigrationTokenSupply`:
	err = decoder.Decode(&obj.PostMigrationTokenSupply)
	if err != nil {
		return err
	}
	// Deserialize `Curve`:
	err = decoder.Decode(&obj.Curve)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateConfigEventData) isEventData() {}
func (obj *EvtCreateConfigEventData) Self() any {
	return obj
}

type EvtCreateDammV2MigrationMetadataEventData struct {
	VirtualPool ag_solanago.PublicKey
}

var EvtCreateDammV2MigrationMetadataEventDataDiscriminator = [8]byte{103, 111, 132, 168, 140, 253, 150, 114}

func (obj EvtCreateDammV2MigrationMetadataEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateDammV2MigrationMetadataEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateDammV2MigrationMetadataEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateDammV2MigrationMetadataEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[103 111 132 168 140 253 150 114]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateDammV2MigrationMetadataEventData) isEventData() {}
func (obj *EvtCreateDammV2MigrationMetadataEventData) Self() any {
	return obj
}

type EvtCreateMeteoraMigrationMetadataEventData struct {
	VirtualPool ag_solanago.PublicKey
}

var EvtCreateMeteoraMigrationMetadataEventDataDiscriminator = [8]byte{99, 167, 133, 63, 214, 143, 175, 139}

func (obj EvtCreateMeteoraMigrationMetadataEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreateMeteoraMigrationMetadataEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreateMeteoraMigrationMetadataEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreateMeteoraMigrationMetadataEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[99 167 133 63 214 143 175 139]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreateMeteoraMigrationMetadataEventData) isEventData() {}
func (obj *EvtCreateMeteoraMigrationMetadataEventData) Self() any {
	return obj
}

type EvtCreatorWithdrawSurplusEventData struct {
	Pool          ag_solanago.PublicKey
	SurplusAmount uint64
}

var EvtCreatorWithdrawSurplusEventDataDiscriminator = [8]byte{152, 73, 21, 15, 66, 87, 53, 157}

func (obj EvtCreatorWithdrawSurplusEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCreatorWithdrawSurplusEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `SurplusAmount` param:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCreatorWithdrawSurplusEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCreatorWithdrawSurplusEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[152 73 21 15 66 87 53 157]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCreatorWithdrawSurplusEventData) isEventData() {}
func (obj *EvtCreatorWithdrawSurplusEventData) Self() any {
	return obj
}

type EvtCurveCompleteEventData struct {
	Pool         ag_solanago.PublicKey
	Config       ag_solanago.PublicKey
	BaseReserve  uint64
	QuoteReserve uint64
}

var EvtCurveCompleteEventDataDiscriminator = [8]byte{229, 231, 86, 84, 156, 134, 75, 24}

func (obj EvtCurveCompleteEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtCurveCompleteEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `BaseReserve` param:
	err = encoder.Encode(obj.BaseReserve)
	if err != nil {
		return err
	}
	// Serialize `QuoteReserve` param:
	err = encoder.Encode(obj.QuoteReserve)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtCurveCompleteEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtCurveCompleteEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[229 231 86 84 156 134 75 24]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `BaseReserve`:
	err = decoder.Decode(&obj.BaseReserve)
	if err != nil {
		return err
	}
	// Deserialize `QuoteReserve`:
	err = decoder.Decode(&obj.QuoteReserve)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtCurveCompleteEventData) isEventData() {}
func (obj *EvtCurveCompleteEventData) Self() any {
	return obj
}

type EvtInitializePoolEventData struct {
	Pool            ag_solanago.PublicKey
	Config          ag_solanago.PublicKey
	Creator         ag_solanago.PublicKey
	BaseMint        ag_solanago.PublicKey
	PoolType        uint8
	ActivationPoint uint64
}

var EvtInitializePoolEventDataDiscriminator = [8]byte{228, 50, 246, 85, 203, 66, 134, 37}

func (obj EvtInitializePoolEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtInitializePoolEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `PoolType` param:
	err = encoder.Encode(obj.PoolType)
	if err != nil {
		return err
	}
	// Serialize `ActivationPoint` param:
	err = encoder.Encode(obj.ActivationPoint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtInitializePoolEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtInitializePoolEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[228 50 246 85 203 66 134 37]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `PoolType`:
	err = decoder.Decode(&obj.PoolType)
	if err != nil {
		return err
	}
	// Deserialize `ActivationPoint`:
	err = decoder.Decode(&obj.ActivationPoint)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtInitializePoolEventData) isEventData() {}
func (obj *EvtInitializePoolEventData) Self() any {
	return obj
}

type EvtPartnerMetadataEventData struct {
	PartnerMetadata ag_solanago.PublicKey
	FeeClaimer      ag_solanago.PublicKey
}

var EvtPartnerMetadataEventDataDiscriminator = [8]byte{200, 127, 6, 55, 13, 32, 8, 150}

func (obj EvtPartnerMetadataEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtPartnerMetadataEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `PartnerMetadata` param:
	err = encoder.Encode(obj.PartnerMetadata)
	if err != nil {
		return err
	}
	// Serialize `FeeClaimer` param:
	err = encoder.Encode(obj.FeeClaimer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPartnerMetadataEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtPartnerMetadataEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[200 127 6 55 13 32 8 150]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `PartnerMetadata`:
	err = decoder.Decode(&obj.PartnerMetadata)
	if err != nil {
		return err
	}
	// Deserialize `FeeClaimer`:
	err = decoder.Decode(&obj.FeeClaimer)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtPartnerMetadataEventData) isEventData() {}
func (obj *EvtPartnerMetadataEventData) Self() any {
	return obj
}

type EvtPartnerWithdrawMigrationFeeEventData struct {
	Pool ag_solanago.PublicKey
	Fee  uint64
}

var EvtPartnerWithdrawMigrationFeeEventDataDiscriminator = [8]byte{181, 105, 127, 67, 8, 187, 120, 57}

func (obj EvtPartnerWithdrawMigrationFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtPartnerWithdrawMigrationFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPartnerWithdrawMigrationFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtPartnerWithdrawMigrationFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[181 105 127 67 8 187 120 57]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtPartnerWithdrawMigrationFeeEventData) isEventData() {}
func (obj *EvtPartnerWithdrawMigrationFeeEventData) Self() any {
	return obj
}

type EvtPartnerWithdrawSurplusEventData struct {
	Pool          ag_solanago.PublicKey
	SurplusAmount uint64
}

var EvtPartnerWithdrawSurplusEventDataDiscriminator = [8]byte{195, 56, 152, 9, 232, 72, 35, 22}

func (obj EvtPartnerWithdrawSurplusEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtPartnerWithdrawSurplusEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `SurplusAmount` param:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtPartnerWithdrawSurplusEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtPartnerWithdrawSurplusEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[195 56 152 9 232 72 35 22]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtPartnerWithdrawSurplusEventData) isEventData() {}
func (obj *EvtPartnerWithdrawSurplusEventData) Self() any {
	return obj
}

type EvtProtocolWithdrawSurplusEventData struct {
	Pool          ag_solanago.PublicKey
	SurplusAmount uint64
}

var EvtProtocolWithdrawSurplusEventDataDiscriminator = [8]byte{109, 111, 28, 221, 134, 195, 230, 203}

func (obj EvtProtocolWithdrawSurplusEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtProtocolWithdrawSurplusEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `SurplusAmount` param:
	err = encoder.Encode(obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtProtocolWithdrawSurplusEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtProtocolWithdrawSurplusEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[109 111 28 221 134 195 230 203]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `SurplusAmount`:
	err = decoder.Decode(&obj.SurplusAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtProtocolWithdrawSurplusEventData) isEventData() {}
func (obj *EvtProtocolWithdrawSurplusEventData) Self() any {
	return obj
}

type EvtSwapEventData struct {
	Pool             ag_solanago.PublicKey
	Config           ag_solanago.PublicKey
	TradeDirection   uint8
	HasReferral      bool
	Params           SwapParameters
	SwapResult       SwapResult
	AmountIn         uint64
	CurrentTimestamp uint64
}

var EvtSwapEventDataDiscriminator = [8]byte{27, 60, 21, 213, 138, 170, 187, 147}

func (obj EvtSwapEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtSwapEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Config` param:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return err
	}
	// Serialize `TradeDirection` param:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return err
	}
	// Serialize `HasReferral` param:
	err = encoder.Encode(obj.HasReferral)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	// Serialize `SwapResult` param:
	err = encoder.Encode(obj.SwapResult)
	if err != nil {
		return err
	}
	// Serialize `AmountIn` param:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return err
	}
	// Serialize `CurrentTimestamp` param:
	err = encoder.Encode(obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtSwapEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtSwapEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[27 60 21 213 138 170 187 147]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return err
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return err
	}
	// Deserialize `HasReferral`:
	err = decoder.Decode(&obj.HasReferral)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	// Deserialize `SwapResult`:
	err = decoder.Decode(&obj.SwapResult)
	if err != nil {
		return err
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return err
	}
	// Deserialize `CurrentTimestamp`:
	err = decoder.Decode(&obj.CurrentTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtSwapEventData) isEventData() {}
func (obj *EvtSwapEventData) Self() any {
	return obj
}

type EvtUpdatePoolCreatorEventData struct {
	Pool       ag_solanago.PublicKey
	Creator    ag_solanago.PublicKey
	NewCreator ag_solanago.PublicKey
}

var EvtUpdatePoolCreatorEventDataDiscriminator = [8]byte{107, 225, 165, 237, 91, 158, 213, 220}

func (obj EvtUpdatePoolCreatorEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtUpdatePoolCreatorEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `NewCreator` param:
	err = encoder.Encode(obj.NewCreator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtUpdatePoolCreatorEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtUpdatePoolCreatorEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[107 225 165 237 91 158 213 220]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `NewCreator`:
	err = decoder.Decode(&obj.NewCreator)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtUpdatePoolCreatorEventData) isEventData() {}
func (obj *EvtUpdatePoolCreatorEventData) Self() any {
	return obj
}

type EvtVirtualPoolMetadataEventData struct {
	VirtualPoolMetadata ag_solanago.PublicKey
	VirtualPool         ag_solanago.PublicKey
}

var EvtVirtualPoolMetadataEventDataDiscriminator = [8]byte{188, 18, 72, 76, 195, 91, 38, 74}

func (obj EvtVirtualPoolMetadataEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtVirtualPoolMetadataEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `VirtualPoolMetadata` param:
	err = encoder.Encode(obj.VirtualPoolMetadata)
	if err != nil {
		return err
	}
	// Serialize `VirtualPool` param:
	err = encoder.Encode(obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtVirtualPoolMetadataEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtVirtualPoolMetadataEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[188 18 72 76 195 91 38 74]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `VirtualPoolMetadata`:
	err = decoder.Decode(&obj.VirtualPoolMetadata)
	if err != nil {
		return err
	}
	// Deserialize `VirtualPool`:
	err = decoder.Decode(&obj.VirtualPool)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtVirtualPoolMetadataEventData) isEventData() {}
func (obj *EvtVirtualPoolMetadataEventData) Self() any {
	return obj
}

type EvtWithdrawLeftoverEventData struct {
	Pool             ag_solanago.PublicKey
	LeftoverReceiver ag_solanago.PublicKey
	LeftoverAmount   uint64
}

var EvtWithdrawLeftoverEventDataDiscriminator = [8]byte{191, 189, 104, 143, 111, 156, 94, 229}

func (obj EvtWithdrawLeftoverEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtWithdrawLeftoverEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `LeftoverReceiver` param:
	err = encoder.Encode(obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Serialize `LeftoverAmount` param:
	err = encoder.Encode(obj.LeftoverAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtWithdrawLeftoverEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtWithdrawLeftoverEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[191 189 104 143 111 156 94 229]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverReceiver`:
	err = decoder.Decode(&obj.LeftoverReceiver)
	if err != nil {
		return err
	}
	// Deserialize `LeftoverAmount`:
	err = decoder.Decode(&obj.LeftoverAmount)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtWithdrawLeftoverEventData) isEventData() {}
func (obj *EvtWithdrawLeftoverEventData) Self() any {
	return obj
}

type EvtWithdrawMigrationFeeEventData struct {
	Pool ag_solanago.PublicKey
	Fee  uint64
	Flag uint8
}

var EvtWithdrawMigrationFeeEventDataDiscriminator = [8]byte{26, 203, 84, 85, 161, 23, 100, 214}

func (obj EvtWithdrawMigrationFeeEventData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EvtWithdrawMigrationFeeEventDataDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `Fee` param:
	err = encoder.Encode(obj.Fee)
	if err != nil {
		return err
	}
	// Serialize `Flag` param:
	err = encoder.Encode(obj.Flag)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EvtWithdrawMigrationFeeEventData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EvtWithdrawMigrationFeeEventDataDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[26 203 84 85 161 23 100 214]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `Fee`:
	err = decoder.Decode(&obj.Fee)
	if err != nil {
		return err
	}
	// Deserialize `Flag`:
	err = decoder.Decode(&obj.Flag)
	if err != nil {
		return err
	}
	return nil
}

func (*EvtWithdrawMigrationFeeEventData) isEventData() {}
func (obj *EvtWithdrawMigrationFeeEventData) Self() any {
	return obj
}

var eventTypes = map[[8]byte]reflect.Type{
	EvtClaimCreatorTradingFeeEventDataDiscriminator:         reflect.TypeOf(EvtClaimCreatorTradingFeeEventData{}),
	EvtClaimProtocolFeeEventDataDiscriminator:               reflect.TypeOf(EvtClaimProtocolFeeEventData{}),
	EvtClaimTradingFeeEventDataDiscriminator:                reflect.TypeOf(EvtClaimTradingFeeEventData{}),
	EvtCloseClaimFeeOperatorEventDataDiscriminator:          reflect.TypeOf(EvtCloseClaimFeeOperatorEventData{}),
	EvtCreateClaimFeeOperatorEventDataDiscriminator:         reflect.TypeOf(EvtCreateClaimFeeOperatorEventData{}),
	EvtCreateConfigEventDataDiscriminator:                   reflect.TypeOf(EvtCreateConfigEventData{}),
	EvtCreateDammV2MigrationMetadataEventDataDiscriminator:  reflect.TypeOf(EvtCreateDammV2MigrationMetadataEventData{}),
	EvtCreateMeteoraMigrationMetadataEventDataDiscriminator: reflect.TypeOf(EvtCreateMeteoraMigrationMetadataEventData{}),
	EvtCreatorWithdrawSurplusEventDataDiscriminator:         reflect.TypeOf(EvtCreatorWithdrawSurplusEventData{}),
	EvtCurveCompleteEventDataDiscriminator:                  reflect.TypeOf(EvtCurveCompleteEventData{}),
	EvtInitializePoolEventDataDiscriminator:                 reflect.TypeOf(EvtInitializePoolEventData{}),
	EvtPartnerMetadataEventDataDiscriminator:                reflect.TypeOf(EvtPartnerMetadataEventData{}),
	EvtPartnerWithdrawMigrationFeeEventDataDiscriminator:    reflect.TypeOf(EvtPartnerWithdrawMigrationFeeEventData{}),
	EvtPartnerWithdrawSurplusEventDataDiscriminator:         reflect.TypeOf(EvtPartnerWithdrawSurplusEventData{}),
	EvtProtocolWithdrawSurplusEventDataDiscriminator:        reflect.TypeOf(EvtProtocolWithdrawSurplusEventData{}),
	EvtSwapEventDataDiscriminator:                           reflect.TypeOf(EvtSwapEventData{}),
	EvtUpdatePoolCreatorEventDataDiscriminator:              reflect.TypeOf(EvtUpdatePoolCreatorEventData{}),
	EvtVirtualPoolMetadataEventDataDiscriminator:            reflect.TypeOf(EvtVirtualPoolMetadataEventData{}),
	EvtWithdrawLeftoverEventDataDiscriminator:               reflect.TypeOf(EvtWithdrawLeftoverEventData{}),
	EvtWithdrawMigrationFeeEventDataDiscriminator:           reflect.TypeOf(EvtWithdrawMigrationFeeEventData{}),
}
var eventNames = map[[8]byte]string{
	EvtClaimCreatorTradingFeeEventDataDiscriminator:         "EvtClaimCreatorTradingFee",
	EvtClaimProtocolFeeEventDataDiscriminator:               "EvtClaimProtocolFee",
	EvtClaimTradingFeeEventDataDiscriminator:                "EvtClaimTradingFee",
	EvtCloseClaimFeeOperatorEventDataDiscriminator:          "EvtCloseClaimFeeOperator",
	EvtCreateClaimFeeOperatorEventDataDiscriminator:         "EvtCreateClaimFeeOperator",
	EvtCreateConfigEventDataDiscriminator:                   "EvtCreateConfig",
	EvtCreateDammV2MigrationMetadataEventDataDiscriminator:  "EvtCreateDammV2MigrationMetadata",
	EvtCreateMeteoraMigrationMetadataEventDataDiscriminator: "EvtCreateMeteoraMigrationMetadata",
	EvtCreatorWithdrawSurplusEventDataDiscriminator:         "EvtCreatorWithdrawSurplus",
	EvtCurveCompleteEventDataDiscriminator:                  "EvtCurveComplete",
	EvtInitializePoolEventDataDiscriminator:                 "EvtInitializePool",
	EvtPartnerMetadataEventDataDiscriminator:                "EvtPartnerMetadata",
	EvtPartnerWithdrawMigrationFeeEventDataDiscriminator:    "EvtPartnerWithdrawMigrationFee",
	EvtPartnerWithdrawSurplusEventDataDiscriminator:         "EvtPartnerWithdrawSurplus",
	EvtProtocolWithdrawSurplusEventDataDiscriminator:        "EvtProtocolWithdrawSurplus",
	EvtSwapEventDataDiscriminator:                           "EvtSwap",
	EvtUpdatePoolCreatorEventDataDiscriminator:              "EvtUpdatePoolCreator",
	EvtVirtualPoolMetadataEventDataDiscriminator:            "EvtVirtualPoolMetadata",
	EvtWithdrawLeftoverEventDataDiscriminator:               "EvtWithdrawLeftover",
	EvtWithdrawMigrationFeeEventDataDiscriminator:           "EvtWithdrawMigrationFee",
}
var (
	_ fmt.Formatter = nil
)
var (
	_ *ag_solanago.Transaction = nil
)
var (
	_ *strings.Builder = nil
)
var (
	_ *base64.Encoding = nil
)
var (
	_ *ag_binary.Decoder = nil
)
var (
	_ *ag_rpc.GetTransactionResult = nil
)
var (
	_ *ag_base58.Alphabet = nil
)

type Event struct {
	Name string
	Data EventData
}

type EventData interface {
	UnmarshalWithDecoder(decoder *ag_binary.Decoder) error
	isEventData()
	Self() any
}

const eventLogPrefix = "Program data: "

func DecodeEvents(txData *ag_rpc.GetTransactionResult, targetProgramId ag_solanago.PublicKey, getAddressTables func(altAddresses []ag_solanago.PublicKey) (tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice, err error)) (evts []*Event, err error) {
	var tx *ag_solanago.Transaction
	if tx, err = txData.Transaction.GetTransaction(); err != nil {
		return
	}

	altAddresses := make([]ag_solanago.PublicKey, len(tx.Message.AddressTableLookups))
	for i, alt := range tx.Message.AddressTableLookups {
		altAddresses[i] = alt.AccountKey
	}
	if len(altAddresses) > 0 {
		var tables map[ag_solanago.PublicKey]ag_solanago.PublicKeySlice
		if tables, err = getAddressTables(altAddresses); err != nil {
			return
		}
		tx.Message.SetAddressTables(tables)
		if err = tx.Message.ResolveLookups(); err != nil {
			return
		}
	}

	var base64Binaries [][]byte
	logMessageEventBinaries, err := decodeEventsFromLogMessage(txData.Meta.LogMessages)
	if err != nil {
		return
	}

	emitedCPIEventBinaries, err := decodeEventsFromEmitCPI(txData.Meta.InnerInstructions, tx.Message.AccountKeys, targetProgramId)
	if err != nil {
		return
	}

	base64Binaries = append(base64Binaries, logMessageEventBinaries...)
	base64Binaries = append(base64Binaries, emitedCPIEventBinaries...)
	evts, err = parseEvents(base64Binaries)
	return
}

func decodeEventsFromLogMessage(logMessages []string) (eventBinaries [][]byte, err error) {
	for _, log := range logMessages {
		if strings.HasPrefix(log, eventLogPrefix) {
			eventBase64 := log[len(eventLogPrefix):]

			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				err = fmt.Errorf("failed to decode logMessage event: %s", eventBase64)
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func decodeEventsFromEmitCPI(InnerInstructions []ag_rpc.InnerInstruction, accountKeys ag_solanago.PublicKeySlice, targetProgramId ag_solanago.PublicKey) (eventBinaries [][]byte, err error) {
	for _, parsedIx := range InnerInstructions {
		for _, ix := range parsedIx.Instructions {
			if accountKeys[ix.ProgramIDIndex] != targetProgramId {
				continue
			}

			var ixData []byte
			if ixData, err = ag_base58.Decode(ix.Data.String()); err != nil {
				return
			}
			if len(ixData) < 8 {
				continue
			}

			eventBase64 := base64.StdEncoding.EncodeToString(ixData[8:])
			var eventBinary []byte
			if eventBinary, err = base64.StdEncoding.DecodeString(eventBase64); err != nil {
				return
			}
			eventBinaries = append(eventBinaries, eventBinary)
		}
	}
	return
}

func parseEvents(base64Binaries [][]byte) (evts []*Event, err error) {
	decoder := ag_binary.NewDecoderWithEncoding(nil, ag_binary.EncodingBorsh)

	for _, eventBinary := range base64Binaries {
		if len(eventBinary) < 8 {
			continue
		}
		eventDiscriminator := ag_binary.TypeID(eventBinary[:8])
		if eventType, ok := eventTypes[eventDiscriminator]; ok {
			eventData := reflect.New(eventType).Interface().(EventData)
			decoder.Reset(eventBinary)
			if err = eventData.UnmarshalWithDecoder(decoder); err != nil {
				err = fmt.Errorf("failed to unmarshal event %s: %w", eventType.String(), err)
				return
			}
			evts = append(evts, &Event{
				Name: eventNames[eventDiscriminator],
				Data: eventData,
			})
		}
	}
	return
}
